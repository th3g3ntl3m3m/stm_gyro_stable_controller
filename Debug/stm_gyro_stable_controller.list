
stm_gyro_stable_controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009a40  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  08009bc8  08009bc8  00019bc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009c48  08009c48  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08009c48  08009c48  00019c48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009c50  08009c50  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009c50  08009c50  00019c50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009c54  08009c54  00019c54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08009c58  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          000005c4  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000638  20000638  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017892  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003292  00000000  00000000  00037936  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011f0  00000000  00000000  0003abc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000010a8  00000000  00000000  0003bdb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024314  00000000  00000000  0003ce60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000166cd  00000000  00000000  00061174  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dbc26  00000000  00000000  00077841  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00153467  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004d6c  00000000  00000000  001534bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000074 	.word	0x20000074
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08009bb0 	.word	0x08009bb0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000078 	.word	0x20000078
 80001c4:	08009bb0 	.word	0x08009bb0

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_d2f>:
 8000a74:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a78:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a7c:	bf24      	itt	cs
 8000a7e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a82:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a86:	d90d      	bls.n	8000aa4 <__aeabi_d2f+0x30>
 8000a88:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a8c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a90:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a94:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a98:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a9c:	bf08      	it	eq
 8000a9e:	f020 0001 	biceq.w	r0, r0, #1
 8000aa2:	4770      	bx	lr
 8000aa4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000aa8:	d121      	bne.n	8000aee <__aeabi_d2f+0x7a>
 8000aaa:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000aae:	bfbc      	itt	lt
 8000ab0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ab4:	4770      	bxlt	lr
 8000ab6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000aba:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000abe:	f1c2 0218 	rsb	r2, r2, #24
 8000ac2:	f1c2 0c20 	rsb	ip, r2, #32
 8000ac6:	fa10 f30c 	lsls.w	r3, r0, ip
 8000aca:	fa20 f002 	lsr.w	r0, r0, r2
 8000ace:	bf18      	it	ne
 8000ad0:	f040 0001 	orrne.w	r0, r0, #1
 8000ad4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ad8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000adc:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ae0:	ea40 000c 	orr.w	r0, r0, ip
 8000ae4:	fa23 f302 	lsr.w	r3, r3, r2
 8000ae8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000aec:	e7cc      	b.n	8000a88 <__aeabi_d2f+0x14>
 8000aee:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000af2:	d107      	bne.n	8000b04 <__aeabi_d2f+0x90>
 8000af4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000af8:	bf1e      	ittt	ne
 8000afa:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000afe:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b02:	4770      	bxne	lr
 8000b04:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop

08000b14 <__aeabi_uldivmod>:
 8000b14:	b953      	cbnz	r3, 8000b2c <__aeabi_uldivmod+0x18>
 8000b16:	b94a      	cbnz	r2, 8000b2c <__aeabi_uldivmod+0x18>
 8000b18:	2900      	cmp	r1, #0
 8000b1a:	bf08      	it	eq
 8000b1c:	2800      	cmpeq	r0, #0
 8000b1e:	bf1c      	itt	ne
 8000b20:	f04f 31ff 	movne.w	r1, #4294967295
 8000b24:	f04f 30ff 	movne.w	r0, #4294967295
 8000b28:	f000 b96e 	b.w	8000e08 <__aeabi_idiv0>
 8000b2c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b30:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b34:	f000 f806 	bl	8000b44 <__udivmoddi4>
 8000b38:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b3c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b40:	b004      	add	sp, #16
 8000b42:	4770      	bx	lr

08000b44 <__udivmoddi4>:
 8000b44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b48:	9d08      	ldr	r5, [sp, #32]
 8000b4a:	4604      	mov	r4, r0
 8000b4c:	468c      	mov	ip, r1
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	f040 8083 	bne.w	8000c5a <__udivmoddi4+0x116>
 8000b54:	428a      	cmp	r2, r1
 8000b56:	4617      	mov	r7, r2
 8000b58:	d947      	bls.n	8000bea <__udivmoddi4+0xa6>
 8000b5a:	fab2 f282 	clz	r2, r2
 8000b5e:	b142      	cbz	r2, 8000b72 <__udivmoddi4+0x2e>
 8000b60:	f1c2 0020 	rsb	r0, r2, #32
 8000b64:	fa24 f000 	lsr.w	r0, r4, r0
 8000b68:	4091      	lsls	r1, r2
 8000b6a:	4097      	lsls	r7, r2
 8000b6c:	ea40 0c01 	orr.w	ip, r0, r1
 8000b70:	4094      	lsls	r4, r2
 8000b72:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000b76:	0c23      	lsrs	r3, r4, #16
 8000b78:	fbbc f6f8 	udiv	r6, ip, r8
 8000b7c:	fa1f fe87 	uxth.w	lr, r7
 8000b80:	fb08 c116 	mls	r1, r8, r6, ip
 8000b84:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b88:	fb06 f10e 	mul.w	r1, r6, lr
 8000b8c:	4299      	cmp	r1, r3
 8000b8e:	d909      	bls.n	8000ba4 <__udivmoddi4+0x60>
 8000b90:	18fb      	adds	r3, r7, r3
 8000b92:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b96:	f080 8119 	bcs.w	8000dcc <__udivmoddi4+0x288>
 8000b9a:	4299      	cmp	r1, r3
 8000b9c:	f240 8116 	bls.w	8000dcc <__udivmoddi4+0x288>
 8000ba0:	3e02      	subs	r6, #2
 8000ba2:	443b      	add	r3, r7
 8000ba4:	1a5b      	subs	r3, r3, r1
 8000ba6:	b2a4      	uxth	r4, r4
 8000ba8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000bac:	fb08 3310 	mls	r3, r8, r0, r3
 8000bb0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bb4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000bb8:	45a6      	cmp	lr, r4
 8000bba:	d909      	bls.n	8000bd0 <__udivmoddi4+0x8c>
 8000bbc:	193c      	adds	r4, r7, r4
 8000bbe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bc2:	f080 8105 	bcs.w	8000dd0 <__udivmoddi4+0x28c>
 8000bc6:	45a6      	cmp	lr, r4
 8000bc8:	f240 8102 	bls.w	8000dd0 <__udivmoddi4+0x28c>
 8000bcc:	3802      	subs	r0, #2
 8000bce:	443c      	add	r4, r7
 8000bd0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bd4:	eba4 040e 	sub.w	r4, r4, lr
 8000bd8:	2600      	movs	r6, #0
 8000bda:	b11d      	cbz	r5, 8000be4 <__udivmoddi4+0xa0>
 8000bdc:	40d4      	lsrs	r4, r2
 8000bde:	2300      	movs	r3, #0
 8000be0:	e9c5 4300 	strd	r4, r3, [r5]
 8000be4:	4631      	mov	r1, r6
 8000be6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bea:	b902      	cbnz	r2, 8000bee <__udivmoddi4+0xaa>
 8000bec:	deff      	udf	#255	; 0xff
 8000bee:	fab2 f282 	clz	r2, r2
 8000bf2:	2a00      	cmp	r2, #0
 8000bf4:	d150      	bne.n	8000c98 <__udivmoddi4+0x154>
 8000bf6:	1bcb      	subs	r3, r1, r7
 8000bf8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000bfc:	fa1f f887 	uxth.w	r8, r7
 8000c00:	2601      	movs	r6, #1
 8000c02:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c06:	0c21      	lsrs	r1, r4, #16
 8000c08:	fb0e 331c 	mls	r3, lr, ip, r3
 8000c0c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c10:	fb08 f30c 	mul.w	r3, r8, ip
 8000c14:	428b      	cmp	r3, r1
 8000c16:	d907      	bls.n	8000c28 <__udivmoddi4+0xe4>
 8000c18:	1879      	adds	r1, r7, r1
 8000c1a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c1e:	d202      	bcs.n	8000c26 <__udivmoddi4+0xe2>
 8000c20:	428b      	cmp	r3, r1
 8000c22:	f200 80e9 	bhi.w	8000df8 <__udivmoddi4+0x2b4>
 8000c26:	4684      	mov	ip, r0
 8000c28:	1ac9      	subs	r1, r1, r3
 8000c2a:	b2a3      	uxth	r3, r4
 8000c2c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c30:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c34:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000c38:	fb08 f800 	mul.w	r8, r8, r0
 8000c3c:	45a0      	cmp	r8, r4
 8000c3e:	d907      	bls.n	8000c50 <__udivmoddi4+0x10c>
 8000c40:	193c      	adds	r4, r7, r4
 8000c42:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c46:	d202      	bcs.n	8000c4e <__udivmoddi4+0x10a>
 8000c48:	45a0      	cmp	r8, r4
 8000c4a:	f200 80d9 	bhi.w	8000e00 <__udivmoddi4+0x2bc>
 8000c4e:	4618      	mov	r0, r3
 8000c50:	eba4 0408 	sub.w	r4, r4, r8
 8000c54:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c58:	e7bf      	b.n	8000bda <__udivmoddi4+0x96>
 8000c5a:	428b      	cmp	r3, r1
 8000c5c:	d909      	bls.n	8000c72 <__udivmoddi4+0x12e>
 8000c5e:	2d00      	cmp	r5, #0
 8000c60:	f000 80b1 	beq.w	8000dc6 <__udivmoddi4+0x282>
 8000c64:	2600      	movs	r6, #0
 8000c66:	e9c5 0100 	strd	r0, r1, [r5]
 8000c6a:	4630      	mov	r0, r6
 8000c6c:	4631      	mov	r1, r6
 8000c6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c72:	fab3 f683 	clz	r6, r3
 8000c76:	2e00      	cmp	r6, #0
 8000c78:	d14a      	bne.n	8000d10 <__udivmoddi4+0x1cc>
 8000c7a:	428b      	cmp	r3, r1
 8000c7c:	d302      	bcc.n	8000c84 <__udivmoddi4+0x140>
 8000c7e:	4282      	cmp	r2, r0
 8000c80:	f200 80b8 	bhi.w	8000df4 <__udivmoddi4+0x2b0>
 8000c84:	1a84      	subs	r4, r0, r2
 8000c86:	eb61 0103 	sbc.w	r1, r1, r3
 8000c8a:	2001      	movs	r0, #1
 8000c8c:	468c      	mov	ip, r1
 8000c8e:	2d00      	cmp	r5, #0
 8000c90:	d0a8      	beq.n	8000be4 <__udivmoddi4+0xa0>
 8000c92:	e9c5 4c00 	strd	r4, ip, [r5]
 8000c96:	e7a5      	b.n	8000be4 <__udivmoddi4+0xa0>
 8000c98:	f1c2 0320 	rsb	r3, r2, #32
 8000c9c:	fa20 f603 	lsr.w	r6, r0, r3
 8000ca0:	4097      	lsls	r7, r2
 8000ca2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ca6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000caa:	40d9      	lsrs	r1, r3
 8000cac:	4330      	orrs	r0, r6
 8000cae:	0c03      	lsrs	r3, r0, #16
 8000cb0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000cb4:	fa1f f887 	uxth.w	r8, r7
 8000cb8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000cbc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cc0:	fb06 f108 	mul.w	r1, r6, r8
 8000cc4:	4299      	cmp	r1, r3
 8000cc6:	fa04 f402 	lsl.w	r4, r4, r2
 8000cca:	d909      	bls.n	8000ce0 <__udivmoddi4+0x19c>
 8000ccc:	18fb      	adds	r3, r7, r3
 8000cce:	f106 3cff 	add.w	ip, r6, #4294967295
 8000cd2:	f080 808d 	bcs.w	8000df0 <__udivmoddi4+0x2ac>
 8000cd6:	4299      	cmp	r1, r3
 8000cd8:	f240 808a 	bls.w	8000df0 <__udivmoddi4+0x2ac>
 8000cdc:	3e02      	subs	r6, #2
 8000cde:	443b      	add	r3, r7
 8000ce0:	1a5b      	subs	r3, r3, r1
 8000ce2:	b281      	uxth	r1, r0
 8000ce4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ce8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cf0:	fb00 f308 	mul.w	r3, r0, r8
 8000cf4:	428b      	cmp	r3, r1
 8000cf6:	d907      	bls.n	8000d08 <__udivmoddi4+0x1c4>
 8000cf8:	1879      	adds	r1, r7, r1
 8000cfa:	f100 3cff 	add.w	ip, r0, #4294967295
 8000cfe:	d273      	bcs.n	8000de8 <__udivmoddi4+0x2a4>
 8000d00:	428b      	cmp	r3, r1
 8000d02:	d971      	bls.n	8000de8 <__udivmoddi4+0x2a4>
 8000d04:	3802      	subs	r0, #2
 8000d06:	4439      	add	r1, r7
 8000d08:	1acb      	subs	r3, r1, r3
 8000d0a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000d0e:	e778      	b.n	8000c02 <__udivmoddi4+0xbe>
 8000d10:	f1c6 0c20 	rsb	ip, r6, #32
 8000d14:	fa03 f406 	lsl.w	r4, r3, r6
 8000d18:	fa22 f30c 	lsr.w	r3, r2, ip
 8000d1c:	431c      	orrs	r4, r3
 8000d1e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000d22:	fa01 f306 	lsl.w	r3, r1, r6
 8000d26:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000d2a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000d2e:	431f      	orrs	r7, r3
 8000d30:	0c3b      	lsrs	r3, r7, #16
 8000d32:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d36:	fa1f f884 	uxth.w	r8, r4
 8000d3a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d3e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000d42:	fb09 fa08 	mul.w	sl, r9, r8
 8000d46:	458a      	cmp	sl, r1
 8000d48:	fa02 f206 	lsl.w	r2, r2, r6
 8000d4c:	fa00 f306 	lsl.w	r3, r0, r6
 8000d50:	d908      	bls.n	8000d64 <__udivmoddi4+0x220>
 8000d52:	1861      	adds	r1, r4, r1
 8000d54:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d58:	d248      	bcs.n	8000dec <__udivmoddi4+0x2a8>
 8000d5a:	458a      	cmp	sl, r1
 8000d5c:	d946      	bls.n	8000dec <__udivmoddi4+0x2a8>
 8000d5e:	f1a9 0902 	sub.w	r9, r9, #2
 8000d62:	4421      	add	r1, r4
 8000d64:	eba1 010a 	sub.w	r1, r1, sl
 8000d68:	b2bf      	uxth	r7, r7
 8000d6a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d6e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d72:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000d76:	fb00 f808 	mul.w	r8, r0, r8
 8000d7a:	45b8      	cmp	r8, r7
 8000d7c:	d907      	bls.n	8000d8e <__udivmoddi4+0x24a>
 8000d7e:	19e7      	adds	r7, r4, r7
 8000d80:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d84:	d22e      	bcs.n	8000de4 <__udivmoddi4+0x2a0>
 8000d86:	45b8      	cmp	r8, r7
 8000d88:	d92c      	bls.n	8000de4 <__udivmoddi4+0x2a0>
 8000d8a:	3802      	subs	r0, #2
 8000d8c:	4427      	add	r7, r4
 8000d8e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d92:	eba7 0708 	sub.w	r7, r7, r8
 8000d96:	fba0 8902 	umull	r8, r9, r0, r2
 8000d9a:	454f      	cmp	r7, r9
 8000d9c:	46c6      	mov	lr, r8
 8000d9e:	4649      	mov	r1, r9
 8000da0:	d31a      	bcc.n	8000dd8 <__udivmoddi4+0x294>
 8000da2:	d017      	beq.n	8000dd4 <__udivmoddi4+0x290>
 8000da4:	b15d      	cbz	r5, 8000dbe <__udivmoddi4+0x27a>
 8000da6:	ebb3 020e 	subs.w	r2, r3, lr
 8000daa:	eb67 0701 	sbc.w	r7, r7, r1
 8000dae:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000db2:	40f2      	lsrs	r2, r6
 8000db4:	ea4c 0202 	orr.w	r2, ip, r2
 8000db8:	40f7      	lsrs	r7, r6
 8000dba:	e9c5 2700 	strd	r2, r7, [r5]
 8000dbe:	2600      	movs	r6, #0
 8000dc0:	4631      	mov	r1, r6
 8000dc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dc6:	462e      	mov	r6, r5
 8000dc8:	4628      	mov	r0, r5
 8000dca:	e70b      	b.n	8000be4 <__udivmoddi4+0xa0>
 8000dcc:	4606      	mov	r6, r0
 8000dce:	e6e9      	b.n	8000ba4 <__udivmoddi4+0x60>
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	e6fd      	b.n	8000bd0 <__udivmoddi4+0x8c>
 8000dd4:	4543      	cmp	r3, r8
 8000dd6:	d2e5      	bcs.n	8000da4 <__udivmoddi4+0x260>
 8000dd8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ddc:	eb69 0104 	sbc.w	r1, r9, r4
 8000de0:	3801      	subs	r0, #1
 8000de2:	e7df      	b.n	8000da4 <__udivmoddi4+0x260>
 8000de4:	4608      	mov	r0, r1
 8000de6:	e7d2      	b.n	8000d8e <__udivmoddi4+0x24a>
 8000de8:	4660      	mov	r0, ip
 8000dea:	e78d      	b.n	8000d08 <__udivmoddi4+0x1c4>
 8000dec:	4681      	mov	r9, r0
 8000dee:	e7b9      	b.n	8000d64 <__udivmoddi4+0x220>
 8000df0:	4666      	mov	r6, ip
 8000df2:	e775      	b.n	8000ce0 <__udivmoddi4+0x19c>
 8000df4:	4630      	mov	r0, r6
 8000df6:	e74a      	b.n	8000c8e <__udivmoddi4+0x14a>
 8000df8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000dfc:	4439      	add	r1, r7
 8000dfe:	e713      	b.n	8000c28 <__udivmoddi4+0xe4>
 8000e00:	3802      	subs	r0, #2
 8000e02:	443c      	add	r4, r7
 8000e04:	e724      	b.n	8000c50 <__udivmoddi4+0x10c>
 8000e06:	bf00      	nop

08000e08 <__aeabi_idiv0>:
 8000e08:	4770      	bx	lr
 8000e0a:	bf00      	nop

08000e0c <FusionAhrsInitialise>:
/**
 * @brief Initialises the AHRS algorithm structure.
 * @param fusionAhrs AHRS algorithm structure.
 * @param gain AHRS algorithm gain.
 */
void FusionAhrsInitialise(FusionAhrs * const fusionAhrs, const float gain) {
 8000e0c:	b480      	push	{r7}
 8000e0e:	b08b      	sub	sp, #44	; 0x2c
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
 8000e14:	ed87 0a00 	vstr	s0, [r7]
    fusionAhrs->gain = gain;
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	683a      	ldr	r2, [r7, #0]
 8000e1c:	601a      	str	r2, [r3, #0]
    fusionAhrs->minimumMagneticFieldSquared = 0.0f;
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	f04f 0200 	mov.w	r2, #0
 8000e24:	605a      	str	r2, [r3, #4]
    fusionAhrs->maximumMagneticFieldSquared = FLT_MAX;
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	4a15      	ldr	r2, [pc, #84]	; (8000e80 <FusionAhrsInitialise+0x74>)
 8000e2a:	609a      	str	r2, [r3, #8]
    fusionAhrs->quaternion = FUSION_QUATERNION_IDENTITY;
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000e32:	60da      	str	r2, [r3, #12]
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	f04f 0200 	mov.w	r2, #0
 8000e3a:	611a      	str	r2, [r3, #16]
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	f04f 0200 	mov.w	r2, #0
 8000e42:	615a      	str	r2, [r3, #20]
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	f04f 0200 	mov.w	r2, #0
 8000e4a:	619a      	str	r2, [r3, #24]
    fusionAhrs->linearAcceleration = FUSION_VECTOR3_ZERO;
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	f04f 0200 	mov.w	r2, #0
 8000e52:	61da      	str	r2, [r3, #28]
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	f04f 0200 	mov.w	r2, #0
 8000e5a:	621a      	str	r2, [r3, #32]
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	f04f 0200 	mov.w	r2, #0
 8000e62:	625a      	str	r2, [r3, #36]	; 0x24
    fusionAhrs->rampedGain = INITIAL_GAIN;
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	4a07      	ldr	r2, [pc, #28]	; (8000e84 <FusionAhrsInitialise+0x78>)
 8000e68:	629a      	str	r2, [r3, #40]	; 0x28
    fusionAhrs->zeroYawPending = false;
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
}
 8000e72:	bf00      	nop
 8000e74:	372c      	adds	r7, #44	; 0x2c
 8000e76:	46bd      	mov	sp, r7
 8000e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7c:	4770      	bx	lr
 8000e7e:	bf00      	nop
 8000e80:	7f7fffff 	.word	0x7f7fffff
 8000e84:	41200000 	.word	0x41200000

08000e88 <FusionAhrsUpdate>:
 * @param accelerometer Accelerometer measurement in g.
 * @param magnetometer Magnetometer measurement in uT.
 * @param samplePeriod Sample period in seconds.  This is the difference in time
 * between the current and previous gyroscope measurements.
 */
void FusionAhrsUpdate(FusionAhrs * const fusionAhrs, const FusionVector3 gyroscope, const FusionVector3 accelerometer, const FusionVector3 magnetometer, const float samplePeriod) {
 8000e88:	b490      	push	{r4, r7}
 8000e8a:	f5ad 6d85 	sub.w	sp, sp, #1064	; 0x428
 8000e8e:	af00      	add	r7, sp, #0
 8000e90:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e94:	6018      	str	r0, [r3, #0]
 8000e96:	f107 0120 	add.w	r1, r7, #32
 8000e9a:	eeb0 5a61 	vmov.f32	s10, s3
 8000e9e:	eef0 5a42 	vmov.f32	s11, s4
 8000ea2:	eeb0 6a62 	vmov.f32	s12, s5
 8000ea6:	f107 0214 	add.w	r2, r7, #20
 8000eaa:	eef0 6a43 	vmov.f32	s13, s6
 8000eae:	eeb0 7a63 	vmov.f32	s14, s7
 8000eb2:	eef0 7a44 	vmov.f32	s15, s8
 8000eb6:	f107 0308 	add.w	r3, r7, #8
 8000eba:	1d38      	adds	r0, r7, #4
 8000ebc:	edc0 4a00 	vstr	s9, [r0]
 8000ec0:	ed81 0a00 	vstr	s0, [r1]
 8000ec4:	edc1 0a01 	vstr	s1, [r1, #4]
 8000ec8:	ed81 1a02 	vstr	s2, [r1, #8]
 8000ecc:	ed82 5a00 	vstr	s10, [r2]
 8000ed0:	edc2 5a01 	vstr	s11, [r2, #4]
 8000ed4:	ed82 6a02 	vstr	s12, [r2, #8]
 8000ed8:	edc3 6a00 	vstr	s13, [r3]
 8000edc:	ed83 7a01 	vstr	s14, [r3, #4]
 8000ee0:	edc3 7a02 	vstr	s15, [r3, #8]
#define Q fusionAhrs->quaternion.element // define shorthand label for more readable code

    // Calculate feedback error
    FusionVector3 halfFeedbackError = FUSION_VECTOR3_ZERO; // scaled by 0.5 to avoid repeated multiplications by 2
 8000ee4:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8000ee8:	f04f 0200 	mov.w	r2, #0
 8000eec:	601a      	str	r2, [r3, #0]
 8000eee:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8000ef2:	f04f 0200 	mov.w	r2, #0
 8000ef6:	605a      	str	r2, [r3, #4]
 8000ef8:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8000efc:	f04f 0200 	mov.w	r2, #0
 8000f00:	609a      	str	r2, [r3, #8]
    do {
        // Abandon feedback calculation if accelerometer measurement invalid
        if ((accelerometer.axis.x == 0.0f) && (accelerometer.axis.y == 0.0f) && (accelerometer.axis.z == 0.0f)) {
 8000f02:	f107 0314 	add.w	r3, r7, #20
 8000f06:	edd3 7a00 	vldr	s15, [r3]
 8000f0a:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000f0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f12:	d112      	bne.n	8000f3a <FusionAhrsUpdate+0xb2>
 8000f14:	f107 0314 	add.w	r3, r7, #20
 8000f18:	edd3 7a01 	vldr	s15, [r3, #4]
 8000f1c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000f20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f24:	d109      	bne.n	8000f3a <FusionAhrsUpdate+0xb2>
 8000f26:	f107 0314 	add.w	r3, r7, #20
 8000f2a:	edd3 7a02 	vldr	s15, [r3, #8]
 8000f2e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000f32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f36:	f000 8437 	beq.w	80017a8 <FusionAhrsUpdate+0x920>
            break;
        }

        // Calculate direction of gravity assumed by quaternion
        const FusionVector3 halfGravity = {
            .axis.x = Q.x * Q.z - Q.w * Q.y,
 8000f3a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	ed93 7a04 	vldr	s14, [r3, #16]
 8000f44:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	edd3 7a06 	vldr	s15, [r3, #24]
 8000f4e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000f52:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	edd3 6a03 	vldr	s13, [r3, #12]
 8000f5c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	edd3 7a05 	vldr	s15, [r3, #20]
 8000f66:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000f6a:	ee77 7a67 	vsub.f32	s15, s14, s15
        const FusionVector3 halfGravity = {
 8000f6e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8000f72:	edc3 7a00 	vstr	s15, [r3]
            .axis.y = Q.w * Q.x + Q.y * Q.z,
 8000f76:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	ed93 7a03 	vldr	s14, [r3, #12]
 8000f80:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	edd3 7a04 	vldr	s15, [r3, #16]
 8000f8a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000f8e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	edd3 6a05 	vldr	s13, [r3, #20]
 8000f98:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	edd3 7a06 	vldr	s15, [r3, #24]
 8000fa2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000fa6:	ee77 7a27 	vadd.f32	s15, s14, s15
        const FusionVector3 halfGravity = {
 8000faa:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8000fae:	edc3 7a01 	vstr	s15, [r3, #4]
            .axis.z = Q.w * Q.w - 0.5f + Q.z * Q.z,
 8000fb2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	ed93 7a03 	vldr	s14, [r3, #12]
 8000fbc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	edd3 7a03 	vldr	s15, [r3, #12]
 8000fc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000fca:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8000fce:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8000fd2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	edd3 6a06 	vldr	s13, [r3, #24]
 8000fdc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	edd3 7a06 	vldr	s15, [r3, #24]
 8000fe6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000fea:	ee77 7a27 	vadd.f32	s15, s14, s15
        const FusionVector3 halfGravity = {
 8000fee:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8000ff2:	edc3 7a02 	vstr	s15, [r3, #8]
 8000ff6:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000ffa:	f107 0214 	add.w	r2, r7, #20
 8000ffe:	ca07      	ldmia	r2, {r0, r1, r2}
 8001000:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001004:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001008:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 800100c:	ca07      	ldmia	r2, {r0, r1, r2}
 800100e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 * @param vector Vector of the operation.
 * @return Vector magnitude squared.
 */
static inline __attribute__((always_inline)) float FusionVectorMagnitudeSquared(const FusionVector3 vector) {
#define V vector.axis // define shorthand label for more readable code
    return V.x * V.x + V.y * V.y + V.z * V.z;
 8001012:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001016:	ed93 7a00 	vldr	s14, [r3]
 800101a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800101e:	edd3 7a00 	vldr	s15, [r3]
 8001022:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001026:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800102a:	edd3 6a01 	vldr	s13, [r3, #4]
 800102e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001032:	edd3 7a01 	vldr	s15, [r3, #4]
 8001036:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800103a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800103e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001042:	edd3 6a02 	vldr	s13, [r3, #8]
 8001046:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800104a:	edd3 7a02 	vldr	s15, [r3, #8]
 800104e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001052:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001056:	f207 431c 	addw	r3, r7, #1052	; 0x41c
 800105a:	edc3 7a00 	vstr	s15, [r3]
    float halfx = 0.5f * x;
 800105e:	f207 431c 	addw	r3, r7, #1052	; 0x41c
 8001062:	edd3 7a00 	vldr	s15, [r3]
 8001066:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800106a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800106e:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 8001072:	edc3 7a00 	vstr	s15, [r3]
    float y = x;
 8001076:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800107a:	f207 421c 	addw	r2, r7, #1052	; 0x41c
 800107e:	6812      	ldr	r2, [r2, #0]
 8001080:	601a      	str	r2, [r3, #0]
    int32_t i = *(int32_t*) & y;
 8001082:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001086:	681a      	ldr	r2, [r3, #0]
 8001088:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800108c:	601a      	str	r2, [r3, #0]
    i = 0x5f3759df - (i >> 1);
 800108e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	105a      	asrs	r2, r3, #1
 8001096:	4b9a      	ldr	r3, [pc, #616]	; (8001300 <FusionAhrsUpdate+0x478>)
 8001098:	1a9b      	subs	r3, r3, r2
 800109a:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800109e:	6013      	str	r3, [r2, #0]
    y = *(float*) &i;
 80010a0:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80010a4:	681a      	ldr	r2, [r3, #0]
 80010a6:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80010aa:	601a      	str	r2, [r3, #0]
    y = y * (1.5f - (halfx * y * y));
 80010ac:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80010b0:	ed93 7a00 	vldr	s14, [r3]
 80010b4:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 80010b8:	edd3 7a00 	vldr	s15, [r3]
 80010bc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80010c0:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80010c4:	edd3 7a00 	vldr	s15, [r3]
 80010c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010cc:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 80010d0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80010d4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80010d8:	edd3 7a00 	vldr	s15, [r3]
 80010dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010e0:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80010e4:	edc3 7a00 	vstr	s15, [r3]
    return y;
 80010e8:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80010ec:	681b      	ldr	r3, [r3, #0]
 * square root approximation.
 * @param vector Vector to be normalised.
 * @return Normalised vector.
 */
static inline __attribute__((always_inline)) FusionVector3 FusionVectorFastNormalise(const FusionVector3 vector) {
    const float magnitudeReciprocal = FusionFastInverseSqrt(FusionVectorMagnitudeSquared(vector));
 80010ee:	f207 4214 	addw	r2, r7, #1044	; 0x414
 80010f2:	6013      	str	r3, [r2, #0]
 80010f4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80010f8:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 80010fc:	ca07      	ldmia	r2, {r0, r1, r2}
 80010fe:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001102:	f207 4314 	addw	r3, r7, #1044	; 0x414
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 800110c:	6013      	str	r3, [r2, #0]
    result.axis.x = vector.axis.x * scalar;
 800110e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001112:	ed93 7a00 	vldr	s14, [r3]
 8001116:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 800111a:	edd3 7a00 	vldr	s15, [r3]
 800111e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001122:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001126:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = vector.axis.y * scalar;
 800112a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800112e:	ed93 7a01 	vldr	s14, [r3, #4]
 8001132:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8001136:	edd3 7a00 	vldr	s15, [r3]
 800113a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800113e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001142:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = vector.axis.z * scalar;
 8001146:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800114a:	ed93 7a02 	vldr	s14, [r3, #8]
 800114e:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8001152:	edd3 7a00 	vldr	s15, [r3]
 8001156:	ee67 7a27 	vmul.f32	s15, s14, s15
 800115a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800115e:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 8001162:	f507 734a 	add.w	r3, r7, #808	; 0x328
 8001166:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800116a:	ca07      	ldmia	r2, {r0, r1, r2}
 800116c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001170:	f507 724a 	add.w	r2, r7, #808	; 0x328
 8001174:	f507 734d 	add.w	r3, r7, #820	; 0x334
 8001178:	ca07      	ldmia	r2, {r0, r1, r2}
 800117a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    return FusionVectorMultiplyScalar(vector, magnitudeReciprocal);
 800117e:	bf00      	nop
 8001180:	f507 7331 	add.w	r3, r7, #708	; 0x2c4
 8001184:	461c      	mov	r4, r3
 8001186:	f507 734d 	add.w	r3, r7, #820	; 0x334
 800118a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800118e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001192:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001196:	f507 7231 	add.w	r2, r7, #708	; 0x2c4
 800119a:	ca07      	ldmia	r2, {r0, r1, r2}
 800119c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80011a0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80011a4:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 80011a8:	ca07      	ldmia	r2, {r0, r1, r2}
 80011aa:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    result.axis.x = A.y * B.z - A.z * B.y;
 80011ae:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80011b2:	ed93 7a01 	vldr	s14, [r3, #4]
 80011b6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80011ba:	edd3 7a02 	vldr	s15, [r3, #8]
 80011be:	ee27 7a27 	vmul.f32	s14, s14, s15
 80011c2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80011c6:	edd3 6a02 	vldr	s13, [r3, #8]
 80011ca:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80011ce:	edd3 7a01 	vldr	s15, [r3, #4]
 80011d2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80011d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011da:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80011de:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = A.z * B.x - A.x * B.z;
 80011e2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80011e6:	ed93 7a02 	vldr	s14, [r3, #8]
 80011ea:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80011ee:	edd3 7a00 	vldr	s15, [r3]
 80011f2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80011f6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80011fa:	edd3 6a00 	vldr	s13, [r3]
 80011fe:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001202:	edd3 7a02 	vldr	s15, [r3, #8]
 8001206:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800120a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800120e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001212:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = A.x * B.y - A.y * B.x;
 8001216:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800121a:	ed93 7a00 	vldr	s14, [r3]
 800121e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001222:	edd3 7a01 	vldr	s15, [r3, #4]
 8001226:	ee27 7a27 	vmul.f32	s14, s14, s15
 800122a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800122e:	edd3 6a01 	vldr	s13, [r3, #4]
 8001232:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001236:	edd3 7a00 	vldr	s15, [r3]
 800123a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800123e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001242:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001246:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 800124a:	f507 7347 	add.w	r3, r7, #796	; 0x31c
 800124e:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8001252:	ca07      	ldmia	r2, {r0, r1, r2}
 8001254:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001258:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 800125c:	f507 7247 	add.w	r2, r7, #796	; 0x31c
 8001260:	ca07      	ldmia	r2, {r0, r1, r2}
 8001262:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001266:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800126a:	f107 0208 	add.w	r2, r7, #8
 800126e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001270:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    return V.x * V.x + V.y * V.y + V.z * V.z;
 8001274:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001278:	ed93 7a00 	vldr	s14, [r3]
 800127c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001280:	edd3 7a00 	vldr	s15, [r3]
 8001284:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001288:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800128c:	edd3 6a01 	vldr	s13, [r3, #4]
 8001290:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001294:	edd3 7a01 	vldr	s15, [r3, #4]
 8001298:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800129c:	ee37 7a27 	vadd.f32	s14, s14, s15
 80012a0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80012a4:	edd3 6a02 	vldr	s13, [r3, #8]
 80012a8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80012ac:	edd3 7a02 	vldr	s15, [r3, #8]
 80012b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80012b4:	ee77 7a27 	vadd.f32	s15, s14, s15

        // Calculate accelerometer feedback error
        halfFeedbackError = FusionVectorCrossProduct(FusionVectorFastNormalise(accelerometer), halfGravity);

        // Abandon magnetometer feedback calculation if magnetometer measurement invalid
        const float magnetometerMagnitudeSquared = FusionVectorMagnitudeSquared(magnetometer);
 80012b8:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80012bc:	edc3 7a00 	vstr	s15, [r3]
        if ((magnetometerMagnitudeSquared < fusionAhrs->minimumMagneticFieldSquared) || (magnetometerMagnitudeSquared > fusionAhrs->maximumMagneticFieldSquared)) {
 80012c0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	edd3 7a01 	vldr	s15, [r3, #4]
 80012ca:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80012ce:	ed93 7a00 	vldr	s14, [r3]
 80012d2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80012d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012da:	f100 8266 	bmi.w	80017aa <FusionAhrsUpdate+0x922>
 80012de:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	edd3 7a02 	vldr	s15, [r3, #8]
 80012e8:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80012ec:	ed93 7a00 	vldr	s14, [r3]
 80012f0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80012f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012f8:	f300 8257 	bgt.w	80017aa <FusionAhrsUpdate+0x922>
 80012fc:	e002      	b.n	8001304 <FusionAhrsUpdate+0x47c>
 80012fe:	bf00      	nop
 8001300:	5f3759df 	.word	0x5f3759df
            break;
        }

        // Compute direction of 'magnetic west' assumed by quaternion
        const FusionVector3 halfWest = {
            .axis.x = Q.x * Q.y + Q.w * Q.z,
 8001304:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	ed93 7a04 	vldr	s14, [r3, #16]
 800130e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	edd3 7a05 	vldr	s15, [r3, #20]
 8001318:	ee27 7a27 	vmul.f32	s14, s14, s15
 800131c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	edd3 6a03 	vldr	s13, [r3, #12]
 8001326:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	edd3 7a06 	vldr	s15, [r3, #24]
 8001330:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001334:	ee77 7a27 	vadd.f32	s15, s14, s15
        const FusionVector3 halfWest = {
 8001338:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 800133c:	edc3 7a00 	vstr	s15, [r3]
            .axis.y = Q.w * Q.w - 0.5f + Q.y * Q.y,
 8001340:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	ed93 7a03 	vldr	s14, [r3, #12]
 800134a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	edd3 7a03 	vldr	s15, [r3, #12]
 8001354:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001358:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800135c:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001360:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	edd3 6a05 	vldr	s13, [r3, #20]
 800136a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	edd3 7a05 	vldr	s15, [r3, #20]
 8001374:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001378:	ee77 7a27 	vadd.f32	s15, s14, s15
        const FusionVector3 halfWest = {
 800137c:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 8001380:	edc3 7a01 	vstr	s15, [r3, #4]
            .axis.z = Q.y * Q.z - Q.w * Q.x
 8001384:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	ed93 7a05 	vldr	s14, [r3, #20]
 800138e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	edd3 7a06 	vldr	s15, [r3, #24]
 8001398:	ee27 7a27 	vmul.f32	s14, s14, s15
 800139c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	edd3 6a03 	vldr	s13, [r3, #12]
 80013a6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	edd3 7a04 	vldr	s15, [r3, #16]
 80013b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013b4:	ee77 7a67 	vsub.f32	s15, s14, s15
        const FusionVector3 halfWest = {
 80013b8:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 80013bc:	edc3 7a02 	vstr	s15, [r3, #8]
 80013c0:	f507 7392 	add.w	r3, r7, #292	; 0x124
 80013c4:	f107 0214 	add.w	r2, r7, #20
 80013c8:	ca07      	ldmia	r2, {r0, r1, r2}
 80013ca:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80013ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80013d2:	f107 0208 	add.w	r2, r7, #8
 80013d6:	ca07      	ldmia	r2, {r0, r1, r2}
 80013d8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    result.axis.x = A.y * B.z - A.z * B.y;
 80013dc:	f507 7392 	add.w	r3, r7, #292	; 0x124
 80013e0:	ed93 7a01 	vldr	s14, [r3, #4]
 80013e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80013e8:	edd3 7a02 	vldr	s15, [r3, #8]
 80013ec:	ee27 7a27 	vmul.f32	s14, s14, s15
 80013f0:	f507 7392 	add.w	r3, r7, #292	; 0x124
 80013f4:	edd3 6a02 	vldr	s13, [r3, #8]
 80013f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80013fc:	edd3 7a01 	vldr	s15, [r3, #4]
 8001400:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001404:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001408:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800140c:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = A.z * B.x - A.x * B.z;
 8001410:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8001414:	ed93 7a02 	vldr	s14, [r3, #8]
 8001418:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800141c:	edd3 7a00 	vldr	s15, [r3]
 8001420:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001424:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8001428:	edd3 6a00 	vldr	s13, [r3]
 800142c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001430:	edd3 7a02 	vldr	s15, [r3, #8]
 8001434:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001438:	ee77 7a67 	vsub.f32	s15, s14, s15
 800143c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001440:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = A.x * B.y - A.y * B.x;
 8001444:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8001448:	ed93 7a00 	vldr	s14, [r3]
 800144c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001450:	edd3 7a01 	vldr	s15, [r3, #4]
 8001454:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001458:	f507 7392 	add.w	r3, r7, #292	; 0x124
 800145c:	edd3 6a01 	vldr	s13, [r3, #4]
 8001460:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001464:	edd3 7a00 	vldr	s15, [r3]
 8001468:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800146c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001470:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001474:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 8001478:	f507 728c 	add.w	r2, r7, #280	; 0x118
 800147c:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001480:	ca07      	ldmia	r2, {r0, r1, r2}
 8001482:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001486:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 800148a:	461c      	mov	r4, r3
 800148c:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001490:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001494:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001498:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 800149c:	f507 7234 	add.w	r2, r7, #720	; 0x2d0
 80014a0:	ca07      	ldmia	r2, {r0, r1, r2}
 80014a2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80014a6:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80014aa:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 80014ae:	ca07      	ldmia	r2, {r0, r1, r2}
 80014b0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    return V.x * V.x + V.y * V.y + V.z * V.z;
 80014b4:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80014b8:	ed93 7a00 	vldr	s14, [r3]
 80014bc:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80014c0:	edd3 7a00 	vldr	s15, [r3]
 80014c4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80014c8:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80014cc:	edd3 6a01 	vldr	s13, [r3, #4]
 80014d0:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80014d4:	edd3 7a01 	vldr	s15, [r3, #4]
 80014d8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014dc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80014e0:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80014e4:	edd3 6a02 	vldr	s13, [r3, #8]
 80014e8:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80014ec:	edd3 7a02 	vldr	s15, [r3, #8]
 80014f0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014f8:	f207 430c 	addw	r3, r7, #1036	; 0x40c
 80014fc:	edc3 7a00 	vstr	s15, [r3]
    float halfx = 0.5f * x;
 8001500:	f207 430c 	addw	r3, r7, #1036	; 0x40c
 8001504:	edd3 7a00 	vldr	s15, [r3]
 8001508:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800150c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001510:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8001514:	edc3 7a00 	vstr	s15, [r3]
    float y = x;
 8001518:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800151c:	f207 420c 	addw	r2, r7, #1036	; 0x40c
 8001520:	6812      	ldr	r2, [r2, #0]
 8001522:	601a      	str	r2, [r3, #0]
    int32_t i = *(int32_t*) & y;
 8001524:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001528:	681a      	ldr	r2, [r3, #0]
 800152a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800152e:	601a      	str	r2, [r3, #0]
    i = 0x5f3759df - (i >> 1);
 8001530:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	105a      	asrs	r2, r3, #1
 8001538:	4b99      	ldr	r3, [pc, #612]	; (80017a0 <FusionAhrsUpdate+0x918>)
 800153a:	1a9b      	subs	r3, r3, r2
 800153c:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 8001540:	6013      	str	r3, [r2, #0]
    y = *(float*) &i;
 8001542:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001546:	681a      	ldr	r2, [r3, #0]
 8001548:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800154c:	601a      	str	r2, [r3, #0]
    y = y * (1.5f - (halfx * y * y));
 800154e:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001552:	ed93 7a00 	vldr	s14, [r3]
 8001556:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 800155a:	edd3 7a00 	vldr	s15, [r3]
 800155e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001562:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001566:	edd3 7a00 	vldr	s15, [r3]
 800156a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800156e:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8001572:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001576:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800157a:	edd3 7a00 	vldr	s15, [r3]
 800157e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001582:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001586:	edc3 7a00 	vstr	s15, [r3]
    return y;
 800158a:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800158e:	681b      	ldr	r3, [r3, #0]
    const float magnitudeReciprocal = FusionFastInverseSqrt(FusionVectorMagnitudeSquared(vector));
 8001590:	f207 4204 	addw	r2, r7, #1028	; 0x404
 8001594:	6013      	str	r3, [r2, #0]
 8001596:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800159a:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 800159e:	ca07      	ldmia	r2, {r0, r1, r2}
 80015a0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80015a4:	f207 4304 	addw	r3, r7, #1028	; 0x404
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f507 6280 	add.w	r2, r7, #1024	; 0x400
 80015ae:	6013      	str	r3, [r2, #0]
    result.axis.x = vector.axis.x * scalar;
 80015b0:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80015b4:	ed93 7a00 	vldr	s14, [r3]
 80015b8:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 80015bc:	edd3 7a00 	vldr	s15, [r3]
 80015c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015c4:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80015c8:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = vector.axis.y * scalar;
 80015cc:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80015d0:	ed93 7a01 	vldr	s14, [r3, #4]
 80015d4:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 80015d8:	edd3 7a00 	vldr	s15, [r3]
 80015dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015e0:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80015e4:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = vector.axis.z * scalar;
 80015e8:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80015ec:	ed93 7a02 	vldr	s14, [r3, #8]
 80015f0:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 80015f4:	edd3 7a00 	vldr	s15, [r3]
 80015f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015fc:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001600:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 8001604:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 8001608:	f507 7356 	add.w	r3, r7, #856	; 0x358
 800160c:	ca07      	ldmia	r2, {r0, r1, r2}
 800160e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001612:	f507 7359 	add.w	r3, r7, #868	; 0x364
 8001616:	f507 7256 	add.w	r2, r7, #856	; 0x358
 800161a:	ca07      	ldmia	r2, {r0, r1, r2}
 800161c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    return FusionVectorMultiplyScalar(vector, magnitudeReciprocal);
 8001620:	bf00      	nop
 8001622:	f507 7337 	add.w	r3, r7, #732	; 0x2dc
 8001626:	461c      	mov	r4, r3
 8001628:	f507 7359 	add.w	r3, r7, #868	; 0x364
 800162c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001630:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001634:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001638:	f507 7237 	add.w	r2, r7, #732	; 0x2dc
 800163c:	ca07      	ldmia	r2, {r0, r1, r2}
 800163e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001642:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001646:	f507 729e 	add.w	r2, r7, #316	; 0x13c
 800164a:	ca07      	ldmia	r2, {r0, r1, r2}
 800164c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    result.axis.x = A.y * B.z - A.z * B.y;
 8001650:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001654:	ed93 7a01 	vldr	s14, [r3, #4]
 8001658:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800165c:	edd3 7a02 	vldr	s15, [r3, #8]
 8001660:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001664:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001668:	edd3 6a02 	vldr	s13, [r3, #8]
 800166c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001670:	edd3 7a01 	vldr	s15, [r3, #4]
 8001674:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001678:	ee77 7a67 	vsub.f32	s15, s14, s15
 800167c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001680:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = A.z * B.x - A.x * B.z;
 8001684:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001688:	ed93 7a02 	vldr	s14, [r3, #8]
 800168c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001690:	edd3 7a00 	vldr	s15, [r3]
 8001694:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001698:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800169c:	edd3 6a00 	vldr	s13, [r3]
 80016a0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80016a4:	edd3 7a02 	vldr	s15, [r3, #8]
 80016a8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016b0:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80016b4:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = A.x * B.y - A.y * B.x;
 80016b8:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80016bc:	ed93 7a00 	vldr	s14, [r3]
 80016c0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80016c4:	edd3 7a01 	vldr	s15, [r3, #4]
 80016c8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80016cc:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80016d0:	edd3 6a01 	vldr	s13, [r3, #4]
 80016d4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80016d8:	edd3 7a00 	vldr	s15, [r3]
 80016dc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016e4:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80016e8:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 80016ec:	f107 02bc 	add.w	r2, r7, #188	; 0xbc
 80016f0:	f507 7353 	add.w	r3, r7, #844	; 0x34c
 80016f4:	ca07      	ldmia	r2, {r0, r1, r2}
 80016f6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80016fa:	f507 733a 	add.w	r3, r7, #744	; 0x2e8
 80016fe:	461c      	mov	r4, r3
 8001700:	f507 7353 	add.w	r3, r7, #844	; 0x34c
 8001704:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001708:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800170c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001710:	f507 722e 	add.w	r2, r7, #696	; 0x2b8
 8001714:	ca07      	ldmia	r2, {r0, r1, r2}
 8001716:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800171a:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800171e:	f507 723a 	add.w	r2, r7, #744	; 0x2e8
 8001722:	ca07      	ldmia	r2, {r0, r1, r2}
 8001724:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    result.axis.x = vectorA.axis.x + vectorB.axis.x;
 8001728:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800172c:	ed93 7a00 	vldr	s14, [r3]
 8001730:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001734:	edd3 7a00 	vldr	s15, [r3]
 8001738:	ee77 7a27 	vadd.f32	s15, s14, s15
 800173c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001740:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = vectorA.axis.y + vectorB.axis.y;
 8001744:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001748:	ed93 7a01 	vldr	s14, [r3, #4]
 800174c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001750:	edd3 7a01 	vldr	s15, [r3, #4]
 8001754:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001758:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800175c:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = vectorA.axis.z + vectorB.axis.z;
 8001760:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001764:	ed93 7a02 	vldr	s14, [r3, #8]
 8001768:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800176c:	edd3 7a02 	vldr	s15, [r3, #8]
 8001770:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001774:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001778:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 800177c:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8001780:	f507 7350 	add.w	r3, r7, #832	; 0x340
 8001784:	ca07      	ldmia	r2, {r0, r1, r2}
 8001786:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800178a:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 800178e:	461c      	mov	r4, r3
 8001790:	f507 7350 	add.w	r3, r7, #832	; 0x340
 8001794:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001798:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800179c:	e005      	b.n	80017aa <FusionAhrsUpdate+0x922>
 800179e:	bf00      	nop
 80017a0:	5f3759df 	.word	0x5f3759df
 80017a4:	3c8efa35 	.word	0x3c8efa35
            break;
 80017a8:	bf00      	nop
        halfFeedbackError = FusionVectorAdd(halfFeedbackError, FusionVectorCrossProduct(FusionVectorFastNormalise(FusionVectorCrossProduct(accelerometer, magnetometer)), halfWest));

    } while (false);

    // Ramp down gain until initialisation complete
    if (fusionAhrs->gain == 0) {
 80017aa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	edd3 7a00 	vldr	s15, [r3]
 80017b4:	eef5 7a40 	vcmp.f32	s15, #0.0
 80017b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017bc:	d105      	bne.n	80017ca <FusionAhrsUpdate+0x942>
        fusionAhrs->rampedGain = 0; // skip initialisation if gain is zero
 80017be:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f04f 0200 	mov.w	r2, #0
 80017c8:	629a      	str	r2, [r3, #40]	; 0x28
    }
    float feedbackGain = fusionAhrs->gain;
 80017ca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f207 4224 	addw	r2, r7, #1060	; 0x424
 80017d6:	6013      	str	r3, [r2, #0]
    if (fusionAhrs->rampedGain > fusionAhrs->gain) {
 80017d8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 80017e2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	edd3 7a00 	vldr	s15, [r3]
 80017ec:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80017f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017f4:	dd24      	ble.n	8001840 <FusionAhrsUpdate+0x9b8>
        fusionAhrs->rampedGain -= (INITIAL_GAIN - fusionAhrs->gain) * samplePeriod / INITIALISATION_PERIOD;
 80017f6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8001800:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	edd3 7a00 	vldr	s15, [r3]
 800180a:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800180e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001812:	1d3b      	adds	r3, r7, #4
 8001814:	edd3 7a00 	vldr	s15, [r3]
 8001818:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800181c:	eeb0 6a08 	vmov.f32	s12, #8	; 0x40400000  3.0
 8001820:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001824:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001828:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
        feedbackGain = fusionAhrs->rampedGain;
 8001832:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800183a:	f207 4224 	addw	r2, r7, #1060	; 0x424
 800183e:	6013      	str	r3, [r2, #0]
    return degrees * ((float) M_PI / 180.0f);
 8001840:	ed1f 7a28 	vldr	s14, [pc, #-160]	; 80017a4 <FusionAhrsUpdate+0x91c>
    }

    // Convert gyroscope to radians per second scaled by 0.5
    FusionVector3 halfGyroscope = FusionVectorMultiplyScalar(gyroscope, 0.5f * FusionDegreesToRadians(1.0f));
 8001844:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8001848:	ee67 7a27 	vmul.f32	s15, s14, s15
 800184c:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8001850:	f107 0220 	add.w	r2, r7, #32
 8001854:	ca07      	ldmia	r2, {r0, r1, r2}
 8001856:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800185a:	edc7 7afa 	vstr	s15, [r7, #1000]	; 0x3e8
    result.axis.x = vector.axis.x * scalar;
 800185e:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8001862:	ed93 7a00 	vldr	s14, [r3]
 8001866:	edd7 7afa 	vldr	s15, [r7, #1000]	; 0x3e8
 800186a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800186e:	f507 731f 	add.w	r3, r7, #636	; 0x27c
 8001872:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = vector.axis.y * scalar;
 8001876:	f507 7322 	add.w	r3, r7, #648	; 0x288
 800187a:	ed93 7a01 	vldr	s14, [r3, #4]
 800187e:	edd7 7afa 	vldr	s15, [r7, #1000]	; 0x3e8
 8001882:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001886:	f507 731f 	add.w	r3, r7, #636	; 0x27c
 800188a:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = vector.axis.z * scalar;
 800188e:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8001892:	ed93 7a02 	vldr	s14, [r3, #8]
 8001896:	edd7 7afa 	vldr	s15, [r7, #1000]	; 0x3e8
 800189a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800189e:	f507 731f 	add.w	r3, r7, #636	; 0x27c
 80018a2:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 80018a6:	f507 721f 	add.w	r2, r7, #636	; 0x27c
 80018aa:	f507 7377 	add.w	r3, r7, #988	; 0x3dc
 80018ae:	ca07      	ldmia	r2, {r0, r1, r2}
 80018b0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80018b4:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 80018b8:	461c      	mov	r4, r3
 80018ba:	f507 7377 	add.w	r3, r7, #988	; 0x3dc
 80018be:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80018c2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80018c6:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80018ca:	f507 722e 	add.w	r2, r7, #696	; 0x2b8
 80018ce:	ca07      	ldmia	r2, {r0, r1, r2}
 80018d0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80018d4:	f207 4324 	addw	r3, r7, #1060	; 0x424
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f8c7 33ec 	str.w	r3, [r7, #1004]	; 0x3ec
    result.axis.x = vector.axis.x * scalar;
 80018de:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80018e2:	ed93 7a00 	vldr	s14, [r3]
 80018e6:	edd7 7afb 	vldr	s15, [r7, #1004]	; 0x3ec
 80018ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018ee:	f507 7319 	add.w	r3, r7, #612	; 0x264
 80018f2:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = vector.axis.y * scalar;
 80018f6:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80018fa:	ed93 7a01 	vldr	s14, [r3, #4]
 80018fe:	edd7 7afb 	vldr	s15, [r7, #1004]	; 0x3ec
 8001902:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001906:	f507 7319 	add.w	r3, r7, #612	; 0x264
 800190a:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = vector.axis.z * scalar;
 800190e:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8001912:	ed93 7a02 	vldr	s14, [r3, #8]
 8001916:	edd7 7afb 	vldr	s15, [r7, #1004]	; 0x3ec
 800191a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800191e:	f507 7319 	add.w	r3, r7, #612	; 0x264
 8001922:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 8001926:	f507 7219 	add.w	r2, r7, #612	; 0x264
 800192a:	f507 7374 	add.w	r3, r7, #976	; 0x3d0
 800192e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001930:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001934:	f507 733d 	add.w	r3, r7, #756	; 0x2f4
 8001938:	461c      	mov	r4, r3
 800193a:	f507 7374 	add.w	r3, r7, #976	; 0x3d0
 800193e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001942:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001946:	f507 7313 	add.w	r3, r7, #588	; 0x24c
 800194a:	f507 7228 	add.w	r2, r7, #672	; 0x2a0
 800194e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001950:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001954:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8001958:	f507 723d 	add.w	r2, r7, #756	; 0x2f4
 800195c:	ca07      	ldmia	r2, {r0, r1, r2}
 800195e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    result.axis.x = vectorA.axis.x + vectorB.axis.x;
 8001962:	f507 7313 	add.w	r3, r7, #588	; 0x24c
 8001966:	ed93 7a00 	vldr	s14, [r3]
 800196a:	f507 7316 	add.w	r3, r7, #600	; 0x258
 800196e:	edd3 7a00 	vldr	s15, [r3]
 8001972:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001976:	f507 7310 	add.w	r3, r7, #576	; 0x240
 800197a:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = vectorA.axis.y + vectorB.axis.y;
 800197e:	f507 7313 	add.w	r3, r7, #588	; 0x24c
 8001982:	ed93 7a01 	vldr	s14, [r3, #4]
 8001986:	f507 7316 	add.w	r3, r7, #600	; 0x258
 800198a:	edd3 7a01 	vldr	s15, [r3, #4]
 800198e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001992:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8001996:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = vectorA.axis.z + vectorB.axis.z;
 800199a:	f507 7313 	add.w	r3, r7, #588	; 0x24c
 800199e:	ed93 7a02 	vldr	s14, [r3, #8]
 80019a2:	f507 7316 	add.w	r3, r7, #600	; 0x258
 80019a6:	edd3 7a02 	vldr	s15, [r3, #8]
 80019aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019ae:	f507 7310 	add.w	r3, r7, #576	; 0x240
 80019b2:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 80019b6:	f507 7210 	add.w	r2, r7, #576	; 0x240
 80019ba:	f507 7371 	add.w	r3, r7, #964	; 0x3c4
 80019be:	ca07      	ldmia	r2, {r0, r1, r2}
 80019c0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80019c4:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 80019c8:	461c      	mov	r4, r3
 80019ca:	f507 7371 	add.w	r3, r7, #964	; 0x3c4
 80019ce:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80019d2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80019d6:	f507 730d 	add.w	r3, r7, #564	; 0x234
 80019da:	f507 7228 	add.w	r2, r7, #672	; 0x2a0
 80019de:	ca07      	ldmia	r2, {r0, r1, r2}
 80019e0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80019e4:	1d3b      	adds	r3, r7, #4
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f8c7 33f0 	str.w	r3, [r7, #1008]	; 0x3f0
    result.axis.x = vector.axis.x * scalar;
 80019ec:	f507 730d 	add.w	r3, r7, #564	; 0x234
 80019f0:	ed93 7a00 	vldr	s14, [r3]
 80019f4:	edd7 7afc 	vldr	s15, [r7, #1008]	; 0x3f0
 80019f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019fc:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8001a00:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = vector.axis.y * scalar;
 8001a04:	f507 730d 	add.w	r3, r7, #564	; 0x234
 8001a08:	ed93 7a01 	vldr	s14, [r3, #4]
 8001a0c:	edd7 7afc 	vldr	s15, [r7, #1008]	; 0x3f0
 8001a10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a14:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8001a18:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = vector.axis.z * scalar;
 8001a1c:	f507 730d 	add.w	r3, r7, #564	; 0x234
 8001a20:	ed93 7a02 	vldr	s14, [r3, #8]
 8001a24:	edd7 7afc 	vldr	s15, [r7, #1008]	; 0x3f0
 8001a28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a2c:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8001a30:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 8001a34:	f507 720a 	add.w	r2, r7, #552	; 0x228
 8001a38:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8001a3c:	ca07      	ldmia	r2, {r0, r1, r2}
 8001a3e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001a42:	f507 7340 	add.w	r3, r7, #768	; 0x300
 8001a46:	461c      	mov	r4, r3
 8001a48:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8001a4c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001a50:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001a54:	f507 7203 	add.w	r2, r7, #524	; 0x20c
 8001a58:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	4614      	mov	r4, r2
 8001a60:	330c      	adds	r3, #12
 8001a62:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001a64:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001a68:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8001a6c:	f507 7240 	add.w	r2, r7, #768	; 0x300
 8001a70:	ca07      	ldmia	r2, {r0, r1, r2}
 8001a72:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 */
static inline __attribute__((always_inline)) FusionQuaternion FusionQuaternionMultiplyVector(const FusionQuaternion quaternion, const FusionVector3 vector) {
#define Q quaternion.element // define shorthand labels for more readable code
#define V vector.axis
    FusionQuaternion result;
    result.element.w = -Q.x * V.x - Q.y * V.y - Q.z * V.z;
 8001a76:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 8001a7a:	edd3 7a01 	vldr	s15, [r3, #4]
 8001a7e:	eeb1 7a67 	vneg.f32	s14, s15
 8001a82:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8001a86:	edd3 7a00 	vldr	s15, [r3]
 8001a8a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a8e:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 8001a92:	edd3 6a02 	vldr	s13, [r3, #8]
 8001a96:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8001a9a:	edd3 7a01 	vldr	s15, [r3, #4]
 8001a9e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001aa2:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001aa6:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 8001aaa:	edd3 6a03 	vldr	s13, [r3, #12]
 8001aae:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8001ab2:	edd3 7a02 	vldr	s15, [r3, #8]
 8001ab6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001aba:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001abe:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
 8001ac2:	edc3 7a00 	vstr	s15, [r3]
    result.element.x = Q.w * V.x + Q.y * V.z - Q.z * V.y;
 8001ac6:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 8001aca:	ed93 7a00 	vldr	s14, [r3]
 8001ace:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8001ad2:	edd3 7a00 	vldr	s15, [r3]
 8001ad6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ada:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 8001ade:	edd3 6a02 	vldr	s13, [r3, #8]
 8001ae2:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8001ae6:	edd3 7a02 	vldr	s15, [r3, #8]
 8001aea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001aee:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001af2:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 8001af6:	edd3 6a03 	vldr	s13, [r3, #12]
 8001afa:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8001afe:	edd3 7a01 	vldr	s15, [r3, #4]
 8001b02:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b06:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b0a:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
 8001b0e:	edc3 7a01 	vstr	s15, [r3, #4]
    result.element.y = Q.w * V.y - Q.x * V.z + Q.z * V.x;
 8001b12:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 8001b16:	ed93 7a00 	vldr	s14, [r3]
 8001b1a:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8001b1e:	edd3 7a01 	vldr	s15, [r3, #4]
 8001b22:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b26:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 8001b2a:	edd3 6a01 	vldr	s13, [r3, #4]
 8001b2e:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8001b32:	edd3 7a02 	vldr	s15, [r3, #8]
 8001b36:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b3a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001b3e:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 8001b42:	edd3 6a03 	vldr	s13, [r3, #12]
 8001b46:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8001b4a:	edd3 7a00 	vldr	s15, [r3]
 8001b4e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b52:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b56:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
 8001b5a:	edc3 7a02 	vstr	s15, [r3, #8]
    result.element.z = Q.w * V.z + Q.x * V.y - Q.y * V.x;
 8001b5e:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 8001b62:	ed93 7a00 	vldr	s14, [r3]
 8001b66:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8001b6a:	edd3 7a02 	vldr	s15, [r3, #8]
 8001b6e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b72:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 8001b76:	edd3 6a01 	vldr	s13, [r3, #4]
 8001b7a:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8001b7e:	edd3 7a01 	vldr	s15, [r3, #4]
 8001b82:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b86:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001b8a:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 8001b8e:	edd3 6a02 	vldr	s13, [r3, #8]
 8001b92:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8001b96:	edd3 7a00 	vldr	s15, [r3]
 8001b9a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b9e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ba2:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
 8001ba6:	edc3 7a03 	vstr	s15, [r3, #12]
    return result;
 8001baa:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
 8001bae:	f507 746a 	add.w	r4, r7, #936	; 0x3a8
 8001bb2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001bb4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001bb8:	f507 7343 	add.w	r3, r7, #780	; 0x30c
 8001bbc:	461c      	mov	r4, r3
 8001bbe:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 8001bc2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001bc4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001bc8:	f507 72ee 	add.w	r2, r7, #476	; 0x1dc
 8001bcc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4614      	mov	r4, r2
 8001bd4:	330c      	adds	r3, #12
 8001bd6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001bd8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001bdc:	f507 72f6 	add.w	r2, r7, #492	; 0x1ec
 8001be0:	f507 7343 	add.w	r3, r7, #780	; 0x30c
 8001be4:	4614      	mov	r4, r2
 8001be6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001be8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    result.element.w = quaternionA.element.w + quaternionB.element.w;
 8001bec:	f507 73ee 	add.w	r3, r7, #476	; 0x1dc
 8001bf0:	ed93 7a00 	vldr	s14, [r3]
 8001bf4:	f507 73f6 	add.w	r3, r7, #492	; 0x1ec
 8001bf8:	edd3 7a00 	vldr	s15, [r3]
 8001bfc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c00:	f507 73de 	add.w	r3, r7, #444	; 0x1bc
 8001c04:	edc3 7a00 	vstr	s15, [r3]
    result.element.x = quaternionA.element.x + quaternionB.element.x;
 8001c08:	f507 73ee 	add.w	r3, r7, #476	; 0x1dc
 8001c0c:	ed93 7a01 	vldr	s14, [r3, #4]
 8001c10:	f507 73f6 	add.w	r3, r7, #492	; 0x1ec
 8001c14:	edd3 7a01 	vldr	s15, [r3, #4]
 8001c18:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c1c:	f507 73de 	add.w	r3, r7, #444	; 0x1bc
 8001c20:	edc3 7a01 	vstr	s15, [r3, #4]
    result.element.y = quaternionA.element.y + quaternionB.element.y;
 8001c24:	f507 73ee 	add.w	r3, r7, #476	; 0x1dc
 8001c28:	ed93 7a02 	vldr	s14, [r3, #8]
 8001c2c:	f507 73f6 	add.w	r3, r7, #492	; 0x1ec
 8001c30:	edd3 7a02 	vldr	s15, [r3, #8]
 8001c34:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c38:	f507 73de 	add.w	r3, r7, #444	; 0x1bc
 8001c3c:	edc3 7a02 	vstr	s15, [r3, #8]
    result.element.z = quaternionA.element.z + quaternionB.element.z;
 8001c40:	f507 73ee 	add.w	r3, r7, #476	; 0x1dc
 8001c44:	ed93 7a03 	vldr	s14, [r3, #12]
 8001c48:	f507 73f6 	add.w	r3, r7, #492	; 0x1ec
 8001c4c:	edd3 7a03 	vldr	s15, [r3, #12]
 8001c50:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c54:	f507 73de 	add.w	r3, r7, #444	; 0x1bc
 8001c58:	edc3 7a03 	vstr	s15, [r3, #12]
    return result;
 8001c5c:	f507 73de 	add.w	r3, r7, #444	; 0x1bc
 8001c60:	f507 7466 	add.w	r4, r7, #920	; 0x398
 8001c64:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001c66:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001c6a:	f507 73e6 	add.w	r3, r7, #460	; 0x1cc
 8001c6e:	461c      	mov	r4, r3
 8001c70:	f507 7366 	add.w	r3, r7, #920	; 0x398
 8001c74:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001c76:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    // Apply feedback to gyroscope
    halfGyroscope = FusionVectorAdd(halfGyroscope, FusionVectorMultiplyScalar(halfFeedbackError, feedbackGain));

    // Integrate rate of change of quaternion
    fusionAhrs->quaternion = FusionQuaternionAdd(fusionAhrs->quaternion, FusionQuaternionMultiplyVector(fusionAhrs->quaternion, FusionVectorMultiplyScalar(halfGyroscope, samplePeriod)));
 8001c7a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f507 72e6 	add.w	r2, r7, #460	; 0x1cc
 8001c84:	f103 040c 	add.w	r4, r3, #12
 8001c88:	4613      	mov	r3, r2
 8001c8a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001c8c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001c90:	f507 72d6 	add.w	r2, r7, #428	; 0x1ac
 8001c94:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4614      	mov	r4, r2
 8001c9c:	330c      	adds	r3, #12
 8001c9e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001ca0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 * @param quaternion Quaternion to be normalised.
 * @return Normalised quaternion.
 */
static inline __attribute__((always_inline)) FusionQuaternion FusionQuaternionFastNormalise(const FusionQuaternion quaternion) {
#define Q quaternion.element // define shorthand label for more readable code
    const float magnitudeReciprocal = FusionFastInverseSqrt(Q.w * Q.w + Q.x * Q.x + Q.y * Q.y + Q.z * Q.z);
 8001ca4:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 8001ca8:	ed93 7a00 	vldr	s14, [r3]
 8001cac:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 8001cb0:	edd3 7a00 	vldr	s15, [r3]
 8001cb4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001cb8:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 8001cbc:	edd3 6a01 	vldr	s13, [r3, #4]
 8001cc0:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 8001cc4:	edd3 7a01 	vldr	s15, [r3, #4]
 8001cc8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ccc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001cd0:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 8001cd4:	edd3 6a02 	vldr	s13, [r3, #8]
 8001cd8:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 8001cdc:	edd3 7a02 	vldr	s15, [r3, #8]
 8001ce0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ce4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001ce8:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 8001cec:	edd3 6a03 	vldr	s13, [r3, #12]
 8001cf0:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 8001cf4:	edd3 7a03 	vldr	s15, [r3, #12]
 8001cf8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001cfc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d00:	edc7 7aff 	vstr	s15, [r7, #1020]	; 0x3fc
    float halfx = 0.5f * x;
 8001d04:	edd7 7aff 	vldr	s15, [r7, #1020]	; 0x3fc
 8001d08:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001d0c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d10:	edc7 7afe 	vstr	s15, [r7, #1016]	; 0x3f8
    float y = x;
 8001d14:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8001d18:	f8d7 23fc 	ldr.w	r2, [r7, #1020]	; 0x3fc
 8001d1c:	601a      	str	r2, [r3, #0]
    int32_t i = *(int32_t*) & y;
 8001d1e:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8001d22:	681a      	ldr	r2, [r3, #0]
 8001d24:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 8001d28:	601a      	str	r2, [r3, #0]
    i = 0x5f3759df - (i >> 1);
 8001d2a:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	105a      	asrs	r2, r3, #1
 8001d32:	4b98      	ldr	r3, [pc, #608]	; (8001f94 <FusionAhrsUpdate+0x110c>)
 8001d34:	1a9b      	subs	r3, r3, r2
 8001d36:	f507 72c2 	add.w	r2, r7, #388	; 0x184
 8001d3a:	6013      	str	r3, [r2, #0]
    y = *(float*) &i;
 8001d3c:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 8001d40:	681a      	ldr	r2, [r3, #0]
 8001d42:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8001d46:	601a      	str	r2, [r3, #0]
    y = y * (1.5f - (halfx * y * y));
 8001d48:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8001d4c:	ed93 7a00 	vldr	s14, [r3]
 8001d50:	edd7 7afe 	vldr	s15, [r7, #1016]	; 0x3f8
 8001d54:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d58:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8001d5c:	edd3 7a00 	vldr	s15, [r3]
 8001d60:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d64:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8001d68:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001d6c:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8001d70:	edd3 7a00 	vldr	s15, [r3]
 8001d74:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d78:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8001d7c:	edc3 7a00 	vstr	s15, [r3]
    return y;
 8001d80:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8001d84:	681b      	ldr	r3, [r3, #0]
    const float magnitudeReciprocal = FusionFastInverseSqrt(Q.w * Q.w + Q.x * Q.x + Q.y * Q.y + Q.z * Q.z);
 8001d86:	f8c7 33f4 	str.w	r3, [r7, #1012]	; 0x3f4
    FusionQuaternion normalisedQuaternion;
    normalisedQuaternion.element.w = Q.w * magnitudeReciprocal;
 8001d8a:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 8001d8e:	ed93 7a00 	vldr	s14, [r3]
 8001d92:	edd7 7afd 	vldr	s15, [r7, #1012]	; 0x3f4
 8001d96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d9a:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 8001d9e:	edc3 7a00 	vstr	s15, [r3]
    normalisedQuaternion.element.x = Q.x * magnitudeReciprocal;
 8001da2:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 8001da6:	ed93 7a01 	vldr	s14, [r3, #4]
 8001daa:	edd7 7afd 	vldr	s15, [r7, #1012]	; 0x3f4
 8001dae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001db2:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 8001db6:	edc3 7a01 	vstr	s15, [r3, #4]
    normalisedQuaternion.element.y = Q.y * magnitudeReciprocal;
 8001dba:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 8001dbe:	ed93 7a02 	vldr	s14, [r3, #8]
 8001dc2:	edd7 7afd 	vldr	s15, [r7, #1012]	; 0x3f4
 8001dc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001dca:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 8001dce:	edc3 7a02 	vstr	s15, [r3, #8]
    normalisedQuaternion.element.z = Q.z * magnitudeReciprocal;
 8001dd2:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 8001dd6:	ed93 7a03 	vldr	s14, [r3, #12]
 8001dda:	edd7 7afd 	vldr	s15, [r7, #1012]	; 0x3f4
 8001dde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001de2:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 8001de6:	edc3 7a03 	vstr	s15, [r3, #12]
    return normalisedQuaternion;
 8001dea:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 8001dee:	f507 7462 	add.w	r4, r7, #904	; 0x388
 8001df2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001df4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001df8:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 8001dfc:	461c      	mov	r4, r3
 8001dfe:	f507 7362 	add.w	r3, r7, #904	; 0x388
 8001e02:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001e04:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    // Normalise quaternion
    fusionAhrs->quaternion = FusionQuaternionFastNormalise(fusionAhrs->quaternion);
 8001e08:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f507 72ce 	add.w	r2, r7, #412	; 0x19c
 8001e12:	f103 040c 	add.w	r4, r3, #12
 8001e16:	4613      	mov	r3, r2
 8001e18:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001e1a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    // Calculate linear acceleration
    const FusionVector3 gravity = {
        .axis.x = 2.0f * (Q.x * Q.z - Q.w * Q.y),
 8001e1e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	ed93 7a04 	vldr	s14, [r3, #16]
 8001e28:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	edd3 7a06 	vldr	s15, [r3, #24]
 8001e32:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e36:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	edd3 6a03 	vldr	s13, [r3, #12]
 8001e40:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	edd3 7a05 	vldr	s15, [r3, #20]
 8001e4a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e4e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e52:	ee77 7aa7 	vadd.f32	s15, s15, s15
    const FusionVector3 gravity = {
 8001e56:	f507 7325 	add.w	r3, r7, #660	; 0x294
 8001e5a:	edc3 7a00 	vstr	s15, [r3]
        .axis.y = 2.0f * (Q.w * Q.x + Q.y * Q.z),
 8001e5e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	ed93 7a03 	vldr	s14, [r3, #12]
 8001e68:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	edd3 7a04 	vldr	s15, [r3, #16]
 8001e72:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e76:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	edd3 6a05 	vldr	s13, [r3, #20]
 8001e80:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	edd3 7a06 	vldr	s15, [r3, #24]
 8001e8a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e8e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e92:	ee77 7aa7 	vadd.f32	s15, s15, s15
    const FusionVector3 gravity = {
 8001e96:	f507 7325 	add.w	r3, r7, #660	; 0x294
 8001e9a:	edc3 7a01 	vstr	s15, [r3, #4]
        .axis.z = 2.0f * (Q.w * Q.w - 0.5f + Q.z * Q.z),
 8001e9e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	ed93 7a03 	vldr	s14, [r3, #12]
 8001ea8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	edd3 7a03 	vldr	s15, [r3, #12]
 8001eb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001eb6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001eba:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001ebe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	edd3 6a06 	vldr	s13, [r3, #24]
 8001ec8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	edd3 7a06 	vldr	s15, [r3, #24]
 8001ed2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ed6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001eda:	ee77 7aa7 	vadd.f32	s15, s15, s15
    const FusionVector3 gravity = {
 8001ede:	f507 7325 	add.w	r3, r7, #660	; 0x294
 8001ee2:	edc3 7a02 	vstr	s15, [r3, #8]
 8001ee6:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 8001eea:	f107 0214 	add.w	r2, r7, #20
 8001eee:	ca07      	ldmia	r2, {r0, r1, r2}
 8001ef0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001ef4:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8001ef8:	f507 7225 	add.w	r2, r7, #660	; 0x294
 8001efc:	ca07      	ldmia	r2, {r0, r1, r2}
 8001efe:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    result.axis.x = vectorA.axis.x - vectorB.axis.x;
 8001f02:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 8001f06:	ed93 7a00 	vldr	s14, [r3]
 8001f0a:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8001f0e:	edd3 7a00 	vldr	s15, [r3]
 8001f12:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f16:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8001f1a:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = vectorA.axis.y - vectorB.axis.y;
 8001f1e:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 8001f22:	ed93 7a01 	vldr	s14, [r3, #4]
 8001f26:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8001f2a:	edd3 7a01 	vldr	s15, [r3, #4]
 8001f2e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f32:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8001f36:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = vectorA.axis.z - vectorB.axis.z;
 8001f3a:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 8001f3e:	ed93 7a02 	vldr	s14, [r3, #8]
 8001f42:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8001f46:	edd3 7a02 	vldr	s15, [r3, #8]
 8001f4a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f4e:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8001f52:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 8001f56:	f507 72aa 	add.w	r2, r7, #340	; 0x154
 8001f5a:	f507 735f 	add.w	r3, r7, #892	; 0x37c
 8001f5e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001f60:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001f64:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8001f68:	461c      	mov	r4, r3
 8001f6a:	f507 735f 	add.w	r3, r7, #892	; 0x37c
 8001f6e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001f72:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    }; // equal to 3rd column of rotation matrix representation
    fusionAhrs->linearAcceleration = FusionVectorSubtract(accelerometer, gravity);
 8001f76:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 8001f80:	331c      	adds	r3, #28
 8001f82:	ca07      	ldmia	r2, {r0, r1, r2}
 8001f84:	e883 0007 	stmia.w	r3, {r0, r1, r2}

#undef Q // undefine shorthand label
}
 8001f88:	bf00      	nop
 8001f8a:	f507 6785 	add.w	r7, r7, #1064	; 0x428
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bc90      	pop	{r4, r7}
 8001f92:	4770      	bx	lr
 8001f94:	5f3759df 	.word	0x5f3759df

08001f98 <FusionAhrsGetQuaternion>:
/**
 * @brief Gets the quaternion describing the sensor relative to the Earth.
 * @param fusionAhrs AHRS algorithm structure.
 * @return Quaternion describing the sensor relative to the Earth.
 */
FusionQuaternion FusionAhrsGetQuaternion(const FusionAhrs * const fusionAhrs) {
 8001f98:	b490      	push	{r4, r7}
 8001f9a:	b096      	sub	sp, #88	; 0x58
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6178      	str	r0, [r7, #20]
 8001fa0:	697b      	ldr	r3, [r7, #20]
 8001fa2:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8001fa6:	330c      	adds	r3, #12
 8001fa8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001faa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conjugate.element.w = quaternion.element.w;
 8001fae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fb0:	61bb      	str	r3, [r7, #24]
    conjugate.element.x = -1.0f * quaternion.element.x;
 8001fb2:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001fb6:	eef1 7a67 	vneg.f32	s15, s15
 8001fba:	edc7 7a07 	vstr	s15, [r7, #28]
    conjugate.element.y = -1.0f * quaternion.element.y;
 8001fbe:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001fc2:	eef1 7a67 	vneg.f32	s15, s15
 8001fc6:	edc7 7a08 	vstr	s15, [r7, #32]
    conjugate.element.z = -1.0f * quaternion.element.z;
 8001fca:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001fce:	eef1 7a67 	vneg.f32	s15, s15
 8001fd2:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    return conjugate;
 8001fd6:	f107 0448 	add.w	r4, r7, #72	; 0x48
 8001fda:	f107 0318 	add.w	r3, r7, #24
 8001fde:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001fe0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001fe4:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8001fe8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001fec:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001fee:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    return FusionQuaternionConjugate(fusionAhrs->quaternion);
 8001ff2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8001ff4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001ff6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001ff8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ffa:	ee06 0a10 	vmov	s12, r0
 8001ffe:	ee06 1a90 	vmov	s13, r1
 8002002:	ee07 2a10 	vmov	s14, r2
 8002006:	ee07 3a90 	vmov	s15, r3
}
 800200a:	eeb0 0a46 	vmov.f32	s0, s12
 800200e:	eef0 0a66 	vmov.f32	s1, s13
 8002012:	eeb0 1a47 	vmov.f32	s2, s14
 8002016:	eef0 1a67 	vmov.f32	s3, s15
 800201a:	3758      	adds	r7, #88	; 0x58
 800201c:	46bd      	mov	sp, r7
 800201e:	bc90      	pop	{r4, r7}
 8002020:	4770      	bx	lr
 8002022:	0000      	movs	r0, r0
 8002024:	0000      	movs	r0, r0
	...

08002028 <FusionBiasInitialise>:
 * @param threshold Gyroscope threshold (in degrees per second) below which the
 * gyroscope is detected stationary.
 * @param samplePeriod Nominal sample period (in seconds) corresponding the rate
 * at which the application will update the algorithm.
 */
void FusionBiasInitialise(FusionBias * const fusionBias, const float threshold, const float samplePeriod) {
 8002028:	b580      	push	{r7, lr}
 800202a:	b088      	sub	sp, #32
 800202c:	af00      	add	r7, sp, #0
 800202e:	60f8      	str	r0, [r7, #12]
 8002030:	ed87 0a02 	vstr	s0, [r7, #8]
 8002034:	edc7 0a01 	vstr	s1, [r7, #4]
    fusionBias->threshold = threshold;
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	68ba      	ldr	r2, [r7, #8]
 800203c:	601a      	str	r2, [r3, #0]
    fusionBias->samplePeriod = samplePeriod;
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	687a      	ldr	r2, [r7, #4]
 8002042:	605a      	str	r2, [r3, #4]
    fusionBias->filterCoefficient = (2.0f * M_PI * CORNER_FREQUENCY) * fusionBias->samplePeriod;
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	4618      	mov	r0, r3
 800204a:	f7fe fa21 	bl	8000490 <__aeabi_f2d>
 800204e:	a312      	add	r3, pc, #72	; (adr r3, 8002098 <FusionBiasInitialise+0x70>)
 8002050:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002054:	f7fe fa74 	bl	8000540 <__aeabi_dmul>
 8002058:	4602      	mov	r2, r0
 800205a:	460b      	mov	r3, r1
 800205c:	4610      	mov	r0, r2
 800205e:	4619      	mov	r1, r3
 8002060:	f7fe fd08 	bl	8000a74 <__aeabi_d2f>
 8002064:	4602      	mov	r2, r0
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	609a      	str	r2, [r3, #8]
    fusionBias->stationaryTimer = 0.0f;
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	f04f 0200 	mov.w	r2, #0
 8002070:	60da      	str	r2, [r3, #12]
    fusionBias->gyroscopeBias = FUSION_VECTOR3_ZERO;
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	f04f 0200 	mov.w	r2, #0
 8002078:	611a      	str	r2, [r3, #16]
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	f04f 0200 	mov.w	r2, #0
 8002080:	615a      	str	r2, [r3, #20]
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	f04f 0200 	mov.w	r2, #0
 8002088:	619a      	str	r2, [r3, #24]
}
 800208a:	bf00      	nop
 800208c:	3720      	adds	r7, #32
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}
 8002092:	bf00      	nop
 8002094:	f3af 8000 	nop.w
 8002098:	8c0eff43 	.word	0x8c0eff43
 800209c:	3fc015bf 	.word	0x3fc015bf

080020a0 <FusionBiasUpdate>:
 * corrected gyroscope measurement.
 * @param fusionBias FusionBias structure.
 * @param gyroscope Gyroscope measurement in degrees per second.
 * @return Corrected gyroscope measurement in degrees per second.
 */
FusionVector3 FusionBiasUpdate(FusionBias * const fusionBias, FusionVector3 gyroscope) {
 80020a0:	b490      	push	{r4, r7}
 80020a2:	b0b4      	sub	sp, #208	; 0xd0
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	61f8      	str	r0, [r7, #28]
 80020a8:	eef0 6a40 	vmov.f32	s13, s0
 80020ac:	eeb0 7a60 	vmov.f32	s14, s1
 80020b0:	eef0 7a41 	vmov.f32	s15, s2
 80020b4:	edc7 6a04 	vstr	s13, [r7, #16]
 80020b8:	ed87 7a05 	vstr	s14, [r7, #20]
 80020bc:	edc7 7a06 	vstr	s15, [r7, #24]
 80020c0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80020c4:	f107 0210 	add.w	r2, r7, #16
 80020c8:	ca07      	ldmia	r2, {r0, r1, r2}
 80020ca:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80020ce:	69fa      	ldr	r2, [r7, #28]
 80020d0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80020d4:	3210      	adds	r2, #16
 80020d6:	ca07      	ldmia	r2, {r0, r1, r2}
 80020d8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    result.axis.x = vectorA.axis.x - vectorB.axis.x;
 80020dc:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 80020e0:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80020e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80020e8:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    result.axis.y = vectorA.axis.y - vectorB.axis.y;
 80020ec:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80020f0:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80020f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80020f8:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    result.axis.z = vectorA.axis.z - vectorB.axis.z;
 80020fc:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8002100:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002104:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002108:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    return result;
 800210c:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8002110:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8002114:	ca07      	ldmia	r2, {r0, r1, r2}
 8002116:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800211a:	f107 0310 	add.w	r3, r7, #16
 800211e:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002122:	ca07      	ldmia	r2, {r0, r1, r2}
 8002124:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    // Subtract bias from gyroscope measurement
    gyroscope = FusionVectorSubtract(gyroscope, fusionBias->gyroscopeBias);

    // Reset stationary timer if gyroscope not stationary
    if ((fabs(gyroscope.axis.x) > fusionBias->threshold) || (fabs(gyroscope.axis.y) > fusionBias->threshold) || (fabs(gyroscope.axis.z) > fusionBias->threshold)) {
 8002128:	edd7 7a04 	vldr	s15, [r7, #16]
 800212c:	eeb0 7ae7 	vabs.f32	s14, s15
 8002130:	69fb      	ldr	r3, [r7, #28]
 8002132:	edd3 7a00 	vldr	s15, [r3]
 8002136:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800213a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800213e:	dc17      	bgt.n	8002170 <FusionBiasUpdate+0xd0>
 8002140:	edd7 7a05 	vldr	s15, [r7, #20]
 8002144:	eeb0 7ae7 	vabs.f32	s14, s15
 8002148:	69fb      	ldr	r3, [r7, #28]
 800214a:	edd3 7a00 	vldr	s15, [r3]
 800214e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002152:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002156:	dc0b      	bgt.n	8002170 <FusionBiasUpdate+0xd0>
 8002158:	edd7 7a06 	vldr	s15, [r7, #24]
 800215c:	eeb0 7ae7 	vabs.f32	s14, s15
 8002160:	69fb      	ldr	r3, [r7, #28]
 8002162:	edd3 7a00 	vldr	s15, [r3]
 8002166:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800216a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800216e:	dd0b      	ble.n	8002188 <FusionBiasUpdate+0xe8>
        fusionBias->stationaryTimer = 0.0f;
 8002170:	69fb      	ldr	r3, [r7, #28]
 8002172:	f04f 0200 	mov.w	r2, #0
 8002176:	60da      	str	r2, [r3, #12]
        return gyroscope;
 8002178:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800217c:	f107 0210 	add.w	r2, r7, #16
 8002180:	ca07      	ldmia	r2, {r0, r1, r2}
 8002182:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002186:	e08f      	b.n	80022a8 <FusionBiasUpdate+0x208>
    }

    // Increment stationary timer while gyroscope stationary
    if (fusionBias->stationaryTimer < STATIONARY_PERIOD) {
 8002188:	69fb      	ldr	r3, [r7, #28]
 800218a:	edd3 7a03 	vldr	s15, [r3, #12]
 800218e:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8002192:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002196:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800219a:	d512      	bpl.n	80021c2 <FusionBiasUpdate+0x122>
        fusionBias->stationaryTimer += fusionBias->samplePeriod;
 800219c:	69fb      	ldr	r3, [r7, #28]
 800219e:	ed93 7a03 	vldr	s14, [r3, #12]
 80021a2:	69fb      	ldr	r3, [r7, #28]
 80021a4:	edd3 7a01 	vldr	s15, [r3, #4]
 80021a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021ac:	69fb      	ldr	r3, [r7, #28]
 80021ae:	edc3 7a03 	vstr	s15, [r3, #12]
        return gyroscope;
 80021b2:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80021b6:	f107 0210 	add.w	r2, r7, #16
 80021ba:	ca07      	ldmia	r2, {r0, r1, r2}
 80021bc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80021c0:	e072      	b.n	80022a8 <FusionBiasUpdate+0x208>
    }

    // Adjust bias if stationary timer has elapsed
    fusionBias->gyroscopeBias = FusionVectorAdd(fusionBias->gyroscopeBias, FusionVectorMultiplyScalar(gyroscope, fusionBias->filterCoefficient));
 80021c2:	69fb      	ldr	r3, [r7, #28]
 80021c4:	689c      	ldr	r4, [r3, #8]
 80021c6:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80021ca:	f107 0210 	add.w	r2, r7, #16
 80021ce:	ca07      	ldmia	r2, {r0, r1, r2}
 80021d0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80021d4:	f8c7 40cc 	str.w	r4, [r7, #204]	; 0xcc
    result.axis.x = vector.axis.x * scalar;
 80021d8:	ed97 7a21 	vldr	s14, [r7, #132]	; 0x84
 80021dc:	edd7 7a33 	vldr	s15, [r7, #204]	; 0xcc
 80021e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021e4:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
    result.axis.y = vector.axis.y * scalar;
 80021e8:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 80021ec:	edd7 7a33 	vldr	s15, [r7, #204]	; 0xcc
 80021f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021f4:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
    result.axis.z = vector.axis.z * scalar;
 80021f8:	ed97 7a23 	vldr	s14, [r7, #140]	; 0x8c
 80021fc:	edd7 7a33 	vldr	s15, [r7, #204]	; 0xcc
 8002200:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002204:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
    return result;
 8002208:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800220c:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8002210:	ca07      	ldmia	r2, {r0, r1, r2}
 8002212:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002216:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800221a:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 800221e:	ca07      	ldmia	r2, {r0, r1, r2}
 8002220:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002224:	69fa      	ldr	r2, [r7, #28]
 8002226:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800222a:	3210      	adds	r2, #16
 800222c:	ca07      	ldmia	r2, {r0, r1, r2}
 800222e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002232:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002236:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 800223a:	ca07      	ldmia	r2, {r0, r1, r2}
 800223c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    result.axis.x = vectorA.axis.x + vectorB.axis.x;
 8002240:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8002244:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8002248:	ee77 7a27 	vadd.f32	s15, s14, s15
 800224c:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    result.axis.y = vectorA.axis.y + vectorB.axis.y;
 8002250:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 8002254:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8002258:	ee77 7a27 	vadd.f32	s15, s14, s15
 800225c:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
    result.axis.z = vectorA.axis.z + vectorB.axis.z;
 8002260:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 8002264:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8002268:	ee77 7a27 	vadd.f32	s15, s14, s15
 800226c:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
    return result;
 8002270:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002274:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8002278:	ca07      	ldmia	r2, {r0, r1, r2}
 800227a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800227e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002282:	f107 02b4 	add.w	r2, r7, #180	; 0xb4
 8002286:	ca07      	ldmia	r2, {r0, r1, r2}
 8002288:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800228c:	69fb      	ldr	r3, [r7, #28]
 800228e:	3310      	adds	r3, #16
 8002290:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8002294:	ca07      	ldmia	r2, {r0, r1, r2}
 8002296:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    return gyroscope;
 800229a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800229e:	f107 0210 	add.w	r2, r7, #16
 80022a2:	ca07      	ldmia	r2, {r0, r1, r2}
 80022a4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80022a8:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80022ac:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80022b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80022b4:	ee06 1a90 	vmov	s13, r1
 80022b8:	ee07 2a10 	vmov	s14, r2
 80022bc:	ee07 3a90 	vmov	s15, r3
}
 80022c0:	eeb0 0a66 	vmov.f32	s0, s13
 80022c4:	eef0 0a47 	vmov.f32	s1, s14
 80022c8:	eeb0 1a67 	vmov.f32	s2, s15
 80022cc:	37d0      	adds	r7, #208	; 0xd0
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bc90      	pop	{r4, r7}
 80022d2:	4770      	bx	lr

080022d4 <icm20948_init>:
static uint8_t* read_multiple_ak09916_reg(uint8_t reg, uint8_t len);


/* Main Functions */
void icm20948_init()
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	af00      	add	r7, sp, #0
	while(!icm20948_who_am_i());
 80022d8:	bf00      	nop
 80022da:	f000 f9d1 	bl	8002680 <icm20948_who_am_i>
 80022de:	4603      	mov	r3, r0
 80022e0:	f083 0301 	eor.w	r3, r3, #1
 80022e4:	b2db      	uxtb	r3, r3
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d1f7      	bne.n	80022da <icm20948_init+0x6>

	icm20948_device_reset();
 80022ea:	f000 f9ee 	bl	80026ca <icm20948_device_reset>
	icm20948_wakeup();
 80022ee:	f000 fa03 	bl	80026f8 <icm20948_wakeup>

	icm20948_clock_source(1);
 80022f2:	2001      	movs	r0, #1
 80022f4:	f000 fa7b 	bl	80027ee <icm20948_clock_source>
	icm20948_odr_align_enable();
 80022f8:	f000 fa92 	bl	8002820 <icm20948_odr_align_enable>
	
	icm20948_spi_slave_enable();
 80022fc:	f000 fa16 	bl	800272c <icm20948_spi_slave_enable>
	
	icm20948_gyro_low_pass_filter(0);
 8002300:	2000      	movs	r0, #0
 8002302:	f000 fa96 	bl	8002832 <icm20948_gyro_low_pass_filter>
	icm20948_accel_low_pass_filter(0);
 8002306:	2000      	movs	r0, #0
 8002308:	f000 fab0 	bl	800286c <icm20948_accel_low_pass_filter>

	icm20948_gyro_sample_rate_divider(0);
 800230c:	2000      	movs	r0, #0
 800230e:	f000 faca 	bl	80028a6 <icm20948_gyro_sample_rate_divider>
	icm20948_accel_sample_rate_divider(0);
 8002312:	2000      	movs	r0, #0
 8002314:	f000 fad6 	bl	80028c4 <icm20948_accel_sample_rate_divider>

	//icm20948_gyro_calibration();
	//icm20948_accel_calibration();

	icm20948_gyro_full_scale_select(_2000dps);
 8002318:	2003      	movs	r0, #3
 800231a:	f000 fb03 	bl	8002924 <icm20948_gyro_full_scale_select>
	icm20948_accel_full_scale_select(_16g);
 800231e:	2003      	movs	r0, #3
 8002320:	f000 fb4a 	bl	80029b8 <icm20948_accel_full_scale_select>
}
 8002324:	bf00      	nop
 8002326:	bd80      	pop	{r7, pc}

08002328 <ak09916_init>:

void ak09916_init()
{
 8002328:	b580      	push	{r7, lr}
 800232a:	af00      	add	r7, sp, #0
	icm20948_i2c_master_reset();
 800232c:	f000 fa15 	bl	800275a <icm20948_i2c_master_reset>
	icm20948_i2c_master_enable();
 8002330:	f000 fa2a 	bl	8002788 <icm20948_i2c_master_enable>
	icm20948_i2c_master_clk_frq(7);
 8002334:	2007      	movs	r0, #7
 8002336:	f000 fa41 	bl	80027bc <icm20948_i2c_master_clk_frq>

	while(!ak09916_who_am_i());
 800233a:	bf00      	nop
 800233c:	f000 f9b3 	bl	80026a6 <ak09916_who_am_i>
 8002340:	4603      	mov	r3, r0
 8002342:	f083 0301 	eor.w	r3, r3, #1
 8002346:	b2db      	uxtb	r3, r3
 8002348:	2b00      	cmp	r3, #0
 800234a:	d1f7      	bne.n	800233c <ak09916_init+0x14>

	ak09916_soft_reset();
 800234c:	f000 f9c9 	bl	80026e2 <ak09916_soft_reset>
	ak09916_operation_mode_setting(continuous_measurement_100hz);
 8002350:	2008      	movs	r0, #8
 8002352:	f000 fad5 	bl	8002900 <ak09916_operation_mode_setting>
}
 8002356:	bf00      	nop
 8002358:	bd80      	pop	{r7, pc}

0800235a <icm20948_gyro_read>:

void icm20948_gyro_read(axises* data)
{
 800235a:	b580      	push	{r7, lr}
 800235c:	b084      	sub	sp, #16
 800235e:	af00      	add	r7, sp, #0
 8002360:	6078      	str	r0, [r7, #4]
	uint8_t* temp = read_multiple_icm20948_reg(ub_0, B0_GYRO_XOUT_H, 6);
 8002362:	2206      	movs	r2, #6
 8002364:	2133      	movs	r1, #51	; 0x33
 8002366:	2000      	movs	r0, #0
 8002368:	f000 fbee 	bl	8002b48 <read_multiple_icm20948_reg>
 800236c:	60f8      	str	r0, [r7, #12]

	data->x = (int16_t)(temp[0] << 8 | temp[1]);
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	781b      	ldrb	r3, [r3, #0]
 8002372:	021b      	lsls	r3, r3, #8
 8002374:	b21a      	sxth	r2, r3
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	3301      	adds	r3, #1
 800237a:	781b      	ldrb	r3, [r3, #0]
 800237c:	b21b      	sxth	r3, r3
 800237e:	4313      	orrs	r3, r2
 8002380:	b21b      	sxth	r3, r3
 8002382:	ee07 3a90 	vmov	s15, r3
 8002386:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	edc3 7a00 	vstr	s15, [r3]
	data->y = (int16_t)(temp[2] << 8 | temp[3]);
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	3302      	adds	r3, #2
 8002394:	781b      	ldrb	r3, [r3, #0]
 8002396:	021b      	lsls	r3, r3, #8
 8002398:	b21a      	sxth	r2, r3
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	3303      	adds	r3, #3
 800239e:	781b      	ldrb	r3, [r3, #0]
 80023a0:	b21b      	sxth	r3, r3
 80023a2:	4313      	orrs	r3, r2
 80023a4:	b21b      	sxth	r3, r3
 80023a6:	ee07 3a90 	vmov	s15, r3
 80023aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	edc3 7a01 	vstr	s15, [r3, #4]
	data->z = (int16_t)(temp[4] << 8 | temp[5]);
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	3304      	adds	r3, #4
 80023b8:	781b      	ldrb	r3, [r3, #0]
 80023ba:	021b      	lsls	r3, r3, #8
 80023bc:	b21a      	sxth	r2, r3
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	3305      	adds	r3, #5
 80023c2:	781b      	ldrb	r3, [r3, #0]
 80023c4:	b21b      	sxth	r3, r3
 80023c6:	4313      	orrs	r3, r2
 80023c8:	b21b      	sxth	r3, r3
 80023ca:	ee07 3a90 	vmov	s15, r3
 80023ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	edc3 7a02 	vstr	s15, [r3, #8]
}
 80023d8:	bf00      	nop
 80023da:	3710      	adds	r7, #16
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd80      	pop	{r7, pc}

080023e0 <icm20948_accel_read>:

void icm20948_accel_read(axises* data)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b084      	sub	sp, #16
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
	uint8_t* temp = read_multiple_icm20948_reg(ub_0, B0_ACCEL_XOUT_H, 6);
 80023e8:	2206      	movs	r2, #6
 80023ea:	212d      	movs	r1, #45	; 0x2d
 80023ec:	2000      	movs	r0, #0
 80023ee:	f000 fbab 	bl	8002b48 <read_multiple_icm20948_reg>
 80023f2:	60f8      	str	r0, [r7, #12]

	data->x = (int16_t)(temp[0] << 8 | (temp[1]));
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	781b      	ldrb	r3, [r3, #0]
 80023f8:	021b      	lsls	r3, r3, #8
 80023fa:	b21a      	sxth	r2, r3
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	3301      	adds	r3, #1
 8002400:	781b      	ldrb	r3, [r3, #0]
 8002402:	b21b      	sxth	r3, r3
 8002404:	4313      	orrs	r3, r2
 8002406:	b21b      	sxth	r3, r3
 8002408:	ee07 3a90 	vmov	s15, r3
 800240c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	edc3 7a00 	vstr	s15, [r3]
	data->y = (int16_t)(temp[2] << 8 | (temp[3]));
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	3302      	adds	r3, #2
 800241a:	781b      	ldrb	r3, [r3, #0]
 800241c:	021b      	lsls	r3, r3, #8
 800241e:	b21a      	sxth	r2, r3
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	3303      	adds	r3, #3
 8002424:	781b      	ldrb	r3, [r3, #0]
 8002426:	b21b      	sxth	r3, r3
 8002428:	4313      	orrs	r3, r2
 800242a:	b21b      	sxth	r3, r3
 800242c:	ee07 3a90 	vmov	s15, r3
 8002430:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	edc3 7a01 	vstr	s15, [r3, #4]
	data->z = (int16_t)(temp[4] << 8 | (temp[5]));
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	3304      	adds	r3, #4
 800243e:	781b      	ldrb	r3, [r3, #0]
 8002440:	021b      	lsls	r3, r3, #8
 8002442:	b21a      	sxth	r2, r3
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	3305      	adds	r3, #5
 8002448:	781b      	ldrb	r3, [r3, #0]
 800244a:	b21b      	sxth	r3, r3
 800244c:	4313      	orrs	r3, r2
 800244e:	b21b      	sxth	r3, r3
 8002450:	ee07 3a90 	vmov	s15, r3
 8002454:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	edc3 7a02 	vstr	s15, [r3, #8]

	// Add scale factor because calibraiton function offset gravity acceleration.
}
 800245e:	bf00      	nop
 8002460:	3710      	adds	r7, #16
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}

08002466 <ak09916_mag_read>:

bool ak09916_mag_read(axises* data)
{
 8002466:	b580      	push	{r7, lr}
 8002468:	b086      	sub	sp, #24
 800246a:	af00      	add	r7, sp, #0
 800246c:	6078      	str	r0, [r7, #4]
	uint8_t* temp;
	uint8_t drdy, hofl;	// data ready, overflow

	drdy = read_single_ak09916_reg(MAG_ST1) & 0x01;
 800246e:	2010      	movs	r0, #16
 8002470:	f000 fb9a 	bl	8002ba8 <read_single_ak09916_reg>
 8002474:	4603      	mov	r3, r0
 8002476:	f003 0301 	and.w	r3, r3, #1
 800247a:	75fb      	strb	r3, [r7, #23]
	if(!drdy)	return false;
 800247c:	7dfb      	ldrb	r3, [r7, #23]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d101      	bne.n	8002486 <ak09916_mag_read+0x20>
 8002482:	2300      	movs	r3, #0
 8002484:	e046      	b.n	8002514 <ak09916_mag_read+0xae>

	temp = read_multiple_ak09916_reg(MAG_HXL, 6);
 8002486:	2106      	movs	r1, #6
 8002488:	2011      	movs	r0, #17
 800248a:	f000 fbd0 	bl	8002c2e <read_multiple_ak09916_reg>
 800248e:	6138      	str	r0, [r7, #16]

	hofl = read_single_ak09916_reg(MAG_ST2) & 0x08;
 8002490:	2018      	movs	r0, #24
 8002492:	f000 fb89 	bl	8002ba8 <read_single_ak09916_reg>
 8002496:	4603      	mov	r3, r0
 8002498:	f003 0308 	and.w	r3, r3, #8
 800249c:	73fb      	strb	r3, [r7, #15]
	if(hofl)	return false;
 800249e:	7bfb      	ldrb	r3, [r7, #15]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d001      	beq.n	80024a8 <ak09916_mag_read+0x42>
 80024a4:	2300      	movs	r3, #0
 80024a6:	e035      	b.n	8002514 <ak09916_mag_read+0xae>

	data->x = (int16_t)(temp[1] << 8 | temp[0]);
 80024a8:	693b      	ldr	r3, [r7, #16]
 80024aa:	3301      	adds	r3, #1
 80024ac:	781b      	ldrb	r3, [r3, #0]
 80024ae:	021b      	lsls	r3, r3, #8
 80024b0:	b21a      	sxth	r2, r3
 80024b2:	693b      	ldr	r3, [r7, #16]
 80024b4:	781b      	ldrb	r3, [r3, #0]
 80024b6:	b21b      	sxth	r3, r3
 80024b8:	4313      	orrs	r3, r2
 80024ba:	b21b      	sxth	r3, r3
 80024bc:	ee07 3a90 	vmov	s15, r3
 80024c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	edc3 7a00 	vstr	s15, [r3]
	data->y = (int16_t)(temp[3] << 8 | temp[2]);
 80024ca:	693b      	ldr	r3, [r7, #16]
 80024cc:	3303      	adds	r3, #3
 80024ce:	781b      	ldrb	r3, [r3, #0]
 80024d0:	021b      	lsls	r3, r3, #8
 80024d2:	b21a      	sxth	r2, r3
 80024d4:	693b      	ldr	r3, [r7, #16]
 80024d6:	3302      	adds	r3, #2
 80024d8:	781b      	ldrb	r3, [r3, #0]
 80024da:	b21b      	sxth	r3, r3
 80024dc:	4313      	orrs	r3, r2
 80024de:	b21b      	sxth	r3, r3
 80024e0:	ee07 3a90 	vmov	s15, r3
 80024e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	edc3 7a01 	vstr	s15, [r3, #4]
	data->z = (int16_t)(temp[5] << 8 | temp[4]);
 80024ee:	693b      	ldr	r3, [r7, #16]
 80024f0:	3305      	adds	r3, #5
 80024f2:	781b      	ldrb	r3, [r3, #0]
 80024f4:	021b      	lsls	r3, r3, #8
 80024f6:	b21a      	sxth	r2, r3
 80024f8:	693b      	ldr	r3, [r7, #16]
 80024fa:	3304      	adds	r3, #4
 80024fc:	781b      	ldrb	r3, [r3, #0]
 80024fe:	b21b      	sxth	r3, r3
 8002500:	4313      	orrs	r3, r2
 8002502:	b21b      	sxth	r3, r3
 8002504:	ee07 3a90 	vmov	s15, r3
 8002508:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	edc3 7a02 	vstr	s15, [r3, #8]

	return true;
 8002512:	2301      	movs	r3, #1
}
 8002514:	4618      	mov	r0, r3
 8002516:	3718      	adds	r7, #24
 8002518:	46bd      	mov	sp, r7
 800251a:	bd80      	pop	{r7, pc}

0800251c <icm20948_gyro_read_dps>:

void icm20948_gyro_read_dps(axises* data)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b082      	sub	sp, #8
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
	icm20948_gyro_read(data);
 8002524:	6878      	ldr	r0, [r7, #4]
 8002526:	f7ff ff18 	bl	800235a <icm20948_gyro_read>

	data->x /= gyro_scale_factor;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	edd3 6a00 	vldr	s13, [r3]
 8002530:	4b10      	ldr	r3, [pc, #64]	; (8002574 <icm20948_gyro_read_dps+0x58>)
 8002532:	ed93 7a00 	vldr	s14, [r3]
 8002536:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	edc3 7a00 	vstr	s15, [r3]
	data->y /= gyro_scale_factor;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	edd3 6a01 	vldr	s13, [r3, #4]
 8002546:	4b0b      	ldr	r3, [pc, #44]	; (8002574 <icm20948_gyro_read_dps+0x58>)
 8002548:	ed93 7a00 	vldr	s14, [r3]
 800254c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	edc3 7a01 	vstr	s15, [r3, #4]
	data->z /= gyro_scale_factor;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	edd3 6a02 	vldr	s13, [r3, #8]
 800255c:	4b05      	ldr	r3, [pc, #20]	; (8002574 <icm20948_gyro_read_dps+0x58>)
 800255e:	ed93 7a00 	vldr	s14, [r3]
 8002562:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	edc3 7a02 	vstr	s15, [r3, #8]
}
 800256c:	bf00      	nop
 800256e:	3708      	adds	r7, #8
 8002570:	46bd      	mov	sp, r7
 8002572:	bd80      	pop	{r7, pc}
 8002574:	20000090 	.word	0x20000090

08002578 <icm20948_accel_read_g>:

void icm20948_accel_read_g(axises* data)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b082      	sub	sp, #8
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
	icm20948_accel_read(data);
 8002580:	6878      	ldr	r0, [r7, #4]
 8002582:	f7ff ff2d 	bl	80023e0 <icm20948_accel_read>

	data->x /= accel_scale_factor;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	edd3 6a00 	vldr	s13, [r3]
 800258c:	4b10      	ldr	r3, [pc, #64]	; (80025d0 <icm20948_accel_read_g+0x58>)
 800258e:	ed93 7a00 	vldr	s14, [r3]
 8002592:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	edc3 7a00 	vstr	s15, [r3]
	data->y /= accel_scale_factor;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	edd3 6a01 	vldr	s13, [r3, #4]
 80025a2:	4b0b      	ldr	r3, [pc, #44]	; (80025d0 <icm20948_accel_read_g+0x58>)
 80025a4:	ed93 7a00 	vldr	s14, [r3]
 80025a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	edc3 7a01 	vstr	s15, [r3, #4]
	data->z /= accel_scale_factor;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	edd3 6a02 	vldr	s13, [r3, #8]
 80025b8:	4b05      	ldr	r3, [pc, #20]	; (80025d0 <icm20948_accel_read_g+0x58>)
 80025ba:	ed93 7a00 	vldr	s14, [r3]
 80025be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	edc3 7a02 	vstr	s15, [r3, #8]
}
 80025c8:	bf00      	nop
 80025ca:	3708      	adds	r7, #8
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bd80      	pop	{r7, pc}
 80025d0:	20000094 	.word	0x20000094
 80025d4:	00000000 	.word	0x00000000

080025d8 <ak09916_mag_read_uT>:

bool ak09916_mag_read_uT(axises* data)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b086      	sub	sp, #24
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
	axises temp;
	bool new_data = ak09916_mag_read(&temp);
 80025e0:	f107 0308 	add.w	r3, r7, #8
 80025e4:	4618      	mov	r0, r3
 80025e6:	f7ff ff3e 	bl	8002466 <ak09916_mag_read>
 80025ea:	4603      	mov	r3, r0
 80025ec:	75fb      	strb	r3, [r7, #23]
	if(!new_data)	return false;
 80025ee:	7dfb      	ldrb	r3, [r7, #23]
 80025f0:	f083 0301 	eor.w	r3, r3, #1
 80025f4:	b2db      	uxtb	r3, r3
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d001      	beq.n	80025fe <ak09916_mag_read_uT+0x26>
 80025fa:	2300      	movs	r3, #0
 80025fc:	e036      	b.n	800266c <ak09916_mag_read_uT+0x94>

	data->x = (float)(temp.x * 0.15);
 80025fe:	68bb      	ldr	r3, [r7, #8]
 8002600:	4618      	mov	r0, r3
 8002602:	f7fd ff45 	bl	8000490 <__aeabi_f2d>
 8002606:	a31c      	add	r3, pc, #112	; (adr r3, 8002678 <ak09916_mag_read_uT+0xa0>)
 8002608:	e9d3 2300 	ldrd	r2, r3, [r3]
 800260c:	f7fd ff98 	bl	8000540 <__aeabi_dmul>
 8002610:	4602      	mov	r2, r0
 8002612:	460b      	mov	r3, r1
 8002614:	4610      	mov	r0, r2
 8002616:	4619      	mov	r1, r3
 8002618:	f7fe fa2c 	bl	8000a74 <__aeabi_d2f>
 800261c:	4602      	mov	r2, r0
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	601a      	str	r2, [r3, #0]
	data->y = (float)(temp.y * 0.15);
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	4618      	mov	r0, r3
 8002626:	f7fd ff33 	bl	8000490 <__aeabi_f2d>
 800262a:	a313      	add	r3, pc, #76	; (adr r3, 8002678 <ak09916_mag_read_uT+0xa0>)
 800262c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002630:	f7fd ff86 	bl	8000540 <__aeabi_dmul>
 8002634:	4602      	mov	r2, r0
 8002636:	460b      	mov	r3, r1
 8002638:	4610      	mov	r0, r2
 800263a:	4619      	mov	r1, r3
 800263c:	f7fe fa1a 	bl	8000a74 <__aeabi_d2f>
 8002640:	4602      	mov	r2, r0
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	605a      	str	r2, [r3, #4]
	data->z = (float)(temp.z * 0.15);
 8002646:	693b      	ldr	r3, [r7, #16]
 8002648:	4618      	mov	r0, r3
 800264a:	f7fd ff21 	bl	8000490 <__aeabi_f2d>
 800264e:	a30a      	add	r3, pc, #40	; (adr r3, 8002678 <ak09916_mag_read_uT+0xa0>)
 8002650:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002654:	f7fd ff74 	bl	8000540 <__aeabi_dmul>
 8002658:	4602      	mov	r2, r0
 800265a:	460b      	mov	r3, r1
 800265c:	4610      	mov	r0, r2
 800265e:	4619      	mov	r1, r3
 8002660:	f7fe fa08 	bl	8000a74 <__aeabi_d2f>
 8002664:	4602      	mov	r2, r0
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	609a      	str	r2, [r3, #8]

	return true;
 800266a:	2301      	movs	r3, #1
}	
 800266c:	4618      	mov	r0, r3
 800266e:	3718      	adds	r7, #24
 8002670:	46bd      	mov	sp, r7
 8002672:	bd80      	pop	{r7, pc}
 8002674:	f3af 8000 	nop.w
 8002678:	33333333 	.word	0x33333333
 800267c:	3fc33333 	.word	0x3fc33333

08002680 <icm20948_who_am_i>:


/* Sub Functions */
bool icm20948_who_am_i()
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b082      	sub	sp, #8
 8002684:	af00      	add	r7, sp, #0
	uint8_t icm20948_id = read_single_icm20948_reg(ub_0, B0_WHO_AM_I);
 8002686:	2100      	movs	r1, #0
 8002688:	2000      	movs	r0, #0
 800268a:	f000 fa0d 	bl	8002aa8 <read_single_icm20948_reg>
 800268e:	4603      	mov	r3, r0
 8002690:	71fb      	strb	r3, [r7, #7]

	if(icm20948_id == ICM20948_ID)
 8002692:	79fb      	ldrb	r3, [r7, #7]
 8002694:	2bea      	cmp	r3, #234	; 0xea
 8002696:	d101      	bne.n	800269c <icm20948_who_am_i+0x1c>
		return true;
 8002698:	2301      	movs	r3, #1
 800269a:	e000      	b.n	800269e <icm20948_who_am_i+0x1e>
	else
		return false;
 800269c:	2300      	movs	r3, #0
}
 800269e:	4618      	mov	r0, r3
 80026a0:	3708      	adds	r7, #8
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}

080026a6 <ak09916_who_am_i>:

bool ak09916_who_am_i()
{
 80026a6:	b580      	push	{r7, lr}
 80026a8:	b082      	sub	sp, #8
 80026aa:	af00      	add	r7, sp, #0
	uint8_t ak09916_id = read_single_ak09916_reg(MAG_WIA2);
 80026ac:	2001      	movs	r0, #1
 80026ae:	f000 fa7b 	bl	8002ba8 <read_single_ak09916_reg>
 80026b2:	4603      	mov	r3, r0
 80026b4:	71fb      	strb	r3, [r7, #7]

	if(ak09916_id == AK09916_ID)
 80026b6:	79fb      	ldrb	r3, [r7, #7]
 80026b8:	2b09      	cmp	r3, #9
 80026ba:	d101      	bne.n	80026c0 <ak09916_who_am_i+0x1a>
		return true;
 80026bc:	2301      	movs	r3, #1
 80026be:	e000      	b.n	80026c2 <ak09916_who_am_i+0x1c>
	else
		return false;
 80026c0:	2300      	movs	r3, #0
}
 80026c2:	4618      	mov	r0, r3
 80026c4:	3708      	adds	r7, #8
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}

080026ca <icm20948_device_reset>:

void icm20948_device_reset()
{
 80026ca:	b580      	push	{r7, lr}
 80026cc:	af00      	add	r7, sp, #0
	write_single_icm20948_reg(ub_0, B0_PWR_MGMT_1, 0x80 | 0x41);
 80026ce:	22c1      	movs	r2, #193	; 0xc1
 80026d0:	2106      	movs	r1, #6
 80026d2:	2000      	movs	r0, #0
 80026d4:	f000 fa14 	bl	8002b00 <write_single_icm20948_reg>
	HAL_Delay(100);
 80026d8:	2064      	movs	r0, #100	; 0x64
 80026da:	f002 fd43 	bl	8005164 <HAL_Delay>
}
 80026de:	bf00      	nop
 80026e0:	bd80      	pop	{r7, pc}

080026e2 <ak09916_soft_reset>:

void ak09916_soft_reset()
{
 80026e2:	b580      	push	{r7, lr}
 80026e4:	af00      	add	r7, sp, #0
	write_single_ak09916_reg(MAG_CNTL3, 0x01);
 80026e6:	2101      	movs	r1, #1
 80026e8:	2032      	movs	r0, #50	; 0x32
 80026ea:	f000 fa7e 	bl	8002bea <write_single_ak09916_reg>
	HAL_Delay(100);
 80026ee:	2064      	movs	r0, #100	; 0x64
 80026f0:	f002 fd38 	bl	8005164 <HAL_Delay>
}
 80026f4:	bf00      	nop
 80026f6:	bd80      	pop	{r7, pc}

080026f8 <icm20948_wakeup>:

void icm20948_wakeup()
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b082      	sub	sp, #8
 80026fc:	af00      	add	r7, sp, #0
	uint8_t new_val = read_single_icm20948_reg(ub_0, B0_PWR_MGMT_1);
 80026fe:	2106      	movs	r1, #6
 8002700:	2000      	movs	r0, #0
 8002702:	f000 f9d1 	bl	8002aa8 <read_single_icm20948_reg>
 8002706:	4603      	mov	r3, r0
 8002708:	71fb      	strb	r3, [r7, #7]
	new_val &= 0xBF;
 800270a:	79fb      	ldrb	r3, [r7, #7]
 800270c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002710:	71fb      	strb	r3, [r7, #7]

	write_single_icm20948_reg(ub_0, B0_PWR_MGMT_1, new_val);
 8002712:	79fb      	ldrb	r3, [r7, #7]
 8002714:	461a      	mov	r2, r3
 8002716:	2106      	movs	r1, #6
 8002718:	2000      	movs	r0, #0
 800271a:	f000 f9f1 	bl	8002b00 <write_single_icm20948_reg>
	HAL_Delay(100);
 800271e:	2064      	movs	r0, #100	; 0x64
 8002720:	f002 fd20 	bl	8005164 <HAL_Delay>
}
 8002724:	bf00      	nop
 8002726:	3708      	adds	r7, #8
 8002728:	46bd      	mov	sp, r7
 800272a:	bd80      	pop	{r7, pc}

0800272c <icm20948_spi_slave_enable>:
	write_single_icm20948_reg(ub_0, B0_PWR_MGMT_1, new_val);
	HAL_Delay(100);
}

void icm20948_spi_slave_enable()
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b082      	sub	sp, #8
 8002730:	af00      	add	r7, sp, #0
	uint8_t new_val = read_single_icm20948_reg(ub_0, B0_USER_CTRL);
 8002732:	2103      	movs	r1, #3
 8002734:	2000      	movs	r0, #0
 8002736:	f000 f9b7 	bl	8002aa8 <read_single_icm20948_reg>
 800273a:	4603      	mov	r3, r0
 800273c:	71fb      	strb	r3, [r7, #7]
	new_val |= 0x10;
 800273e:	79fb      	ldrb	r3, [r7, #7]
 8002740:	f043 0310 	orr.w	r3, r3, #16
 8002744:	71fb      	strb	r3, [r7, #7]

	write_single_icm20948_reg(ub_0, B0_USER_CTRL, new_val);
 8002746:	79fb      	ldrb	r3, [r7, #7]
 8002748:	461a      	mov	r2, r3
 800274a:	2103      	movs	r1, #3
 800274c:	2000      	movs	r0, #0
 800274e:	f000 f9d7 	bl	8002b00 <write_single_icm20948_reg>
}
 8002752:	bf00      	nop
 8002754:	3708      	adds	r7, #8
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}

0800275a <icm20948_i2c_master_reset>:

void icm20948_i2c_master_reset()
{
 800275a:	b580      	push	{r7, lr}
 800275c:	b082      	sub	sp, #8
 800275e:	af00      	add	r7, sp, #0
	uint8_t new_val = read_single_icm20948_reg(ub_0, B0_USER_CTRL);
 8002760:	2103      	movs	r1, #3
 8002762:	2000      	movs	r0, #0
 8002764:	f000 f9a0 	bl	8002aa8 <read_single_icm20948_reg>
 8002768:	4603      	mov	r3, r0
 800276a:	71fb      	strb	r3, [r7, #7]
	new_val |= 0x02;
 800276c:	79fb      	ldrb	r3, [r7, #7]
 800276e:	f043 0302 	orr.w	r3, r3, #2
 8002772:	71fb      	strb	r3, [r7, #7]

	write_single_icm20948_reg(ub_0, B0_USER_CTRL, new_val);
 8002774:	79fb      	ldrb	r3, [r7, #7]
 8002776:	461a      	mov	r2, r3
 8002778:	2103      	movs	r1, #3
 800277a:	2000      	movs	r0, #0
 800277c:	f000 f9c0 	bl	8002b00 <write_single_icm20948_reg>
}
 8002780:	bf00      	nop
 8002782:	3708      	adds	r7, #8
 8002784:	46bd      	mov	sp, r7
 8002786:	bd80      	pop	{r7, pc}

08002788 <icm20948_i2c_master_enable>:

void icm20948_i2c_master_enable()
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b082      	sub	sp, #8
 800278c:	af00      	add	r7, sp, #0
	uint8_t new_val = read_single_icm20948_reg(ub_0, B0_USER_CTRL);
 800278e:	2103      	movs	r1, #3
 8002790:	2000      	movs	r0, #0
 8002792:	f000 f989 	bl	8002aa8 <read_single_icm20948_reg>
 8002796:	4603      	mov	r3, r0
 8002798:	71fb      	strb	r3, [r7, #7]
	new_val |= 0x20;
 800279a:	79fb      	ldrb	r3, [r7, #7]
 800279c:	f043 0320 	orr.w	r3, r3, #32
 80027a0:	71fb      	strb	r3, [r7, #7]

	write_single_icm20948_reg(ub_0, B0_USER_CTRL, new_val);
 80027a2:	79fb      	ldrb	r3, [r7, #7]
 80027a4:	461a      	mov	r2, r3
 80027a6:	2103      	movs	r1, #3
 80027a8:	2000      	movs	r0, #0
 80027aa:	f000 f9a9 	bl	8002b00 <write_single_icm20948_reg>
	HAL_Delay(100);
 80027ae:	2064      	movs	r0, #100	; 0x64
 80027b0:	f002 fcd8 	bl	8005164 <HAL_Delay>
}
 80027b4:	bf00      	nop
 80027b6:	3708      	adds	r7, #8
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd80      	pop	{r7, pc}

080027bc <icm20948_i2c_master_clk_frq>:

void icm20948_i2c_master_clk_frq(uint8_t config)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b084      	sub	sp, #16
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	4603      	mov	r3, r0
 80027c4:	71fb      	strb	r3, [r7, #7]
	uint8_t new_val = read_single_icm20948_reg(ub_3, B3_I2C_MST_CTRL);
 80027c6:	2101      	movs	r1, #1
 80027c8:	2030      	movs	r0, #48	; 0x30
 80027ca:	f000 f96d 	bl	8002aa8 <read_single_icm20948_reg>
 80027ce:	4603      	mov	r3, r0
 80027d0:	73fb      	strb	r3, [r7, #15]
	new_val |= config;
 80027d2:	7bfa      	ldrb	r2, [r7, #15]
 80027d4:	79fb      	ldrb	r3, [r7, #7]
 80027d6:	4313      	orrs	r3, r2
 80027d8:	73fb      	strb	r3, [r7, #15]

	write_single_icm20948_reg(ub_3, B3_I2C_MST_CTRL, new_val);	
 80027da:	7bfb      	ldrb	r3, [r7, #15]
 80027dc:	461a      	mov	r2, r3
 80027de:	2101      	movs	r1, #1
 80027e0:	2030      	movs	r0, #48	; 0x30
 80027e2:	f000 f98d 	bl	8002b00 <write_single_icm20948_reg>
}
 80027e6:	bf00      	nop
 80027e8:	3710      	adds	r7, #16
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}

080027ee <icm20948_clock_source>:

void icm20948_clock_source(uint8_t source)
{
 80027ee:	b580      	push	{r7, lr}
 80027f0:	b084      	sub	sp, #16
 80027f2:	af00      	add	r7, sp, #0
 80027f4:	4603      	mov	r3, r0
 80027f6:	71fb      	strb	r3, [r7, #7]
	uint8_t new_val = read_single_icm20948_reg(ub_0, B0_PWR_MGMT_1);
 80027f8:	2106      	movs	r1, #6
 80027fa:	2000      	movs	r0, #0
 80027fc:	f000 f954 	bl	8002aa8 <read_single_icm20948_reg>
 8002800:	4603      	mov	r3, r0
 8002802:	73fb      	strb	r3, [r7, #15]
	new_val |= source;
 8002804:	7bfa      	ldrb	r2, [r7, #15]
 8002806:	79fb      	ldrb	r3, [r7, #7]
 8002808:	4313      	orrs	r3, r2
 800280a:	73fb      	strb	r3, [r7, #15]

	write_single_icm20948_reg(ub_0, B0_PWR_MGMT_1, new_val);
 800280c:	7bfb      	ldrb	r3, [r7, #15]
 800280e:	461a      	mov	r2, r3
 8002810:	2106      	movs	r1, #6
 8002812:	2000      	movs	r0, #0
 8002814:	f000 f974 	bl	8002b00 <write_single_icm20948_reg>
}
 8002818:	bf00      	nop
 800281a:	3710      	adds	r7, #16
 800281c:	46bd      	mov	sp, r7
 800281e:	bd80      	pop	{r7, pc}

08002820 <icm20948_odr_align_enable>:

void icm20948_odr_align_enable()
{
 8002820:	b580      	push	{r7, lr}
 8002822:	af00      	add	r7, sp, #0
	write_single_icm20948_reg(ub_2, B2_ODR_ALIGN_EN, 0x01);
 8002824:	2201      	movs	r2, #1
 8002826:	2109      	movs	r1, #9
 8002828:	2020      	movs	r0, #32
 800282a:	f000 f969 	bl	8002b00 <write_single_icm20948_reg>
}
 800282e:	bf00      	nop
 8002830:	bd80      	pop	{r7, pc}

08002832 <icm20948_gyro_low_pass_filter>:

void icm20948_gyro_low_pass_filter(uint8_t config)
{
 8002832:	b580      	push	{r7, lr}
 8002834:	b084      	sub	sp, #16
 8002836:	af00      	add	r7, sp, #0
 8002838:	4603      	mov	r3, r0
 800283a:	71fb      	strb	r3, [r7, #7]
	uint8_t new_val = read_single_icm20948_reg(ub_2, B2_GYRO_CONFIG_1);
 800283c:	2101      	movs	r1, #1
 800283e:	2020      	movs	r0, #32
 8002840:	f000 f932 	bl	8002aa8 <read_single_icm20948_reg>
 8002844:	4603      	mov	r3, r0
 8002846:	73fb      	strb	r3, [r7, #15]
	new_val |= config << 3;
 8002848:	79fb      	ldrb	r3, [r7, #7]
 800284a:	00db      	lsls	r3, r3, #3
 800284c:	b25a      	sxtb	r2, r3
 800284e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002852:	4313      	orrs	r3, r2
 8002854:	b25b      	sxtb	r3, r3
 8002856:	73fb      	strb	r3, [r7, #15]

	write_single_icm20948_reg(ub_2, B2_GYRO_CONFIG_1, new_val);
 8002858:	7bfb      	ldrb	r3, [r7, #15]
 800285a:	461a      	mov	r2, r3
 800285c:	2101      	movs	r1, #1
 800285e:	2020      	movs	r0, #32
 8002860:	f000 f94e 	bl	8002b00 <write_single_icm20948_reg>
}
 8002864:	bf00      	nop
 8002866:	3710      	adds	r7, #16
 8002868:	46bd      	mov	sp, r7
 800286a:	bd80      	pop	{r7, pc}

0800286c <icm20948_accel_low_pass_filter>:

void icm20948_accel_low_pass_filter(uint8_t config)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b084      	sub	sp, #16
 8002870:	af00      	add	r7, sp, #0
 8002872:	4603      	mov	r3, r0
 8002874:	71fb      	strb	r3, [r7, #7]
	uint8_t new_val = read_single_icm20948_reg(ub_2, B2_ACCEL_CONFIG);
 8002876:	2114      	movs	r1, #20
 8002878:	2020      	movs	r0, #32
 800287a:	f000 f915 	bl	8002aa8 <read_single_icm20948_reg>
 800287e:	4603      	mov	r3, r0
 8002880:	73fb      	strb	r3, [r7, #15]
	new_val |= config << 3;
 8002882:	79fb      	ldrb	r3, [r7, #7]
 8002884:	00db      	lsls	r3, r3, #3
 8002886:	b25a      	sxtb	r2, r3
 8002888:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800288c:	4313      	orrs	r3, r2
 800288e:	b25b      	sxtb	r3, r3
 8002890:	73fb      	strb	r3, [r7, #15]

	write_single_icm20948_reg(ub_2, B2_GYRO_CONFIG_1, new_val);
 8002892:	7bfb      	ldrb	r3, [r7, #15]
 8002894:	461a      	mov	r2, r3
 8002896:	2101      	movs	r1, #1
 8002898:	2020      	movs	r0, #32
 800289a:	f000 f931 	bl	8002b00 <write_single_icm20948_reg>
}
 800289e:	bf00      	nop
 80028a0:	3710      	adds	r7, #16
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bd80      	pop	{r7, pc}

080028a6 <icm20948_gyro_sample_rate_divider>:

void icm20948_gyro_sample_rate_divider(uint8_t divider)
{
 80028a6:	b580      	push	{r7, lr}
 80028a8:	b082      	sub	sp, #8
 80028aa:	af00      	add	r7, sp, #0
 80028ac:	4603      	mov	r3, r0
 80028ae:	71fb      	strb	r3, [r7, #7]
	write_single_icm20948_reg(ub_2, B2_GYRO_SMPLRT_DIV, divider);
 80028b0:	79fb      	ldrb	r3, [r7, #7]
 80028b2:	461a      	mov	r2, r3
 80028b4:	2100      	movs	r1, #0
 80028b6:	2020      	movs	r0, #32
 80028b8:	f000 f922 	bl	8002b00 <write_single_icm20948_reg>
}
 80028bc:	bf00      	nop
 80028be:	3708      	adds	r7, #8
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bd80      	pop	{r7, pc}

080028c4 <icm20948_accel_sample_rate_divider>:

void icm20948_accel_sample_rate_divider(uint16_t divider)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b084      	sub	sp, #16
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	4603      	mov	r3, r0
 80028cc:	80fb      	strh	r3, [r7, #6]
	uint8_t divider_1 = (uint8_t)(divider >> 8);
 80028ce:	88fb      	ldrh	r3, [r7, #6]
 80028d0:	0a1b      	lsrs	r3, r3, #8
 80028d2:	b29b      	uxth	r3, r3
 80028d4:	73fb      	strb	r3, [r7, #15]
	uint8_t divider_2 = (uint8_t)(0x0F & divider);
 80028d6:	88fb      	ldrh	r3, [r7, #6]
 80028d8:	b2db      	uxtb	r3, r3
 80028da:	f003 030f 	and.w	r3, r3, #15
 80028de:	73bb      	strb	r3, [r7, #14]

	write_single_icm20948_reg(ub_2, B2_ACCEL_SMPLRT_DIV_1, divider_1);
 80028e0:	7bfb      	ldrb	r3, [r7, #15]
 80028e2:	461a      	mov	r2, r3
 80028e4:	2110      	movs	r1, #16
 80028e6:	2020      	movs	r0, #32
 80028e8:	f000 f90a 	bl	8002b00 <write_single_icm20948_reg>
	write_single_icm20948_reg(ub_2, B2_ACCEL_SMPLRT_DIV_2, divider_2);
 80028ec:	7bbb      	ldrb	r3, [r7, #14]
 80028ee:	461a      	mov	r2, r3
 80028f0:	2111      	movs	r1, #17
 80028f2:	2020      	movs	r0, #32
 80028f4:	f000 f904 	bl	8002b00 <write_single_icm20948_reg>
}
 80028f8:	bf00      	nop
 80028fa:	3710      	adds	r7, #16
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bd80      	pop	{r7, pc}

08002900 <ak09916_operation_mode_setting>:

void ak09916_operation_mode_setting(operation_mode mode)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b082      	sub	sp, #8
 8002904:	af00      	add	r7, sp, #0
 8002906:	4603      	mov	r3, r0
 8002908:	71fb      	strb	r3, [r7, #7]
	write_single_ak09916_reg(MAG_CNTL2, mode);
 800290a:	79fb      	ldrb	r3, [r7, #7]
 800290c:	4619      	mov	r1, r3
 800290e:	2031      	movs	r0, #49	; 0x31
 8002910:	f000 f96b 	bl	8002bea <write_single_ak09916_reg>
	HAL_Delay(100);
 8002914:	2064      	movs	r0, #100	; 0x64
 8002916:	f002 fc25 	bl	8005164 <HAL_Delay>
}
 800291a:	bf00      	nop
 800291c:	3708      	adds	r7, #8
 800291e:	46bd      	mov	sp, r7
 8002920:	bd80      	pop	{r7, pc}
	...

08002924 <icm20948_gyro_full_scale_select>:
	write_multiple_icm20948_reg(ub_1, B1_YA_OFFS_H, &accel_offset[2], 2);
	write_multiple_icm20948_reg(ub_1, B1_ZA_OFFS_H, &accel_offset[4], 2);
}

void icm20948_gyro_full_scale_select(gyro_full_scale full_scale)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b084      	sub	sp, #16
 8002928:	af00      	add	r7, sp, #0
 800292a:	4603      	mov	r3, r0
 800292c:	71fb      	strb	r3, [r7, #7]
	uint8_t new_val = read_single_icm20948_reg(ub_2, B2_GYRO_CONFIG_1);
 800292e:	2101      	movs	r1, #1
 8002930:	2020      	movs	r0, #32
 8002932:	f000 f8b9 	bl	8002aa8 <read_single_icm20948_reg>
 8002936:	4603      	mov	r3, r0
 8002938:	73fb      	strb	r3, [r7, #15]
	
	switch(full_scale)
 800293a:	79fb      	ldrb	r3, [r7, #7]
 800293c:	2b03      	cmp	r3, #3
 800293e:	d827      	bhi.n	8002990 <icm20948_gyro_full_scale_select+0x6c>
 8002940:	a201      	add	r2, pc, #4	; (adr r2, 8002948 <icm20948_gyro_full_scale_select+0x24>)
 8002942:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002946:	bf00      	nop
 8002948:	08002959 	.word	0x08002959
 800294c:	08002961 	.word	0x08002961
 8002950:	08002971 	.word	0x08002971
 8002954:	08002981 	.word	0x08002981
	{
		case _250dps :
			new_val |= 0x00;
			gyro_scale_factor = 131.0;
 8002958:	4b12      	ldr	r3, [pc, #72]	; (80029a4 <icm20948_gyro_full_scale_select+0x80>)
 800295a:	4a13      	ldr	r2, [pc, #76]	; (80029a8 <icm20948_gyro_full_scale_select+0x84>)
 800295c:	601a      	str	r2, [r3, #0]
			break;
 800295e:	e017      	b.n	8002990 <icm20948_gyro_full_scale_select+0x6c>
		case _500dps :
			new_val |= 0x02;
 8002960:	7bfb      	ldrb	r3, [r7, #15]
 8002962:	f043 0302 	orr.w	r3, r3, #2
 8002966:	73fb      	strb	r3, [r7, #15]
			gyro_scale_factor = 65.5;
 8002968:	4b0e      	ldr	r3, [pc, #56]	; (80029a4 <icm20948_gyro_full_scale_select+0x80>)
 800296a:	4a10      	ldr	r2, [pc, #64]	; (80029ac <icm20948_gyro_full_scale_select+0x88>)
 800296c:	601a      	str	r2, [r3, #0]
			break;
 800296e:	e00f      	b.n	8002990 <icm20948_gyro_full_scale_select+0x6c>
		case _1000dps :
			new_val |= 0x04;
 8002970:	7bfb      	ldrb	r3, [r7, #15]
 8002972:	f043 0304 	orr.w	r3, r3, #4
 8002976:	73fb      	strb	r3, [r7, #15]
			gyro_scale_factor = 32.8;
 8002978:	4b0a      	ldr	r3, [pc, #40]	; (80029a4 <icm20948_gyro_full_scale_select+0x80>)
 800297a:	4a0d      	ldr	r2, [pc, #52]	; (80029b0 <icm20948_gyro_full_scale_select+0x8c>)
 800297c:	601a      	str	r2, [r3, #0]
			break;
 800297e:	e007      	b.n	8002990 <icm20948_gyro_full_scale_select+0x6c>
		case _2000dps :
			new_val |= 0x06;
 8002980:	7bfb      	ldrb	r3, [r7, #15]
 8002982:	f043 0306 	orr.w	r3, r3, #6
 8002986:	73fb      	strb	r3, [r7, #15]
			gyro_scale_factor = 16.4;
 8002988:	4b06      	ldr	r3, [pc, #24]	; (80029a4 <icm20948_gyro_full_scale_select+0x80>)
 800298a:	4a0a      	ldr	r2, [pc, #40]	; (80029b4 <icm20948_gyro_full_scale_select+0x90>)
 800298c:	601a      	str	r2, [r3, #0]
			break;
 800298e:	bf00      	nop
	}

	write_single_icm20948_reg(ub_2, B2_GYRO_CONFIG_1, new_val);
 8002990:	7bfb      	ldrb	r3, [r7, #15]
 8002992:	461a      	mov	r2, r3
 8002994:	2101      	movs	r1, #1
 8002996:	2020      	movs	r0, #32
 8002998:	f000 f8b2 	bl	8002b00 <write_single_icm20948_reg>
}
 800299c:	bf00      	nop
 800299e:	3710      	adds	r7, #16
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bd80      	pop	{r7, pc}
 80029a4:	20000090 	.word	0x20000090
 80029a8:	43030000 	.word	0x43030000
 80029ac:	42830000 	.word	0x42830000
 80029b0:	42033333 	.word	0x42033333
 80029b4:	41833333 	.word	0x41833333

080029b8 <icm20948_accel_full_scale_select>:

void icm20948_accel_full_scale_select(accel_full_scale full_scale)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b084      	sub	sp, #16
 80029bc:	af00      	add	r7, sp, #0
 80029be:	4603      	mov	r3, r0
 80029c0:	71fb      	strb	r3, [r7, #7]
	uint8_t new_val = read_single_icm20948_reg(ub_2, B2_ACCEL_CONFIG);
 80029c2:	2114      	movs	r1, #20
 80029c4:	2020      	movs	r0, #32
 80029c6:	f000 f86f 	bl	8002aa8 <read_single_icm20948_reg>
 80029ca:	4603      	mov	r3, r0
 80029cc:	73fb      	strb	r3, [r7, #15]
	
	switch(full_scale)
 80029ce:	79fb      	ldrb	r3, [r7, #7]
 80029d0:	2b03      	cmp	r3, #3
 80029d2:	d82b      	bhi.n	8002a2c <icm20948_accel_full_scale_select+0x74>
 80029d4:	a201      	add	r2, pc, #4	; (adr r2, 80029dc <icm20948_accel_full_scale_select+0x24>)
 80029d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029da:	bf00      	nop
 80029dc:	080029ed 	.word	0x080029ed
 80029e0:	080029f7 	.word	0x080029f7
 80029e4:	08002a09 	.word	0x08002a09
 80029e8:	08002a1b 	.word	0x08002a1b
	{
		case _2g :
			new_val |= 0x00;
			accel_scale_factor = 16384;
 80029ec:	4b14      	ldr	r3, [pc, #80]	; (8002a40 <icm20948_accel_full_scale_select+0x88>)
 80029ee:	f04f 428d 	mov.w	r2, #1182793728	; 0x46800000
 80029f2:	601a      	str	r2, [r3, #0]
			break;
 80029f4:	e01a      	b.n	8002a2c <icm20948_accel_full_scale_select+0x74>
		case _4g :
			new_val |= 0x02;
 80029f6:	7bfb      	ldrb	r3, [r7, #15]
 80029f8:	f043 0302 	orr.w	r3, r3, #2
 80029fc:	73fb      	strb	r3, [r7, #15]
			accel_scale_factor = 8192;
 80029fe:	4b10      	ldr	r3, [pc, #64]	; (8002a40 <icm20948_accel_full_scale_select+0x88>)
 8002a00:	f04f 428c 	mov.w	r2, #1174405120	; 0x46000000
 8002a04:	601a      	str	r2, [r3, #0]
			break;
 8002a06:	e011      	b.n	8002a2c <icm20948_accel_full_scale_select+0x74>
		case _8g :
			new_val |= 0x04;
 8002a08:	7bfb      	ldrb	r3, [r7, #15]
 8002a0a:	f043 0304 	orr.w	r3, r3, #4
 8002a0e:	73fb      	strb	r3, [r7, #15]
			accel_scale_factor = 4096;
 8002a10:	4b0b      	ldr	r3, [pc, #44]	; (8002a40 <icm20948_accel_full_scale_select+0x88>)
 8002a12:	f04f 428b 	mov.w	r2, #1166016512	; 0x45800000
 8002a16:	601a      	str	r2, [r3, #0]
			break;
 8002a18:	e008      	b.n	8002a2c <icm20948_accel_full_scale_select+0x74>
		case _16g :
			new_val |= 0x06;
 8002a1a:	7bfb      	ldrb	r3, [r7, #15]
 8002a1c:	f043 0306 	orr.w	r3, r3, #6
 8002a20:	73fb      	strb	r3, [r7, #15]
			accel_scale_factor = 2048;
 8002a22:	4b07      	ldr	r3, [pc, #28]	; (8002a40 <icm20948_accel_full_scale_select+0x88>)
 8002a24:	f04f 428a 	mov.w	r2, #1157627904	; 0x45000000
 8002a28:	601a      	str	r2, [r3, #0]
			break;
 8002a2a:	bf00      	nop
	}

	write_single_icm20948_reg(ub_2, B2_ACCEL_CONFIG, new_val);
 8002a2c:	7bfb      	ldrb	r3, [r7, #15]
 8002a2e:	461a      	mov	r2, r3
 8002a30:	2114      	movs	r1, #20
 8002a32:	2020      	movs	r0, #32
 8002a34:	f000 f864 	bl	8002b00 <write_single_icm20948_reg>
}
 8002a38:	bf00      	nop
 8002a3a:	3710      	adds	r7, #16
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bd80      	pop	{r7, pc}
 8002a40:	20000094 	.word	0x20000094

08002a44 <cs_high>:


/* Static Functions */
static void cs_high()
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ICM20948_SPI_CS_PIN_PORT, ICM20948_SPI_CS_PIN_NUMBER, SET);	
 8002a48:	2201      	movs	r2, #1
 8002a4a:	2104      	movs	r1, #4
 8002a4c:	4802      	ldr	r0, [pc, #8]	; (8002a58 <cs_high+0x14>)
 8002a4e:	f003 fcbf 	bl	80063d0 <HAL_GPIO_WritePin>
}
 8002a52:	bf00      	nop
 8002a54:	bd80      	pop	{r7, pc}
 8002a56:	bf00      	nop
 8002a58:	40021000 	.word	0x40021000

08002a5c <cs_low>:

static void cs_low()
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ICM20948_SPI_CS_PIN_PORT, ICM20948_SPI_CS_PIN_NUMBER, RESET);
 8002a60:	2200      	movs	r2, #0
 8002a62:	2104      	movs	r1, #4
 8002a64:	4802      	ldr	r0, [pc, #8]	; (8002a70 <cs_low+0x14>)
 8002a66:	f003 fcb3 	bl	80063d0 <HAL_GPIO_WritePin>
}
 8002a6a:	bf00      	nop
 8002a6c:	bd80      	pop	{r7, pc}
 8002a6e:	bf00      	nop
 8002a70:	40021000 	.word	0x40021000

08002a74 <select_user_bank>:

static void select_user_bank(userbank ub)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b084      	sub	sp, #16
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	71fb      	strb	r3, [r7, #7]
	uint8_t write_reg[2];
	write_reg[0] = WRITE | REG_BANK_SEL;
 8002a7e:	237f      	movs	r3, #127	; 0x7f
 8002a80:	733b      	strb	r3, [r7, #12]
	write_reg[1] = ub;
 8002a82:	79fb      	ldrb	r3, [r7, #7]
 8002a84:	737b      	strb	r3, [r7, #13]

	cs_low();
 8002a86:	f7ff ffe9 	bl	8002a5c <cs_low>
	HAL_SPI_Transmit(ICM20948_SPI, write_reg, 2, 10);
 8002a8a:	f107 010c 	add.w	r1, r7, #12
 8002a8e:	230a      	movs	r3, #10
 8002a90:	2202      	movs	r2, #2
 8002a92:	4804      	ldr	r0, [pc, #16]	; (8002aa4 <select_user_bank+0x30>)
 8002a94:	f004 f9cd 	bl	8006e32 <HAL_SPI_Transmit>
	cs_high();
 8002a98:	f7ff ffd4 	bl	8002a44 <cs_high>
}
 8002a9c:	bf00      	nop
 8002a9e:	3710      	adds	r7, #16
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bd80      	pop	{r7, pc}
 8002aa4:	200002b4 	.word	0x200002b4

08002aa8 <read_single_icm20948_reg>:

static uint8_t read_single_icm20948_reg(userbank ub, uint8_t reg)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b084      	sub	sp, #16
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	4603      	mov	r3, r0
 8002ab0:	460a      	mov	r2, r1
 8002ab2:	71fb      	strb	r3, [r7, #7]
 8002ab4:	4613      	mov	r3, r2
 8002ab6:	71bb      	strb	r3, [r7, #6]
	uint8_t read_reg = READ | reg;
 8002ab8:	79bb      	ldrb	r3, [r7, #6]
 8002aba:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002abe:	b2db      	uxtb	r3, r3
 8002ac0:	73fb      	strb	r3, [r7, #15]
	uint8_t reg_val;
	select_user_bank(ub);
 8002ac2:	79fb      	ldrb	r3, [r7, #7]
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	f7ff ffd5 	bl	8002a74 <select_user_bank>

	cs_low();
 8002aca:	f7ff ffc7 	bl	8002a5c <cs_low>
	HAL_SPI_Transmit(ICM20948_SPI, &read_reg, 1, 1000);
 8002ace:	f107 010f 	add.w	r1, r7, #15
 8002ad2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002ad6:	2201      	movs	r2, #1
 8002ad8:	4808      	ldr	r0, [pc, #32]	; (8002afc <read_single_icm20948_reg+0x54>)
 8002ada:	f004 f9aa 	bl	8006e32 <HAL_SPI_Transmit>
	HAL_SPI_Receive(ICM20948_SPI, &reg_val, 1, 1000);
 8002ade:	f107 010e 	add.w	r1, r7, #14
 8002ae2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002ae6:	2201      	movs	r2, #1
 8002ae8:	4804      	ldr	r0, [pc, #16]	; (8002afc <read_single_icm20948_reg+0x54>)
 8002aea:	f004 fade 	bl	80070aa <HAL_SPI_Receive>
	cs_high();
 8002aee:	f7ff ffa9 	bl	8002a44 <cs_high>

	return reg_val;
 8002af2:	7bbb      	ldrb	r3, [r7, #14]
}
 8002af4:	4618      	mov	r0, r3
 8002af6:	3710      	adds	r7, #16
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bd80      	pop	{r7, pc}
 8002afc:	200002b4 	.word	0x200002b4

08002b00 <write_single_icm20948_reg>:

static void write_single_icm20948_reg(userbank ub, uint8_t reg, uint8_t val)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b084      	sub	sp, #16
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	4603      	mov	r3, r0
 8002b08:	71fb      	strb	r3, [r7, #7]
 8002b0a:	460b      	mov	r3, r1
 8002b0c:	71bb      	strb	r3, [r7, #6]
 8002b0e:	4613      	mov	r3, r2
 8002b10:	717b      	strb	r3, [r7, #5]
	uint8_t write_reg[2];
	write_reg[0] = WRITE | reg;
 8002b12:	79bb      	ldrb	r3, [r7, #6]
 8002b14:	733b      	strb	r3, [r7, #12]
	write_reg[1] = val;
 8002b16:	797b      	ldrb	r3, [r7, #5]
 8002b18:	737b      	strb	r3, [r7, #13]

	select_user_bank(ub);
 8002b1a:	79fb      	ldrb	r3, [r7, #7]
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	f7ff ffa9 	bl	8002a74 <select_user_bank>

	cs_low();
 8002b22:	f7ff ff9b 	bl	8002a5c <cs_low>
	HAL_SPI_Transmit(ICM20948_SPI, write_reg, 2, 1000);
 8002b26:	f107 010c 	add.w	r1, r7, #12
 8002b2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b2e:	2202      	movs	r2, #2
 8002b30:	4804      	ldr	r0, [pc, #16]	; (8002b44 <write_single_icm20948_reg+0x44>)
 8002b32:	f004 f97e 	bl	8006e32 <HAL_SPI_Transmit>
	cs_high();
 8002b36:	f7ff ff85 	bl	8002a44 <cs_high>
}
 8002b3a:	bf00      	nop
 8002b3c:	3710      	adds	r7, #16
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bd80      	pop	{r7, pc}
 8002b42:	bf00      	nop
 8002b44:	200002b4 	.word	0x200002b4

08002b48 <read_multiple_icm20948_reg>:

static uint8_t* read_multiple_icm20948_reg(userbank ub, uint8_t reg, uint8_t len)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b084      	sub	sp, #16
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	4603      	mov	r3, r0
 8002b50:	71fb      	strb	r3, [r7, #7]
 8002b52:	460b      	mov	r3, r1
 8002b54:	71bb      	strb	r3, [r7, #6]
 8002b56:	4613      	mov	r3, r2
 8002b58:	717b      	strb	r3, [r7, #5]
	uint8_t read_reg = READ | reg;
 8002b5a:	79bb      	ldrb	r3, [r7, #6]
 8002b5c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002b60:	b2db      	uxtb	r3, r3
 8002b62:	73fb      	strb	r3, [r7, #15]
	static uint8_t reg_val[6];
	select_user_bank(ub);
 8002b64:	79fb      	ldrb	r3, [r7, #7]
 8002b66:	4618      	mov	r0, r3
 8002b68:	f7ff ff84 	bl	8002a74 <select_user_bank>

	cs_low();
 8002b6c:	f7ff ff76 	bl	8002a5c <cs_low>
	HAL_SPI_Transmit(ICM20948_SPI, &read_reg, 1, 1000);
 8002b70:	f107 010f 	add.w	r1, r7, #15
 8002b74:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b78:	2201      	movs	r2, #1
 8002b7a:	4809      	ldr	r0, [pc, #36]	; (8002ba0 <read_multiple_icm20948_reg+0x58>)
 8002b7c:	f004 f959 	bl	8006e32 <HAL_SPI_Transmit>
	HAL_SPI_Receive(ICM20948_SPI, reg_val, len, 1000);
 8002b80:	797b      	ldrb	r3, [r7, #5]
 8002b82:	b29a      	uxth	r2, r3
 8002b84:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b88:	4906      	ldr	r1, [pc, #24]	; (8002ba4 <read_multiple_icm20948_reg+0x5c>)
 8002b8a:	4805      	ldr	r0, [pc, #20]	; (8002ba0 <read_multiple_icm20948_reg+0x58>)
 8002b8c:	f004 fa8d 	bl	80070aa <HAL_SPI_Receive>
	cs_high();
 8002b90:	f7ff ff58 	bl	8002a44 <cs_high>

	return reg_val;
 8002b94:	4b03      	ldr	r3, [pc, #12]	; (8002ba4 <read_multiple_icm20948_reg+0x5c>)
}
 8002b96:	4618      	mov	r0, r3
 8002b98:	3710      	adds	r7, #16
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd80      	pop	{r7, pc}
 8002b9e:	bf00      	nop
 8002ba0:	200002b4 	.word	0x200002b4
 8002ba4:	20000098 	.word	0x20000098

08002ba8 <read_single_ak09916_reg>:
	HAL_SPI_Transmit(ICM20948_SPI, val, len, 1000);
	cs_high();
}

static uint8_t read_single_ak09916_reg(uint8_t reg)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b082      	sub	sp, #8
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	4603      	mov	r3, r0
 8002bb0:	71fb      	strb	r3, [r7, #7]
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_ADDR, READ | MAG_SLAVE_ADDR);
 8002bb2:	228c      	movs	r2, #140	; 0x8c
 8002bb4:	2103      	movs	r1, #3
 8002bb6:	2030      	movs	r0, #48	; 0x30
 8002bb8:	f7ff ffa2 	bl	8002b00 <write_single_icm20948_reg>
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_REG, reg);
 8002bbc:	79fb      	ldrb	r3, [r7, #7]
 8002bbe:	461a      	mov	r2, r3
 8002bc0:	2104      	movs	r1, #4
 8002bc2:	2030      	movs	r0, #48	; 0x30
 8002bc4:	f7ff ff9c 	bl	8002b00 <write_single_icm20948_reg>
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_CTRL, 0x81);
 8002bc8:	2281      	movs	r2, #129	; 0x81
 8002bca:	2105      	movs	r1, #5
 8002bcc:	2030      	movs	r0, #48	; 0x30
 8002bce:	f7ff ff97 	bl	8002b00 <write_single_icm20948_reg>

	HAL_Delay(1);
 8002bd2:	2001      	movs	r0, #1
 8002bd4:	f002 fac6 	bl	8005164 <HAL_Delay>
	return read_single_icm20948_reg(ub_0, B0_EXT_SLV_SENS_DATA_00);
 8002bd8:	213b      	movs	r1, #59	; 0x3b
 8002bda:	2000      	movs	r0, #0
 8002bdc:	f7ff ff64 	bl	8002aa8 <read_single_icm20948_reg>
 8002be0:	4603      	mov	r3, r0
}
 8002be2:	4618      	mov	r0, r3
 8002be4:	3708      	adds	r7, #8
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bd80      	pop	{r7, pc}

08002bea <write_single_ak09916_reg>:

static void write_single_ak09916_reg(uint8_t reg, uint8_t val)
{
 8002bea:	b580      	push	{r7, lr}
 8002bec:	b082      	sub	sp, #8
 8002bee:	af00      	add	r7, sp, #0
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	460a      	mov	r2, r1
 8002bf4:	71fb      	strb	r3, [r7, #7]
 8002bf6:	4613      	mov	r3, r2
 8002bf8:	71bb      	strb	r3, [r7, #6]
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_ADDR, WRITE | MAG_SLAVE_ADDR);
 8002bfa:	220c      	movs	r2, #12
 8002bfc:	2103      	movs	r1, #3
 8002bfe:	2030      	movs	r0, #48	; 0x30
 8002c00:	f7ff ff7e 	bl	8002b00 <write_single_icm20948_reg>
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_REG, reg);
 8002c04:	79fb      	ldrb	r3, [r7, #7]
 8002c06:	461a      	mov	r2, r3
 8002c08:	2104      	movs	r1, #4
 8002c0a:	2030      	movs	r0, #48	; 0x30
 8002c0c:	f7ff ff78 	bl	8002b00 <write_single_icm20948_reg>
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_DO, val);
 8002c10:	79bb      	ldrb	r3, [r7, #6]
 8002c12:	461a      	mov	r2, r3
 8002c14:	2106      	movs	r1, #6
 8002c16:	2030      	movs	r0, #48	; 0x30
 8002c18:	f7ff ff72 	bl	8002b00 <write_single_icm20948_reg>
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_CTRL, 0x81);
 8002c1c:	2281      	movs	r2, #129	; 0x81
 8002c1e:	2105      	movs	r1, #5
 8002c20:	2030      	movs	r0, #48	; 0x30
 8002c22:	f7ff ff6d 	bl	8002b00 <write_single_icm20948_reg>
}
 8002c26:	bf00      	nop
 8002c28:	3708      	adds	r7, #8
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}

08002c2e <read_multiple_ak09916_reg>:

static uint8_t* read_multiple_ak09916_reg(uint8_t reg, uint8_t len)
{	
 8002c2e:	b580      	push	{r7, lr}
 8002c30:	b082      	sub	sp, #8
 8002c32:	af00      	add	r7, sp, #0
 8002c34:	4603      	mov	r3, r0
 8002c36:	460a      	mov	r2, r1
 8002c38:	71fb      	strb	r3, [r7, #7]
 8002c3a:	4613      	mov	r3, r2
 8002c3c:	71bb      	strb	r3, [r7, #6]
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_ADDR, READ | MAG_SLAVE_ADDR);
 8002c3e:	228c      	movs	r2, #140	; 0x8c
 8002c40:	2103      	movs	r1, #3
 8002c42:	2030      	movs	r0, #48	; 0x30
 8002c44:	f7ff ff5c 	bl	8002b00 <write_single_icm20948_reg>
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_REG, reg);
 8002c48:	79fb      	ldrb	r3, [r7, #7]
 8002c4a:	461a      	mov	r2, r3
 8002c4c:	2104      	movs	r1, #4
 8002c4e:	2030      	movs	r0, #48	; 0x30
 8002c50:	f7ff ff56 	bl	8002b00 <write_single_icm20948_reg>
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_CTRL, 0x80 | len);
 8002c54:	79bb      	ldrb	r3, [r7, #6]
 8002c56:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002c5a:	b2db      	uxtb	r3, r3
 8002c5c:	461a      	mov	r2, r3
 8002c5e:	2105      	movs	r1, #5
 8002c60:	2030      	movs	r0, #48	; 0x30
 8002c62:	f7ff ff4d 	bl	8002b00 <write_single_icm20948_reg>

	HAL_Delay(1);
 8002c66:	2001      	movs	r0, #1
 8002c68:	f002 fa7c 	bl	8005164 <HAL_Delay>
	return read_multiple_icm20948_reg(ub_0, B0_EXT_SLV_SENS_DATA_00, len);
 8002c6c:	79bb      	ldrb	r3, [r7, #6]
 8002c6e:	461a      	mov	r2, r3
 8002c70:	213b      	movs	r1, #59	; 0x3b
 8002c72:	2000      	movs	r0, #0
 8002c74:	f7ff ff68 	bl	8002b48 <read_multiple_icm20948_reg>
 8002c78:	4603      	mov	r3, r0
}
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	3708      	adds	r7, #8
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bd80      	pop	{r7, pc}
	...

08002c84 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b084      	sub	sp, #16
 8002c88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002c8a:	463b      	mov	r3, r7
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	601a      	str	r2, [r3, #0]
 8002c90:	605a      	str	r2, [r3, #4]
 8002c92:	609a      	str	r2, [r3, #8]
 8002c94:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002c96:	4b21      	ldr	r3, [pc, #132]	; (8002d1c <MX_ADC1_Init+0x98>)
 8002c98:	4a21      	ldr	r2, [pc, #132]	; (8002d20 <MX_ADC1_Init+0x9c>)
 8002c9a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002c9c:	4b1f      	ldr	r3, [pc, #124]	; (8002d1c <MX_ADC1_Init+0x98>)
 8002c9e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002ca2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002ca4:	4b1d      	ldr	r3, [pc, #116]	; (8002d1c <MX_ADC1_Init+0x98>)
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8002caa:	4b1c      	ldr	r3, [pc, #112]	; (8002d1c <MX_ADC1_Init+0x98>)
 8002cac:	2200      	movs	r2, #0
 8002cae:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002cb0:	4b1a      	ldr	r3, [pc, #104]	; (8002d1c <MX_ADC1_Init+0x98>)
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002cb6:	4b19      	ldr	r3, [pc, #100]	; (8002d1c <MX_ADC1_Init+0x98>)
 8002cb8:	2200      	movs	r2, #0
 8002cba:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002cbe:	4b17      	ldr	r3, [pc, #92]	; (8002d1c <MX_ADC1_Init+0x98>)
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002cc4:	4b15      	ldr	r3, [pc, #84]	; (8002d1c <MX_ADC1_Init+0x98>)
 8002cc6:	4a17      	ldr	r2, [pc, #92]	; (8002d24 <MX_ADC1_Init+0xa0>)
 8002cc8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002cca:	4b14      	ldr	r3, [pc, #80]	; (8002d1c <MX_ADC1_Init+0x98>)
 8002ccc:	2200      	movs	r2, #0
 8002cce:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8002cd0:	4b12      	ldr	r3, [pc, #72]	; (8002d1c <MX_ADC1_Init+0x98>)
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002cd6:	4b11      	ldr	r3, [pc, #68]	; (8002d1c <MX_ADC1_Init+0x98>)
 8002cd8:	2200      	movs	r2, #0
 8002cda:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002cde:	4b0f      	ldr	r3, [pc, #60]	; (8002d1c <MX_ADC1_Init+0x98>)
 8002ce0:	2201      	movs	r2, #1
 8002ce2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002ce4:	480d      	ldr	r0, [pc, #52]	; (8002d1c <MX_ADC1_Init+0x98>)
 8002ce6:	f002 fa61 	bl	80051ac <HAL_ADC_Init>
 8002cea:	4603      	mov	r3, r0
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d001      	beq.n	8002cf4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8002cf0:	f001 fc96 	bl	8004620 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8002cf4:	2302      	movs	r3, #2
 8002cf6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002d00:	463b      	mov	r3, r7
 8002d02:	4619      	mov	r1, r3
 8002d04:	4805      	ldr	r0, [pc, #20]	; (8002d1c <MX_ADC1_Init+0x98>)
 8002d06:	f002 fa95 	bl	8005234 <HAL_ADC_ConfigChannel>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d001      	beq.n	8002d14 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8002d10:	f001 fc86 	bl	8004620 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002d14:	bf00      	nop
 8002d16:	3710      	adds	r7, #16
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bd80      	pop	{r7, pc}
 8002d1c:	200000b8 	.word	0x200000b8
 8002d20:	40012000 	.word	0x40012000
 8002d24:	0f000001 	.word	0x0f000001

08002d28 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b08c      	sub	sp, #48	; 0x30
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d30:	f107 031c 	add.w	r3, r7, #28
 8002d34:	2200      	movs	r2, #0
 8002d36:	601a      	str	r2, [r3, #0]
 8002d38:	605a      	str	r2, [r3, #4]
 8002d3a:	609a      	str	r2, [r3, #8]
 8002d3c:	60da      	str	r2, [r3, #12]
 8002d3e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4a31      	ldr	r2, [pc, #196]	; (8002e0c <HAL_ADC_MspInit+0xe4>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d15b      	bne.n	8002e02 <HAL_ADC_MspInit+0xda>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	61bb      	str	r3, [r7, #24]
 8002d4e:	4b30      	ldr	r3, [pc, #192]	; (8002e10 <HAL_ADC_MspInit+0xe8>)
 8002d50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d52:	4a2f      	ldr	r2, [pc, #188]	; (8002e10 <HAL_ADC_MspInit+0xe8>)
 8002d54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d58:	6453      	str	r3, [r2, #68]	; 0x44
 8002d5a:	4b2d      	ldr	r3, [pc, #180]	; (8002e10 <HAL_ADC_MspInit+0xe8>)
 8002d5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d62:	61bb      	str	r3, [r7, #24]
 8002d64:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d66:	2300      	movs	r3, #0
 8002d68:	617b      	str	r3, [r7, #20]
 8002d6a:	4b29      	ldr	r3, [pc, #164]	; (8002e10 <HAL_ADC_MspInit+0xe8>)
 8002d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d6e:	4a28      	ldr	r2, [pc, #160]	; (8002e10 <HAL_ADC_MspInit+0xe8>)
 8002d70:	f043 0304 	orr.w	r3, r3, #4
 8002d74:	6313      	str	r3, [r2, #48]	; 0x30
 8002d76:	4b26      	ldr	r3, [pc, #152]	; (8002e10 <HAL_ADC_MspInit+0xe8>)
 8002d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d7a:	f003 0304 	and.w	r3, r3, #4
 8002d7e:	617b      	str	r3, [r7, #20]
 8002d80:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d82:	2300      	movs	r3, #0
 8002d84:	613b      	str	r3, [r7, #16]
 8002d86:	4b22      	ldr	r3, [pc, #136]	; (8002e10 <HAL_ADC_MspInit+0xe8>)
 8002d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d8a:	4a21      	ldr	r2, [pc, #132]	; (8002e10 <HAL_ADC_MspInit+0xe8>)
 8002d8c:	f043 0301 	orr.w	r3, r3, #1
 8002d90:	6313      	str	r3, [r2, #48]	; 0x30
 8002d92:	4b1f      	ldr	r3, [pc, #124]	; (8002e10 <HAL_ADC_MspInit+0xe8>)
 8002d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d96:	f003 0301 	and.w	r3, r3, #1
 8002d9a:	613b      	str	r3, [r7, #16]
 8002d9c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d9e:	2300      	movs	r3, #0
 8002da0:	60fb      	str	r3, [r7, #12]
 8002da2:	4b1b      	ldr	r3, [pc, #108]	; (8002e10 <HAL_ADC_MspInit+0xe8>)
 8002da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002da6:	4a1a      	ldr	r2, [pc, #104]	; (8002e10 <HAL_ADC_MspInit+0xe8>)
 8002da8:	f043 0302 	orr.w	r3, r3, #2
 8002dac:	6313      	str	r3, [r2, #48]	; 0x30
 8002dae:	4b18      	ldr	r3, [pc, #96]	; (8002e10 <HAL_ADC_MspInit+0xe8>)
 8002db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002db2:	f003 0302 	and.w	r3, r3, #2
 8002db6:	60fb      	str	r3, [r7, #12]
 8002db8:	68fb      	ldr	r3, [r7, #12]
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = ADC_AMP_36V_Pin|ADC_VOLT_BAT_Pin|ADC_VOLT_PWR_ST_Pin;
 8002dba:	230d      	movs	r3, #13
 8002dbc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002dbe:	2303      	movs	r3, #3
 8002dc0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002dc6:	f107 031c 	add.w	r3, r7, #28
 8002dca:	4619      	mov	r1, r3
 8002dcc:	4811      	ldr	r0, [pc, #68]	; (8002e14 <HAL_ADC_MspInit+0xec>)
 8002dce:	f003 f963 	bl	8006098 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC_IK_CENTER_Pin|ADC_IK_BACK_LEFT_Pin|ADC_IK_BACK_RIGHT_Pin|ADC_IK_FRONT_LEFT_Pin
 8002dd2:	237c      	movs	r3, #124	; 0x7c
 8002dd4:	61fb      	str	r3, [r7, #28]
                          |ADC_IK_FRONT_RIGHT_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002dd6:	2303      	movs	r3, #3
 8002dd8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dda:	2300      	movs	r3, #0
 8002ddc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dde:	f107 031c 	add.w	r3, r7, #28
 8002de2:	4619      	mov	r1, r3
 8002de4:	480c      	ldr	r0, [pc, #48]	; (8002e18 <HAL_ADC_MspInit+0xf0>)
 8002de6:	f003 f957 	bl	8006098 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC_AMP_5V_Pin|ADC_AMP_12V_Pin;
 8002dea:	2303      	movs	r3, #3
 8002dec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002dee:	2303      	movs	r3, #3
 8002df0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002df2:	2300      	movs	r3, #0
 8002df4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002df6:	f107 031c 	add.w	r3, r7, #28
 8002dfa:	4619      	mov	r1, r3
 8002dfc:	4807      	ldr	r0, [pc, #28]	; (8002e1c <HAL_ADC_MspInit+0xf4>)
 8002dfe:	f003 f94b 	bl	8006098 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8002e02:	bf00      	nop
 8002e04:	3730      	adds	r7, #48	; 0x30
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bd80      	pop	{r7, pc}
 8002e0a:	bf00      	nop
 8002e0c:	40012000 	.word	0x40012000
 8002e10:	40023800 	.word	0x40023800
 8002e14:	40020800 	.word	0x40020800
 8002e18:	40020000 	.word	0x40020000
 8002e1c:	40020400 	.word	0x40020400

08002e20 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b082      	sub	sp, #8
 8002e24:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002e26:	2300      	movs	r3, #0
 8002e28:	607b      	str	r3, [r7, #4]
 8002e2a:	4b18      	ldr	r3, [pc, #96]	; (8002e8c <MX_DMA_Init+0x6c>)
 8002e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e2e:	4a17      	ldr	r2, [pc, #92]	; (8002e8c <MX_DMA_Init+0x6c>)
 8002e30:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002e34:	6313      	str	r3, [r2, #48]	; 0x30
 8002e36:	4b15      	ldr	r3, [pc, #84]	; (8002e8c <MX_DMA_Init+0x6c>)
 8002e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e3a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e3e:	607b      	str	r3, [r7, #4]
 8002e40:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8002e42:	2200      	movs	r2, #0
 8002e44:	2100      	movs	r1, #0
 8002e46:	200d      	movs	r0, #13
 8002e48:	f002 fced 	bl	8005826 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8002e4c:	200d      	movs	r0, #13
 8002e4e:	f002 fd06 	bl	800585e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8002e52:	2200      	movs	r2, #0
 8002e54:	2100      	movs	r1, #0
 8002e56:	200f      	movs	r0, #15
 8002e58:	f002 fce5 	bl	8005826 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8002e5c:	200f      	movs	r0, #15
 8002e5e:	f002 fcfe 	bl	800585e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8002e62:	2200      	movs	r2, #0
 8002e64:	2100      	movs	r1, #0
 8002e66:	2010      	movs	r0, #16
 8002e68:	f002 fcdd 	bl	8005826 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8002e6c:	2010      	movs	r0, #16
 8002e6e:	f002 fcf6 	bl	800585e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8002e72:	2200      	movs	r2, #0
 8002e74:	2100      	movs	r1, #0
 8002e76:	2011      	movs	r0, #17
 8002e78:	f002 fcd5 	bl	8005826 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8002e7c:	2011      	movs	r0, #17
 8002e7e:	f002 fcee 	bl	800585e <HAL_NVIC_EnableIRQ>

}
 8002e82:	bf00      	nop
 8002e84:	3708      	adds	r7, #8
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bd80      	pop	{r7, pc}
 8002e8a:	bf00      	nop
 8002e8c:	40023800 	.word	0x40023800

08002e90 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b08c      	sub	sp, #48	; 0x30
 8002e94:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e96:	f107 031c 	add.w	r3, r7, #28
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	601a      	str	r2, [r3, #0]
 8002e9e:	605a      	str	r2, [r3, #4]
 8002ea0:	609a      	str	r2, [r3, #8]
 8002ea2:	60da      	str	r2, [r3, #12]
 8002ea4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	61bb      	str	r3, [r7, #24]
 8002eaa:	4b48      	ldr	r3, [pc, #288]	; (8002fcc <MX_GPIO_Init+0x13c>)
 8002eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eae:	4a47      	ldr	r2, [pc, #284]	; (8002fcc <MX_GPIO_Init+0x13c>)
 8002eb0:	f043 0310 	orr.w	r3, r3, #16
 8002eb4:	6313      	str	r3, [r2, #48]	; 0x30
 8002eb6:	4b45      	ldr	r3, [pc, #276]	; (8002fcc <MX_GPIO_Init+0x13c>)
 8002eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eba:	f003 0310 	and.w	r3, r3, #16
 8002ebe:	61bb      	str	r3, [r7, #24]
 8002ec0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	617b      	str	r3, [r7, #20]
 8002ec6:	4b41      	ldr	r3, [pc, #260]	; (8002fcc <MX_GPIO_Init+0x13c>)
 8002ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eca:	4a40      	ldr	r2, [pc, #256]	; (8002fcc <MX_GPIO_Init+0x13c>)
 8002ecc:	f043 0304 	orr.w	r3, r3, #4
 8002ed0:	6313      	str	r3, [r2, #48]	; 0x30
 8002ed2:	4b3e      	ldr	r3, [pc, #248]	; (8002fcc <MX_GPIO_Init+0x13c>)
 8002ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ed6:	f003 0304 	and.w	r3, r3, #4
 8002eda:	617b      	str	r3, [r7, #20]
 8002edc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002ede:	2300      	movs	r3, #0
 8002ee0:	613b      	str	r3, [r7, #16]
 8002ee2:	4b3a      	ldr	r3, [pc, #232]	; (8002fcc <MX_GPIO_Init+0x13c>)
 8002ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ee6:	4a39      	ldr	r2, [pc, #228]	; (8002fcc <MX_GPIO_Init+0x13c>)
 8002ee8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002eec:	6313      	str	r3, [r2, #48]	; 0x30
 8002eee:	4b37      	ldr	r3, [pc, #220]	; (8002fcc <MX_GPIO_Init+0x13c>)
 8002ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ef2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ef6:	613b      	str	r3, [r7, #16]
 8002ef8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002efa:	2300      	movs	r3, #0
 8002efc:	60fb      	str	r3, [r7, #12]
 8002efe:	4b33      	ldr	r3, [pc, #204]	; (8002fcc <MX_GPIO_Init+0x13c>)
 8002f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f02:	4a32      	ldr	r2, [pc, #200]	; (8002fcc <MX_GPIO_Init+0x13c>)
 8002f04:	f043 0301 	orr.w	r3, r3, #1
 8002f08:	6313      	str	r3, [r2, #48]	; 0x30
 8002f0a:	4b30      	ldr	r3, [pc, #192]	; (8002fcc <MX_GPIO_Init+0x13c>)
 8002f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f0e:	f003 0301 	and.w	r3, r3, #1
 8002f12:	60fb      	str	r3, [r7, #12]
 8002f14:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f16:	2300      	movs	r3, #0
 8002f18:	60bb      	str	r3, [r7, #8]
 8002f1a:	4b2c      	ldr	r3, [pc, #176]	; (8002fcc <MX_GPIO_Init+0x13c>)
 8002f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f1e:	4a2b      	ldr	r2, [pc, #172]	; (8002fcc <MX_GPIO_Init+0x13c>)
 8002f20:	f043 0302 	orr.w	r3, r3, #2
 8002f24:	6313      	str	r3, [r2, #48]	; 0x30
 8002f26:	4b29      	ldr	r3, [pc, #164]	; (8002fcc <MX_GPIO_Init+0x13c>)
 8002f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f2a:	f003 0302 	and.w	r3, r3, #2
 8002f2e:	60bb      	str	r3, [r7, #8]
 8002f30:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002f32:	2300      	movs	r3, #0
 8002f34:	607b      	str	r3, [r7, #4]
 8002f36:	4b25      	ldr	r3, [pc, #148]	; (8002fcc <MX_GPIO_Init+0x13c>)
 8002f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f3a:	4a24      	ldr	r2, [pc, #144]	; (8002fcc <MX_GPIO_Init+0x13c>)
 8002f3c:	f043 0308 	orr.w	r3, r3, #8
 8002f40:	6313      	str	r3, [r2, #48]	; 0x30
 8002f42:	4b22      	ldr	r3, [pc, #136]	; (8002fcc <MX_GPIO_Init+0x13c>)
 8002f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f46:	f003 0308 	and.w	r3, r3, #8
 8002f4a:	607b      	str	r3, [r7, #4]
 8002f4c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ICM20948_CS_GPIO_Port, ICM20948_CS_Pin, GPIO_PIN_RESET);
 8002f4e:	2200      	movs	r2, #0
 8002f50:	2104      	movs	r1, #4
 8002f52:	481f      	ldr	r0, [pc, #124]	; (8002fd0 <MX_GPIO_Init+0x140>)
 8002f54:	f003 fa3c 	bl	80063d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DRIVER_STEP_Pin|DRIVER_DIR_Pin, GPIO_PIN_RESET);
 8002f58:	2200      	movs	r2, #0
 8002f5a:	2130      	movs	r1, #48	; 0x30
 8002f5c:	481d      	ldr	r0, [pc, #116]	; (8002fd4 <MX_GPIO_Init+0x144>)
 8002f5e:	f003 fa37 	bl	80063d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED_0_Pin|LED_1_Pin|LED_2_Pin|LED_3_Pin, GPIO_PIN_RESET);
 8002f62:	2200      	movs	r2, #0
 8002f64:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8002f68:	481b      	ldr	r0, [pc, #108]	; (8002fd8 <MX_GPIO_Init+0x148>)
 8002f6a:	f003 fa31 	bl	80063d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ICM20948_CS_Pin;
 8002f6e:	2304      	movs	r3, #4
 8002f70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f72:	2301      	movs	r3, #1
 8002f74:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f76:	2300      	movs	r3, #0
 8002f78:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(ICM20948_CS_GPIO_Port, &GPIO_InitStruct);
 8002f7e:	f107 031c 	add.w	r3, r7, #28
 8002f82:	4619      	mov	r1, r3
 8002f84:	4812      	ldr	r0, [pc, #72]	; (8002fd0 <MX_GPIO_Init+0x140>)
 8002f86:	f003 f887 	bl	8006098 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = DRIVER_STEP_Pin|DRIVER_DIR_Pin;
 8002f8a:	2330      	movs	r3, #48	; 0x30
 8002f8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f92:	2300      	movs	r3, #0
 8002f94:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f96:	2300      	movs	r3, #0
 8002f98:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f9a:	f107 031c 	add.w	r3, r7, #28
 8002f9e:	4619      	mov	r1, r3
 8002fa0:	480c      	ldr	r0, [pc, #48]	; (8002fd4 <MX_GPIO_Init+0x144>)
 8002fa2:	f003 f879 	bl	8006098 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = LED_0_Pin|LED_1_Pin|LED_2_Pin|LED_3_Pin;
 8002fa6:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8002faa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002fac:	2301      	movs	r3, #1
 8002fae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002fb8:	f107 031c 	add.w	r3, r7, #28
 8002fbc:	4619      	mov	r1, r3
 8002fbe:	4806      	ldr	r0, [pc, #24]	; (8002fd8 <MX_GPIO_Init+0x148>)
 8002fc0:	f003 f86a 	bl	8006098 <HAL_GPIO_Init>

}
 8002fc4:	bf00      	nop
 8002fc6:	3730      	adds	r7, #48	; 0x30
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	bd80      	pop	{r7, pc}
 8002fcc:	40023800 	.word	0x40023800
 8002fd0:	40021000 	.word	0x40021000
 8002fd4:	40020800 	.word	0x40020800
 8002fd8:	40020c00 	.word	0x40020c00

08002fdc <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b084      	sub	sp, #16
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef Res;

	if (UartHandle->Instance == UART4){ // Jetson commutation
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4a71      	ldr	r2, [pc, #452]	; (80031b0 <HAL_UART_RxCpltCallback+0x1d4>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d16b      	bne.n	80030c6 <HAL_UART_RxCpltCallback+0xea>
		if (USART1ReceiveState == 0){
 8002fee:	4b71      	ldr	r3, [pc, #452]	; (80031b4 <HAL_UART_RxCpltCallback+0x1d8>)
 8002ff0:	781b      	ldrb	r3, [r3, #0]
 8002ff2:	b2db      	uxtb	r3, r3
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d11f      	bne.n	8003038 <HAL_UART_RxCpltCallback+0x5c>
			if ((SerialOnBoardRequest.CR != 13) || (SerialOnBoardRequest.LF != 10)){
 8002ff8:	4b6f      	ldr	r3, [pc, #444]	; (80031b8 <HAL_UART_RxCpltCallback+0x1dc>)
 8002ffa:	7a1b      	ldrb	r3, [r3, #8]
 8002ffc:	2b0d      	cmp	r3, #13
 8002ffe:	d103      	bne.n	8003008 <HAL_UART_RxCpltCallback+0x2c>
 8003000:	4b6d      	ldr	r3, [pc, #436]	; (80031b8 <HAL_UART_RxCpltCallback+0x1dc>)
 8003002:	7a5b      	ldrb	r3, [r3, #9]
 8003004:	2b0a      	cmp	r3, #10
 8003006:	d00c      	beq.n	8003022 <HAL_UART_RxCpltCallback+0x46>
				Res = HAL_UART_Receive_DMA(&huart4, LostByte, 1);
 8003008:	4b6c      	ldr	r3, [pc, #432]	; (80031bc <HAL_UART_RxCpltCallback+0x1e0>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	2201      	movs	r2, #1
 800300e:	4619      	mov	r1, r3
 8003010:	486b      	ldr	r0, [pc, #428]	; (80031c0 <HAL_UART_RxCpltCallback+0x1e4>)
 8003012:	f005 fa91 	bl	8008538 <HAL_UART_Receive_DMA>
 8003016:	4603      	mov	r3, r0
 8003018:	73fb      	strb	r3, [r7, #15]
				USART1ReceiveState = 1;
 800301a:	4b66      	ldr	r3, [pc, #408]	; (80031b4 <HAL_UART_RxCpltCallback+0x1d8>)
 800301c:	2201      	movs	r2, #1
 800301e:	701a      	strb	r2, [r3, #0]
 8003020:	e042      	b.n	80030a8 <HAL_UART_RxCpltCallback+0xcc>
			}
			else{
 				USART1ReceiveState = 10;
 8003022:	4b64      	ldr	r3, [pc, #400]	; (80031b4 <HAL_UART_RxCpltCallback+0x1d8>)
 8003024:	220a      	movs	r2, #10
 8003026:	701a      	strb	r2, [r3, #0]
				Res = HAL_UART_Receive_DMA(&huart4, (uint8_t*)SerialOnBoardRequest.Buffer, ON_BOARD_CONTROL_REQUEST_SIZE);
 8003028:	220a      	movs	r2, #10
 800302a:	4963      	ldr	r1, [pc, #396]	; (80031b8 <HAL_UART_RxCpltCallback+0x1dc>)
 800302c:	4864      	ldr	r0, [pc, #400]	; (80031c0 <HAL_UART_RxCpltCallback+0x1e4>)
 800302e:	f005 fa83 	bl	8008538 <HAL_UART_Receive_DMA>
 8003032:	4603      	mov	r3, r0
 8003034:	73fb      	strb	r3, [r7, #15]
 8003036:	e037      	b.n	80030a8 <HAL_UART_RxCpltCallback+0xcc>
			}
		}
		else{
			if(USART1ReceiveState == 1){
 8003038:	4b5e      	ldr	r3, [pc, #376]	; (80031b4 <HAL_UART_RxCpltCallback+0x1d8>)
 800303a:	781b      	ldrb	r3, [r3, #0]
 800303c:	b2db      	uxtb	r3, r3
 800303e:	2b01      	cmp	r3, #1
 8003040:	d111      	bne.n	8003066 <HAL_UART_RxCpltCallback+0x8a>
				if (LostByte[0] == 13){
 8003042:	4b5e      	ldr	r3, [pc, #376]	; (80031bc <HAL_UART_RxCpltCallback+0x1e0>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	781b      	ldrb	r3, [r3, #0]
 8003048:	2b0d      	cmp	r3, #13
 800304a:	d102      	bne.n	8003052 <HAL_UART_RxCpltCallback+0x76>
					USART1ReceiveState = 2;
 800304c:	4b59      	ldr	r3, [pc, #356]	; (80031b4 <HAL_UART_RxCpltCallback+0x1d8>)
 800304e:	2202      	movs	r2, #2
 8003050:	701a      	strb	r2, [r3, #0]
				}
				Res = HAL_UART_Receive_DMA(&huart4, (uint8_t*)LostByte, 1);
 8003052:	4b5a      	ldr	r3, [pc, #360]	; (80031bc <HAL_UART_RxCpltCallback+0x1e0>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	2201      	movs	r2, #1
 8003058:	4619      	mov	r1, r3
 800305a:	4859      	ldr	r0, [pc, #356]	; (80031c0 <HAL_UART_RxCpltCallback+0x1e4>)
 800305c:	f005 fa6c 	bl	8008538 <HAL_UART_Receive_DMA>
 8003060:	4603      	mov	r3, r0
 8003062:	73fb      	strb	r3, [r7, #15]
 8003064:	e020      	b.n	80030a8 <HAL_UART_RxCpltCallback+0xcc>
			}
			else{
				if (USART1ReceiveState == 2){
 8003066:	4b53      	ldr	r3, [pc, #332]	; (80031b4 <HAL_UART_RxCpltCallback+0x1d8>)
 8003068:	781b      	ldrb	r3, [r3, #0]
 800306a:	b2db      	uxtb	r3, r3
 800306c:	2b02      	cmp	r3, #2
 800306e:	d11b      	bne.n	80030a8 <HAL_UART_RxCpltCallback+0xcc>
					if (LostByte[0] == 10){
 8003070:	4b52      	ldr	r3, [pc, #328]	; (80031bc <HAL_UART_RxCpltCallback+0x1e0>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	781b      	ldrb	r3, [r3, #0]
 8003076:	2b0a      	cmp	r3, #10
 8003078:	d10a      	bne.n	8003090 <HAL_UART_RxCpltCallback+0xb4>
						USART1ReceiveState = 0;
 800307a:	4b4e      	ldr	r3, [pc, #312]	; (80031b4 <HAL_UART_RxCpltCallback+0x1d8>)
 800307c:	2200      	movs	r2, #0
 800307e:	701a      	strb	r2, [r3, #0]
						Res = HAL_UART_Receive_DMA(&huart4, (uint8_t*)SerialOnBoardRequest.Buffer, ON_BOARD_CONTROL_REQUEST_SIZE);
 8003080:	220a      	movs	r2, #10
 8003082:	494d      	ldr	r1, [pc, #308]	; (80031b8 <HAL_UART_RxCpltCallback+0x1dc>)
 8003084:	484e      	ldr	r0, [pc, #312]	; (80031c0 <HAL_UART_RxCpltCallback+0x1e4>)
 8003086:	f005 fa57 	bl	8008538 <HAL_UART_Receive_DMA>
 800308a:	4603      	mov	r3, r0
 800308c:	73fb      	strb	r3, [r7, #15]
 800308e:	e00b      	b.n	80030a8 <HAL_UART_RxCpltCallback+0xcc>
					}
					else{
						USART1ReceiveState = 1;
 8003090:	4b48      	ldr	r3, [pc, #288]	; (80031b4 <HAL_UART_RxCpltCallback+0x1d8>)
 8003092:	2201      	movs	r2, #1
 8003094:	701a      	strb	r2, [r3, #0]
						Res = HAL_UART_Receive_DMA(&huart4, (uint8_t*)LostByte, 1);
 8003096:	4b49      	ldr	r3, [pc, #292]	; (80031bc <HAL_UART_RxCpltCallback+0x1e0>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	2201      	movs	r2, #1
 800309c:	4619      	mov	r1, r3
 800309e:	4848      	ldr	r0, [pc, #288]	; (80031c0 <HAL_UART_RxCpltCallback+0x1e4>)
 80030a0:	f005 fa4a 	bl	8008538 <HAL_UART_Receive_DMA>
 80030a4:	4603      	mov	r3, r0
 80030a6:	73fb      	strb	r3, [r7, #15]
					}
				}
			}
		}
		if (Res != HAL_OK)
 80030a8:	7bfb      	ldrb	r3, [r7, #15]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d00b      	beq.n	80030c6 <HAL_UART_RxCpltCallback+0xea>
		{
			MX_UART4_Init();
 80030ae:	f001 fe0d 	bl	8004ccc <MX_UART4_Init>
			USART1ReceiveState = 0;
 80030b2:	4b40      	ldr	r3, [pc, #256]	; (80031b4 <HAL_UART_RxCpltCallback+0x1d8>)
 80030b4:	2200      	movs	r2, #0
 80030b6:	701a      	strb	r2, [r3, #0]
			Res = HAL_UART_Receive_DMA(&huart4, (uint8_t*)SerialOnBoardRequest.Buffer, ON_BOARD_CONTROL_REQUEST_SIZE);
 80030b8:	220a      	movs	r2, #10
 80030ba:	493f      	ldr	r1, [pc, #252]	; (80031b8 <HAL_UART_RxCpltCallback+0x1dc>)
 80030bc:	4840      	ldr	r0, [pc, #256]	; (80031c0 <HAL_UART_RxCpltCallback+0x1e4>)
 80030be:	f005 fa3b 	bl	8008538 <HAL_UART_Receive_DMA>
 80030c2:	4603      	mov	r3, r0
 80030c4:	73fb      	strb	r3, [r7, #15]
		}
	}

	if (UartHandle->Instance == USART2)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4a3e      	ldr	r2, [pc, #248]	; (80031c4 <HAL_UART_RxCpltCallback+0x1e8>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d16b      	bne.n	80031a8 <HAL_UART_RxCpltCallback+0x1cc>
	{
		if (USART2ReceiveState == 0)
 80030d0:	4b3d      	ldr	r3, [pc, #244]	; (80031c8 <HAL_UART_RxCpltCallback+0x1ec>)
 80030d2:	781b      	ldrb	r3, [r3, #0]
 80030d4:	b2db      	uxtb	r3, r3
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d11f      	bne.n	800311a <HAL_UART_RxCpltCallback+0x13e>
		{
			if ((SerialControlWheelsResponce.CR != 13) || (SerialControlWheelsResponce.LF != 10))
 80030da:	4b3c      	ldr	r3, [pc, #240]	; (80031cc <HAL_UART_RxCpltCallback+0x1f0>)
 80030dc:	7b9b      	ldrb	r3, [r3, #14]
 80030de:	2b0d      	cmp	r3, #13
 80030e0:	d103      	bne.n	80030ea <HAL_UART_RxCpltCallback+0x10e>
 80030e2:	4b3a      	ldr	r3, [pc, #232]	; (80031cc <HAL_UART_RxCpltCallback+0x1f0>)
 80030e4:	7bdb      	ldrb	r3, [r3, #15]
 80030e6:	2b0a      	cmp	r3, #10
 80030e8:	d00c      	beq.n	8003104 <HAL_UART_RxCpltCallback+0x128>
			{
				Res = HAL_UART_Receive_DMA(&huart2, LostByte, 1);
 80030ea:	4b34      	ldr	r3, [pc, #208]	; (80031bc <HAL_UART_RxCpltCallback+0x1e0>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	2201      	movs	r2, #1
 80030f0:	4619      	mov	r1, r3
 80030f2:	4837      	ldr	r0, [pc, #220]	; (80031d0 <HAL_UART_RxCpltCallback+0x1f4>)
 80030f4:	f005 fa20 	bl	8008538 <HAL_UART_Receive_DMA>
 80030f8:	4603      	mov	r3, r0
 80030fa:	73fb      	strb	r3, [r7, #15]
				USART2ReceiveState = 1;
 80030fc:	4b32      	ldr	r3, [pc, #200]	; (80031c8 <HAL_UART_RxCpltCallback+0x1ec>)
 80030fe:	2201      	movs	r2, #1
 8003100:	701a      	strb	r2, [r3, #0]
 8003102:	e042      	b.n	800318a <HAL_UART_RxCpltCallback+0x1ae>
			}
			else
			{
				USART2ReceiveState = 10;
 8003104:	4b30      	ldr	r3, [pc, #192]	; (80031c8 <HAL_UART_RxCpltCallback+0x1ec>)
 8003106:	220a      	movs	r2, #10
 8003108:	701a      	strb	r2, [r3, #0]
				Res = HAL_UART_Receive_DMA(&huart2, (uint8_t*)SerialControlWheelsResponce.Buffer, WHEELS_RESPONCE_SIZE);
 800310a:	2210      	movs	r2, #16
 800310c:	492f      	ldr	r1, [pc, #188]	; (80031cc <HAL_UART_RxCpltCallback+0x1f0>)
 800310e:	4830      	ldr	r0, [pc, #192]	; (80031d0 <HAL_UART_RxCpltCallback+0x1f4>)
 8003110:	f005 fa12 	bl	8008538 <HAL_UART_Receive_DMA>
 8003114:	4603      	mov	r3, r0
 8003116:	73fb      	strb	r3, [r7, #15]
 8003118:	e037      	b.n	800318a <HAL_UART_RxCpltCallback+0x1ae>
			}
		}
		else
		{
			if(USART2ReceiveState == 1)
 800311a:	4b2b      	ldr	r3, [pc, #172]	; (80031c8 <HAL_UART_RxCpltCallback+0x1ec>)
 800311c:	781b      	ldrb	r3, [r3, #0]
 800311e:	b2db      	uxtb	r3, r3
 8003120:	2b01      	cmp	r3, #1
 8003122:	d111      	bne.n	8003148 <HAL_UART_RxCpltCallback+0x16c>
			{
				if (LostByte[0] == 13)
 8003124:	4b25      	ldr	r3, [pc, #148]	; (80031bc <HAL_UART_RxCpltCallback+0x1e0>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	781b      	ldrb	r3, [r3, #0]
 800312a:	2b0d      	cmp	r3, #13
 800312c:	d102      	bne.n	8003134 <HAL_UART_RxCpltCallback+0x158>
				{
					USART2ReceiveState = 2;
 800312e:	4b26      	ldr	r3, [pc, #152]	; (80031c8 <HAL_UART_RxCpltCallback+0x1ec>)
 8003130:	2202      	movs	r2, #2
 8003132:	701a      	strb	r2, [r3, #0]
				}
				Res = HAL_UART_Receive_DMA(&huart2, (uint8_t*)LostByte, 1);
 8003134:	4b21      	ldr	r3, [pc, #132]	; (80031bc <HAL_UART_RxCpltCallback+0x1e0>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	2201      	movs	r2, #1
 800313a:	4619      	mov	r1, r3
 800313c:	4824      	ldr	r0, [pc, #144]	; (80031d0 <HAL_UART_RxCpltCallback+0x1f4>)
 800313e:	f005 f9fb 	bl	8008538 <HAL_UART_Receive_DMA>
 8003142:	4603      	mov	r3, r0
 8003144:	73fb      	strb	r3, [r7, #15]
 8003146:	e020      	b.n	800318a <HAL_UART_RxCpltCallback+0x1ae>
			}
			else
			{
				if (USART2ReceiveState == 2)
 8003148:	4b1f      	ldr	r3, [pc, #124]	; (80031c8 <HAL_UART_RxCpltCallback+0x1ec>)
 800314a:	781b      	ldrb	r3, [r3, #0]
 800314c:	b2db      	uxtb	r3, r3
 800314e:	2b02      	cmp	r3, #2
 8003150:	d11b      	bne.n	800318a <HAL_UART_RxCpltCallback+0x1ae>
				{
					if (LostByte[0] == 10)
 8003152:	4b1a      	ldr	r3, [pc, #104]	; (80031bc <HAL_UART_RxCpltCallback+0x1e0>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	781b      	ldrb	r3, [r3, #0]
 8003158:	2b0a      	cmp	r3, #10
 800315a:	d10a      	bne.n	8003172 <HAL_UART_RxCpltCallback+0x196>
					{
						USART2ReceiveState = 0;
 800315c:	4b1a      	ldr	r3, [pc, #104]	; (80031c8 <HAL_UART_RxCpltCallback+0x1ec>)
 800315e:	2200      	movs	r2, #0
 8003160:	701a      	strb	r2, [r3, #0]
						Res = HAL_UART_Receive_DMA(&huart2, (uint8_t*)SerialControlWheelsResponce.Buffer, WHEELS_RESPONCE_SIZE);
 8003162:	2210      	movs	r2, #16
 8003164:	4919      	ldr	r1, [pc, #100]	; (80031cc <HAL_UART_RxCpltCallback+0x1f0>)
 8003166:	481a      	ldr	r0, [pc, #104]	; (80031d0 <HAL_UART_RxCpltCallback+0x1f4>)
 8003168:	f005 f9e6 	bl	8008538 <HAL_UART_Receive_DMA>
 800316c:	4603      	mov	r3, r0
 800316e:	73fb      	strb	r3, [r7, #15]
 8003170:	e00b      	b.n	800318a <HAL_UART_RxCpltCallback+0x1ae>
					}
					else
					{
						USART2ReceiveState = 1;
 8003172:	4b15      	ldr	r3, [pc, #84]	; (80031c8 <HAL_UART_RxCpltCallback+0x1ec>)
 8003174:	2201      	movs	r2, #1
 8003176:	701a      	strb	r2, [r3, #0]
						Res = HAL_UART_Receive_DMA(&huart2, (uint8_t*)LostByte, 1);
 8003178:	4b10      	ldr	r3, [pc, #64]	; (80031bc <HAL_UART_RxCpltCallback+0x1e0>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	2201      	movs	r2, #1
 800317e:	4619      	mov	r1, r3
 8003180:	4813      	ldr	r0, [pc, #76]	; (80031d0 <HAL_UART_RxCpltCallback+0x1f4>)
 8003182:	f005 f9d9 	bl	8008538 <HAL_UART_Receive_DMA>
 8003186:	4603      	mov	r3, r0
 8003188:	73fb      	strb	r3, [r7, #15]
					}
				}
			}
		}

		if (Res != HAL_OK)
 800318a:	7bfb      	ldrb	r3, [r7, #15]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d00b      	beq.n	80031a8 <HAL_UART_RxCpltCallback+0x1cc>
		{
			MX_USART2_UART_Init();
 8003190:	f001 fdc6 	bl	8004d20 <MX_USART2_UART_Init>
			USART2ReceiveState = 0;
 8003194:	4b0c      	ldr	r3, [pc, #48]	; (80031c8 <HAL_UART_RxCpltCallback+0x1ec>)
 8003196:	2200      	movs	r2, #0
 8003198:	701a      	strb	r2, [r3, #0]
			Res = HAL_UART_Receive_DMA(&huart2, (uint8_t*)SerialControlWheelsResponce.Buffer, WHEELS_RESPONCE_SIZE);
 800319a:	2210      	movs	r2, #16
 800319c:	490b      	ldr	r1, [pc, #44]	; (80031cc <HAL_UART_RxCpltCallback+0x1f0>)
 800319e:	480c      	ldr	r0, [pc, #48]	; (80031d0 <HAL_UART_RxCpltCallback+0x1f4>)
 80031a0:	f005 f9ca 	bl	8008538 <HAL_UART_Receive_DMA>
 80031a4:	4603      	mov	r3, r0
 80031a6:	73fb      	strb	r3, [r7, #15]
		}
	}
}
 80031a8:	bf00      	nop
 80031aa:	3710      	adds	r7, #16
 80031ac:	46bd      	mov	sp, r7
 80031ae:	bd80      	pop	{r7, pc}
 80031b0:	40004c00 	.word	0x40004c00
 80031b4:	2000009e 	.word	0x2000009e
 80031b8:	20000208 	.word	0x20000208
 80031bc:	200002a4 	.word	0x200002a4
 80031c0:	2000054c 	.word	0x2000054c
 80031c4:	40004400 	.word	0x40004400
 80031c8:	2000009f 	.word	0x2000009f
 80031cc:	20000134 	.word	0x20000134
 80031d0:	20000590 	.word	0x20000590

080031d4 <HallActualize>:
int HallActualize(float NewStep, float LastStep, float difference)
{
 80031d4:	b480      	push	{r7}
 80031d6:	b087      	sub	sp, #28
 80031d8:	af00      	add	r7, sp, #0
 80031da:	ed87 0a03 	vstr	s0, [r7, #12]
 80031de:	edc7 0a02 	vstr	s1, [r7, #8]
 80031e2:	ed87 1a01 	vstr	s2, [r7, #4]
	float MIN_VAL = LastStep - difference;
 80031e6:	ed97 7a02 	vldr	s14, [r7, #8]
 80031ea:	edd7 7a01 	vldr	s15, [r7, #4]
 80031ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80031f2:	edc7 7a05 	vstr	s15, [r7, #20]
	float MAX_VAL = LastStep + difference;
 80031f6:	ed97 7a02 	vldr	s14, [r7, #8]
 80031fa:	edd7 7a01 	vldr	s15, [r7, #4]
 80031fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003202:	edc7 7a04 	vstr	s15, [r7, #16]

	if ((NewStep < MAX_VAL) && (NewStep > MIN_VAL))
 8003206:	ed97 7a03 	vldr	s14, [r7, #12]
 800320a:	edd7 7a04 	vldr	s15, [r7, #16]
 800320e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003212:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003216:	d50a      	bpl.n	800322e <HallActualize+0x5a>
 8003218:	ed97 7a03 	vldr	s14, [r7, #12]
 800321c:	edd7 7a05 	vldr	s15, [r7, #20]
 8003220:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003224:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003228:	dd01      	ble.n	800322e <HallActualize+0x5a>
	{
		return 1;
 800322a:	2301      	movs	r3, #1
 800322c:	e000      	b.n	8003230 <HallActualize+0x5c>
	}
	return 0;
 800322e:	2300      	movs	r3, #0
}
 8003230:	4618      	mov	r0, r3
 8003232:	371c      	adds	r7, #28
 8003234:	46bd      	mov	sp, r7
 8003236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323a:	4770      	bx	lr

0800323c <IMU_INIT>:
void IMU_INIT()
{
 800323c:	b580      	push	{r7, lr}
 800323e:	af00      	add	r7, sp, #0
	gyroscopeSensitivity.axis.x = 1.0f;
 8003240:	4b1a      	ldr	r3, [pc, #104]	; (80032ac <IMU_INIT+0x70>)
 8003242:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003246:	601a      	str	r2, [r3, #0]
	gyroscopeSensitivity.axis.y = 1.0f;
 8003248:	4b18      	ldr	r3, [pc, #96]	; (80032ac <IMU_INIT+0x70>)
 800324a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800324e:	605a      	str	r2, [r3, #4]
	gyroscopeSensitivity.axis.z = 1.0f;
 8003250:	4b16      	ldr	r3, [pc, #88]	; (80032ac <IMU_INIT+0x70>)
 8003252:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003256:	609a      	str	r2, [r3, #8]

	accelerometerSensitivity.axis.x = 1.0f;
 8003258:	4b15      	ldr	r3, [pc, #84]	; (80032b0 <IMU_INIT+0x74>)
 800325a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800325e:	601a      	str	r2, [r3, #0]
	accelerometerSensitivity.axis.y = 1.0f;
 8003260:	4b13      	ldr	r3, [pc, #76]	; (80032b0 <IMU_INIT+0x74>)
 8003262:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003266:	605a      	str	r2, [r3, #4]
	accelerometerSensitivity.axis.z = 1.0f;
 8003268:	4b11      	ldr	r3, [pc, #68]	; (80032b0 <IMU_INIT+0x74>)
 800326a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800326e:	609a      	str	r2, [r3, #8]

	hardIronBias.axis.x = 0.0f;
 8003270:	4b10      	ldr	r3, [pc, #64]	; (80032b4 <IMU_INIT+0x78>)
 8003272:	f04f 0200 	mov.w	r2, #0
 8003276:	601a      	str	r2, [r3, #0]
	hardIronBias.axis.y = 0.0f;
 8003278:	4b0e      	ldr	r3, [pc, #56]	; (80032b4 <IMU_INIT+0x78>)
 800327a:	f04f 0200 	mov.w	r2, #0
 800327e:	605a      	str	r2, [r3, #4]
	hardIronBias.axis.z = 0.0f;
 8003280:	4b0c      	ldr	r3, [pc, #48]	; (80032b4 <IMU_INIT+0x78>)
 8003282:	f04f 0200 	mov.w	r2, #0
 8003286:	609a      	str	r2, [r3, #8]

	FusionBiasInitialise(&fusionBias, 0.5f, samplePeriod);
 8003288:	4b0b      	ldr	r3, [pc, #44]	; (80032b8 <IMU_INIT+0x7c>)
 800328a:	edd3 7a00 	vldr	s15, [r3]
 800328e:	eef0 0a67 	vmov.f32	s1, s15
 8003292:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8003296:	4809      	ldr	r0, [pc, #36]	; (80032bc <IMU_INIT+0x80>)
 8003298:	f7fe fec6 	bl	8002028 <FusionBiasInitialise>
	FusionAhrsInitialise(&fusionAhrs, 0.5f);
 800329c:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 80032a0:	4807      	ldr	r0, [pc, #28]	; (80032c0 <IMU_INIT+0x84>)
 80032a2:	f7fd fdb3 	bl	8000e0c <FusionAhrsInitialise>
}
 80032a6:	bf00      	nop
 80032a8:	bd80      	pop	{r7, pc}
 80032aa:	bf00      	nop
 80032ac:	20000220 	.word	0x20000220
 80032b0:	2000027c 	.word	0x2000027c
 80032b4:	20000238 	.word	0x20000238
 80032b8:	20000000 	.word	0x20000000
 80032bc:	200001ac 	.word	0x200001ac
 80032c0:	20000174 	.word	0x20000174

080032c4 <IMU_UPDATE>:
void IMU_UPDATE()
{
 80032c4:	b5b0      	push	{r4, r5, r7, lr}
 80032c6:	f5ad 7d58 	sub.w	sp, sp, #864	; 0x360
 80032ca:	af00      	add	r7, sp, #0
	icm20948_gyro_read_dps(&my_gyro);
 80032cc:	48d3      	ldr	r0, [pc, #844]	; (800361c <IMU_UPDATE+0x358>)
 80032ce:	f7ff f925 	bl	800251c <icm20948_gyro_read_dps>
	icm20948_accel_read_g(&my_accel);
 80032d2:	48d3      	ldr	r0, [pc, #844]	; (8003620 <IMU_UPDATE+0x35c>)
 80032d4:	f7ff f950 	bl	8002578 <icm20948_accel_read_g>
	ak09916_mag_read_uT(&my_mag);
 80032d8:	48d2      	ldr	r0, [pc, #840]	; (8003624 <IMU_UPDATE+0x360>)
 80032da:	f7ff f97d 	bl	80025d8 <ak09916_mag_read_uT>

	uncalibratedGyroscope.axis.x = my_gyro.x;
 80032de:	4bcf      	ldr	r3, [pc, #828]	; (800361c <IMU_UPDATE+0x358>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4ad1      	ldr	r2, [pc, #836]	; (8003628 <IMU_UPDATE+0x364>)
 80032e4:	6013      	str	r3, [r2, #0]
	uncalibratedGyroscope.axis.y = my_gyro.y;
 80032e6:	4bcd      	ldr	r3, [pc, #820]	; (800361c <IMU_UPDATE+0x358>)
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	4acf      	ldr	r2, [pc, #828]	; (8003628 <IMU_UPDATE+0x364>)
 80032ec:	6053      	str	r3, [r2, #4]
	uncalibratedGyroscope.axis.z = my_gyro.z;
 80032ee:	4bcb      	ldr	r3, [pc, #812]	; (800361c <IMU_UPDATE+0x358>)
 80032f0:	689b      	ldr	r3, [r3, #8]
 80032f2:	4acd      	ldr	r2, [pc, #820]	; (8003628 <IMU_UPDATE+0x364>)
 80032f4:	6093      	str	r3, [r2, #8]

	uncalibratedAccelerometer.axis.x = my_accel.x;
 80032f6:	4bca      	ldr	r3, [pc, #808]	; (8003620 <IMU_UPDATE+0x35c>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4acc      	ldr	r2, [pc, #816]	; (800362c <IMU_UPDATE+0x368>)
 80032fc:	6013      	str	r3, [r2, #0]
	uncalibratedAccelerometer.axis.y = my_accel.y;
 80032fe:	4bc8      	ldr	r3, [pc, #800]	; (8003620 <IMU_UPDATE+0x35c>)
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	4aca      	ldr	r2, [pc, #808]	; (800362c <IMU_UPDATE+0x368>)
 8003304:	6053      	str	r3, [r2, #4]
	uncalibratedAccelerometer.axis.z = my_accel.z;
 8003306:	4bc6      	ldr	r3, [pc, #792]	; (8003620 <IMU_UPDATE+0x35c>)
 8003308:	689b      	ldr	r3, [r3, #8]
 800330a:	4ac8      	ldr	r2, [pc, #800]	; (800362c <IMU_UPDATE+0x368>)
 800330c:	6093      	str	r3, [r2, #8]

	uncalibratedMagnetometer.axis.x = my_mag.x;
 800330e:	4bc5      	ldr	r3, [pc, #788]	; (8003624 <IMU_UPDATE+0x360>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4ac7      	ldr	r2, [pc, #796]	; (8003630 <IMU_UPDATE+0x36c>)
 8003314:	6013      	str	r3, [r2, #0]
	uncalibratedMagnetometer.axis.y = my_mag.y;
 8003316:	4bc3      	ldr	r3, [pc, #780]	; (8003624 <IMU_UPDATE+0x360>)
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	4ac5      	ldr	r2, [pc, #788]	; (8003630 <IMU_UPDATE+0x36c>)
 800331c:	6053      	str	r3, [r2, #4]
	uncalibratedMagnetometer.axis.z = my_mag.z;
 800331e:	4bc1      	ldr	r3, [pc, #772]	; (8003624 <IMU_UPDATE+0x360>)
 8003320:	689b      	ldr	r3, [r3, #8]
 8003322:	4ac3      	ldr	r2, [pc, #780]	; (8003630 <IMU_UPDATE+0x36c>)
 8003324:	6093      	str	r3, [r2, #8]

	FusionVector3 calibratedGyroscope = FusionCalibrationInertial(uncalibratedGyroscope, FUSION_ROTATION_MATRIX_IDENTITY, gyroscopeSensitivity, FUSION_VECTOR3_ZERO);
 8003326:	f507 7311 	add.w	r3, r7, #580	; 0x244
 800332a:	4ac2      	ldr	r2, [pc, #776]	; (8003634 <IMU_UPDATE+0x370>)
 800332c:	461c      	mov	r4, r3
 800332e:	4615      	mov	r5, r2
 8003330:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003332:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003334:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003336:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003338:	682b      	ldr	r3, [r5, #0]
 800333a:	6023      	str	r3, [r4, #0]
 800333c:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8003340:	f04f 0200 	mov.w	r2, #0
 8003344:	601a      	str	r2, [r3, #0]
 8003346:	f507 730e 	add.w	r3, r7, #568	; 0x238
 800334a:	f04f 0200 	mov.w	r2, #0
 800334e:	605a      	str	r2, [r3, #4]
 8003350:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8003354:	f04f 0200 	mov.w	r2, #0
 8003358:	609a      	str	r2, [r3, #8]
 800335a:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 800335e:	4ab2      	ldr	r2, [pc, #712]	; (8003628 <IMU_UPDATE+0x364>)
 8003360:	ca07      	ldmia	r2, {r0, r1, r2}
 8003362:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003366:	463a      	mov	r2, r7
 8003368:	f507 7311 	add.w	r3, r7, #580	; 0x244
 800336c:	4614      	mov	r4, r2
 800336e:	461d      	mov	r5, r3
 8003370:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003372:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003374:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003376:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003378:	682b      	ldr	r3, [r5, #0]
 800337a:	6023      	str	r3, [r4, #0]
 800337c:	f507 73da 	add.w	r3, r7, #436	; 0x1b4
 8003380:	4aad      	ldr	r2, [pc, #692]	; (8003638 <IMU_UPDATE+0x374>)
 8003382:	ca07      	ldmia	r2, {r0, r1, r2}
 8003384:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003388:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 800338c:	f507 720e 	add.w	r2, r7, #568	; 0x238
 8003390:	ca07      	ldmia	r2, {r0, r1, r2}
 8003392:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003396:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 800339a:	f507 72d4 	add.w	r2, r7, #424	; 0x1a8
 800339e:	ca07      	ldmia	r2, {r0, r1, r2}
 80033a0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80033a4:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 80033a8:	f507 72e0 	add.w	r2, r7, #448	; 0x1c0
 80033ac:	ca07      	ldmia	r2, {r0, r1, r2}
 80033ae:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 * @param vectorB Second vector of the operation.
 * @return vectorB subtracted from vectorA.
 */
static inline __attribute__((always_inline)) FusionVector3 FusionVectorSubtract(const FusionVector3 vectorA, const FusionVector3 vectorB) {
    FusionVector3 result;
    result.axis.x = vectorA.axis.x - vectorB.axis.x;
 80033b2:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 80033b6:	ed93 7a00 	vldr	s14, [r3]
 80033ba:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 80033be:	edd3 7a00 	vldr	s15, [r3]
 80033c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80033c6:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 80033ca:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = vectorA.axis.y - vectorB.axis.y;
 80033ce:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 80033d2:	ed93 7a01 	vldr	s14, [r3, #4]
 80033d6:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 80033da:	edd3 7a01 	vldr	s15, [r3, #4]
 80033de:	ee77 7a67 	vsub.f32	s15, s14, s15
 80033e2:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 80033e6:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = vectorA.axis.z - vectorB.axis.z;
 80033ea:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 80033ee:	ed93 7a02 	vldr	s14, [r3, #8]
 80033f2:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 80033f6:	edd3 7a02 	vldr	s15, [r3, #8]
 80033fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80033fe:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 8003402:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 8003406:	f507 72c2 	add.w	r2, r7, #388	; 0x184
 800340a:	f507 7342 	add.w	r3, r7, #776	; 0x308
 800340e:	ca07      	ldmia	r2, {r0, r1, r2}
 8003410:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003414:	f507 734e 	add.w	r3, r7, #824	; 0x338
 8003418:	f507 7242 	add.w	r2, r7, #776	; 0x308
 800341c:	ca07      	ldmia	r2, {r0, r1, r2}
 800341e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003422:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 8003426:	461c      	mov	r4, r3
 8003428:	f507 734e 	add.w	r3, r7, #824	; 0x338
 800342c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003430:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003434:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8003438:	f507 72da 	add.w	r2, r7, #436	; 0x1b4
 800343c:	ca07      	ldmia	r2, {r0, r1, r2}
 800343e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 * @param vectorB Second vector of the operation.
 * @return Hadamard product of vectorA and vectorB.
 */
static inline __attribute__((always_inline)) FusionVector3 FusionVectorHadamardProduct(const FusionVector3 vectorA, const FusionVector3 vectorB) {
    FusionVector3 result;
    result.axis.x = vectorA.axis.x * vectorB.axis.x;
 8003442:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 8003446:	ed93 7a00 	vldr	s14, [r3]
 800344a:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 800344e:	edd3 7a00 	vldr	s15, [r3]
 8003452:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003456:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800345a:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = vectorA.axis.y * vectorB.axis.y;
 800345e:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 8003462:	ed93 7a01 	vldr	s14, [r3, #4]
 8003466:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 800346a:	edd3 7a01 	vldr	s15, [r3, #4]
 800346e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003472:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8003476:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = vectorA.axis.z * vectorB.axis.z;
 800347a:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 800347e:	ed93 7a02 	vldr	s14, [r3, #8]
 8003482:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8003486:	edd3 7a02 	vldr	s15, [r3, #8]
 800348a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800348e:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8003492:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 8003496:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 800349a:	f507 7345 	add.w	r3, r7, #788	; 0x314
 800349e:	ca07      	ldmia	r2, {r0, r1, r2}
 80034a0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80034a4:	f507 734b 	add.w	r3, r7, #812	; 0x32c
 80034a8:	f507 7245 	add.w	r2, r7, #788	; 0x314
 80034ac:	ca07      	ldmia	r2, {r0, r1, r2}
 80034ae:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80034b2:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80034b6:	463b      	mov	r3, r7
 80034b8:	4614      	mov	r4, r2
 80034ba:	461d      	mov	r5, r3
 80034bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80034be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80034c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80034c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80034c4:	682b      	ldr	r3, [r5, #0]
 80034c6:	6023      	str	r3, [r4, #0]
 80034c8:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 80034cc:	461c      	mov	r4, r3
 80034ce:	f507 734b 	add.w	r3, r7, #812	; 0x32c
 80034d2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80034d6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 * @return Rotation matrix multiplied with scalar.
 */
static inline __attribute__((always_inline)) FusionVector3 FusionRotationMatrixMultiplyVector(const FusionRotationMatrix rotationMatrix, const FusionVector3 vector) {
#define R rotationMatrix.element // define shorthand label for more readable code
    FusionVector3 result;
    result.axis.x = R.xx * vector.axis.x + R.xy * vector.axis.y + R.xz * vector.axis.z;
 80034da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80034de:	ed93 7a00 	vldr	s14, [r3]
 80034e2:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 80034e6:	edd3 7a00 	vldr	s15, [r3]
 80034ea:	ee27 7a27 	vmul.f32	s14, s14, s15
 80034ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80034f2:	edd3 6a01 	vldr	s13, [r3, #4]
 80034f6:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 80034fa:	edd3 7a01 	vldr	s15, [r3, #4]
 80034fe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003502:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003506:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800350a:	edd3 6a02 	vldr	s13, [r3, #8]
 800350e:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8003512:	edd3 7a02 	vldr	s15, [r3, #8]
 8003516:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800351a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800351e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8003522:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = R.yx * vector.axis.x + R.yy * vector.axis.y + R.yz * vector.axis.z;
 8003526:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800352a:	ed93 7a03 	vldr	s14, [r3, #12]
 800352e:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8003532:	edd3 7a00 	vldr	s15, [r3]
 8003536:	ee27 7a27 	vmul.f32	s14, s14, s15
 800353a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800353e:	edd3 6a04 	vldr	s13, [r3, #16]
 8003542:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8003546:	edd3 7a01 	vldr	s15, [r3, #4]
 800354a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800354e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003552:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003556:	edd3 6a05 	vldr	s13, [r3, #20]
 800355a:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 800355e:	edd3 7a02 	vldr	s15, [r3, #8]
 8003562:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003566:	ee77 7a27 	vadd.f32	s15, s14, s15
 800356a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800356e:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = R.zx * vector.axis.x + R.zy * vector.axis.y + R.zz * vector.axis.z;
 8003572:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003576:	ed93 7a06 	vldr	s14, [r3, #24]
 800357a:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 800357e:	edd3 7a00 	vldr	s15, [r3]
 8003582:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003586:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800358a:	edd3 6a07 	vldr	s13, [r3, #28]
 800358e:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8003592:	edd3 7a01 	vldr	s15, [r3, #4]
 8003596:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800359a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800359e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80035a2:	edd3 6a08 	vldr	s13, [r3, #32]
 80035a6:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 80035aa:	edd3 7a02 	vldr	s15, [r3, #8]
 80035ae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80035b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80035b6:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80035ba:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 80035be:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 80035c2:	f507 7348 	add.w	r3, r7, #800	; 0x320
 80035c6:	ca07      	ldmia	r2, {r0, r1, r2}
 80035c8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80035cc:	f507 7351 	add.w	r3, r7, #836	; 0x344
 80035d0:	f507 7248 	add.w	r2, r7, #800	; 0x320
 80035d4:	ca07      	ldmia	r2, {r0, r1, r2}
 80035d6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 * per second per lsb for a gyroscope.
 * @param bias Bias in lsb.
 * @return Calibrated gyroscope or accelerometer measurement.
 */
static inline __attribute__((always_inline)) FusionVector3 FusionCalibrationInertial(const FusionVector3 uncalibrated, const FusionRotationMatrix misalignment, const FusionVector3 sensitivity, const FusionVector3 bias) {
    return FusionRotationMatrixMultiplyVector(misalignment, FusionVectorHadamardProduct(FusionVectorSubtract(uncalibrated, bias), sensitivity));
 80035da:	bf00      	nop
 80035dc:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80035e0:	f507 7251 	add.w	r2, r7, #836	; 0x344
 80035e4:	ca07      	ldmia	r2, {r0, r1, r2}
 80035e6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	FusionVector3 calibratedAccelerometer = FusionCalibrationInertial(uncalibratedAccelerometer, FUSION_ROTATION_MATRIX_IDENTITY, accelerometerSensitivity, FUSION_VECTOR3_ZERO);
 80035ea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80035ee:	4a11      	ldr	r2, [pc, #68]	; (8003634 <IMU_UPDATE+0x370>)
 80035f0:	461c      	mov	r4, r3
 80035f2:	4615      	mov	r5, r2
 80035f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80035f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80035f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80035fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80035fc:	682b      	ldr	r3, [r5, #0]
 80035fe:	6023      	str	r3, [r4, #0]
 8003600:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
 8003604:	f04f 0200 	mov.w	r2, #0
 8003608:	601a      	str	r2, [r3, #0]
 800360a:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
 800360e:	f04f 0200 	mov.w	r2, #0
 8003612:	605a      	str	r2, [r3, #4]
 8003614:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
 8003618:	e010      	b.n	800363c <IMU_UPDATE+0x378>
 800361a:	bf00      	nop
 800361c:	2000028c 	.word	0x2000028c
 8003620:	20000214 	.word	0x20000214
 8003624:	2000024c 	.word	0x2000024c
 8003628:	20000270 	.word	0x20000270
 800362c:	200001ec 	.word	0x200001ec
 8003630:	20000258 	.word	0x20000258
 8003634:	08009bc8 	.word	0x08009bc8
 8003638:	20000220 	.word	0x20000220
 800363c:	f04f 0200 	mov.w	r2, #0
 8003640:	609a      	str	r2, [r3, #8]
 8003642:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8003646:	4ae5      	ldr	r2, [pc, #916]	; (80039dc <IMU_UPDATE+0x718>)
 8003648:	ca07      	ldmia	r2, {r0, r1, r2}
 800364a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800364e:	463a      	mov	r2, r7
 8003650:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003654:	4614      	mov	r4, r2
 8003656:	461d      	mov	r5, r3
 8003658:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800365a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800365c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800365e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003660:	682b      	ldr	r3, [r5, #0]
 8003662:	6023      	str	r3, [r4, #0]
 8003664:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003668:	4add      	ldr	r2, [pc, #884]	; (80039e0 <IMU_UPDATE+0x71c>)
 800366a:	ca07      	ldmia	r2, {r0, r1, r2}
 800366c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003670:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 8003674:	f507 72fe 	add.w	r2, r7, #508	; 0x1fc
 8003678:	ca07      	ldmia	r2, {r0, r1, r2}
 800367a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800367e:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8003682:	f507 7292 	add.w	r2, r7, #292	; 0x124
 8003686:	ca07      	ldmia	r2, {r0, r1, r2}
 8003688:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800368c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003690:	f507 729e 	add.w	r2, r7, #316	; 0x13c
 8003694:	ca07      	ldmia	r2, {r0, r1, r2}
 8003696:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    result.axis.x = vectorA.axis.x - vectorB.axis.x;
 800369a:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 800369e:	ed93 7a00 	vldr	s14, [r3]
 80036a2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80036a6:	edd3 7a00 	vldr	s15, [r3]
 80036aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80036ae:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80036b2:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = vectorA.axis.y - vectorB.axis.y;
 80036b6:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 80036ba:	ed93 7a01 	vldr	s14, [r3, #4]
 80036be:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80036c2:	edd3 7a01 	vldr	s15, [r3, #4]
 80036c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80036ca:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80036ce:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = vectorA.axis.z - vectorB.axis.z;
 80036d2:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 80036d6:	ed93 7a02 	vldr	s14, [r3, #8]
 80036da:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80036de:	edd3 7a02 	vldr	s15, [r3, #8]
 80036e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80036e6:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80036ea:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 80036ee:	f507 7280 	add.w	r2, r7, #256	; 0x100
 80036f2:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 80036f6:	ca07      	ldmia	r2, {r0, r1, r2}
 80036f8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80036fc:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003700:	f507 7230 	add.w	r2, r7, #704	; 0x2c0
 8003704:	ca07      	ldmia	r2, {r0, r1, r2}
 8003706:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800370a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800370e:	461c      	mov	r4, r3
 8003710:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003714:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003718:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800371c:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8003720:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8003724:	ca07      	ldmia	r2, {r0, r1, r2}
 8003726:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    result.axis.x = vectorA.axis.x * vectorB.axis.x;
 800372a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800372e:	ed93 7a00 	vldr	s14, [r3]
 8003732:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8003736:	edd3 7a00 	vldr	s15, [r3]
 800373a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800373e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003742:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = vectorA.axis.y * vectorB.axis.y;
 8003746:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800374a:	ed93 7a01 	vldr	s14, [r3, #4]
 800374e:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8003752:	edd3 7a01 	vldr	s15, [r3, #4]
 8003756:	ee67 7a27 	vmul.f32	s15, s14, s15
 800375a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800375e:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = vectorA.axis.z * vectorB.axis.z;
 8003762:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8003766:	ed93 7a02 	vldr	s14, [r3, #8]
 800376a:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800376e:	edd3 7a02 	vldr	s15, [r3, #8]
 8003772:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003776:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800377a:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 800377e:	f107 02dc 	add.w	r2, r7, #220	; 0xdc
 8003782:	f507 7333 	add.w	r3, r7, #716	; 0x2cc
 8003786:	ca07      	ldmia	r2, {r0, r1, r2}
 8003788:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800378c:	f507 7339 	add.w	r3, r7, #740	; 0x2e4
 8003790:	f507 7233 	add.w	r2, r7, #716	; 0x2cc
 8003794:	ca07      	ldmia	r2, {r0, r1, r2}
 8003796:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800379a:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800379e:	463b      	mov	r3, r7
 80037a0:	4614      	mov	r4, r2
 80037a2:	461d      	mov	r5, r3
 80037a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80037a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80037a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80037aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80037ac:	682b      	ldr	r3, [r5, #0]
 80037ae:	6023      	str	r3, [r4, #0]
 80037b0:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80037b4:	461c      	mov	r4, r3
 80037b6:	f507 7339 	add.w	r3, r7, #740	; 0x2e4
 80037ba:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80037be:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    result.axis.x = R.xx * vector.axis.x + R.xy * vector.axis.y + R.xz * vector.axis.z;
 80037c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80037c6:	ed93 7a00 	vldr	s14, [r3]
 80037ca:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80037ce:	edd3 7a00 	vldr	s15, [r3]
 80037d2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80037d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80037da:	edd3 6a01 	vldr	s13, [r3, #4]
 80037de:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80037e2:	edd3 7a01 	vldr	s15, [r3, #4]
 80037e6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80037ea:	ee37 7a27 	vadd.f32	s14, s14, s15
 80037ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80037f2:	edd3 6a02 	vldr	s13, [r3, #8]
 80037f6:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80037fa:	edd3 7a02 	vldr	s15, [r3, #8]
 80037fe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003802:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003806:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800380a:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = R.yx * vector.axis.x + R.yy * vector.axis.y + R.yz * vector.axis.z;
 800380e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003812:	ed93 7a03 	vldr	s14, [r3, #12]
 8003816:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800381a:	edd3 7a00 	vldr	s15, [r3]
 800381e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003822:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003826:	edd3 6a04 	vldr	s13, [r3, #16]
 800382a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800382e:	edd3 7a01 	vldr	s15, [r3, #4]
 8003832:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003836:	ee37 7a27 	vadd.f32	s14, s14, s15
 800383a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800383e:	edd3 6a05 	vldr	s13, [r3, #20]
 8003842:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8003846:	edd3 7a02 	vldr	s15, [r3, #8]
 800384a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800384e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003852:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003856:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = R.zx * vector.axis.x + R.zy * vector.axis.y + R.zz * vector.axis.z;
 800385a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800385e:	ed93 7a06 	vldr	s14, [r3, #24]
 8003862:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8003866:	edd3 7a00 	vldr	s15, [r3]
 800386a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800386e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003872:	edd3 6a07 	vldr	s13, [r3, #28]
 8003876:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800387a:	edd3 7a01 	vldr	s15, [r3, #4]
 800387e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003882:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003886:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800388a:	edd3 6a08 	vldr	s13, [r3, #32]
 800388e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8003892:	edd3 7a02 	vldr	s15, [r3, #8]
 8003896:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800389a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800389e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80038a2:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 80038a6:	f107 02c4 	add.w	r2, r7, #196	; 0xc4
 80038aa:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 80038ae:	ca07      	ldmia	r2, {r0, r1, r2}
 80038b0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80038b4:	f507 733f 	add.w	r3, r7, #764	; 0x2fc
 80038b8:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
 80038bc:	ca07      	ldmia	r2, {r0, r1, r2}
 80038be:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80038c2:	bf00      	nop
 80038c4:	f507 730b 	add.w	r3, r7, #556	; 0x22c
 80038c8:	461c      	mov	r4, r3
 80038ca:	f507 733f 	add.w	r3, r7, #764	; 0x2fc
 80038ce:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80038d2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	FusionVector3 calibratedMagnetometer = FusionCalibrationMagnetic(uncalibratedMagnetometer, FUSION_ROTATION_MATRIX_IDENTITY, hardIronBias);
 80038d6:	f507 73e6 	add.w	r3, r7, #460	; 0x1cc
 80038da:	4a42      	ldr	r2, [pc, #264]	; (80039e4 <IMU_UPDATE+0x720>)
 80038dc:	461c      	mov	r4, r3
 80038de:	4615      	mov	r5, r2
 80038e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80038e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80038e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80038e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80038e8:	682b      	ldr	r3, [r5, #0]
 80038ea:	6023      	str	r3, [r4, #0]
 80038ec:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80038f0:	4a3d      	ldr	r2, [pc, #244]	; (80039e8 <IMU_UPDATE+0x724>)
 80038f2:	ca07      	ldmia	r2, {r0, r1, r2}
 80038f4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80038f8:	463a      	mov	r2, r7
 80038fa:	f507 73e6 	add.w	r3, r7, #460	; 0x1cc
 80038fe:	4614      	mov	r4, r2
 8003900:	461d      	mov	r5, r3
 8003902:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003904:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003906:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003908:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800390a:	682b      	ldr	r3, [r5, #0]
 800390c:	6023      	str	r3, [r4, #0]
 800390e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8003912:	4a36      	ldr	r2, [pc, #216]	; (80039ec <IMU_UPDATE+0x728>)
 8003914:	ca07      	ldmia	r2, {r0, r1, r2}
 8003916:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800391a:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800391e:	463b      	mov	r3, r7
 8003920:	4614      	mov	r4, r2
 8003922:	461d      	mov	r5, r3
 8003924:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003926:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003928:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800392a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800392c:	682b      	ldr	r3, [r5, #0]
 800392e:	6023      	str	r3, [r4, #0]
 8003930:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003934:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8003938:	ca07      	ldmia	r2, {r0, r1, r2}
 800393a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    result.axis.x = R.xx * vector.axis.x + R.xy * vector.axis.y + R.xz * vector.axis.z;
 800393e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003942:	ed93 7a00 	vldr	s14, [r3]
 8003946:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800394a:	edd3 7a00 	vldr	s15, [r3]
 800394e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003952:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003956:	edd3 6a01 	vldr	s13, [r3, #4]
 800395a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800395e:	edd3 7a01 	vldr	s15, [r3, #4]
 8003962:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003966:	ee37 7a27 	vadd.f32	s14, s14, s15
 800396a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800396e:	edd3 6a02 	vldr	s13, [r3, #8]
 8003972:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003976:	edd3 7a02 	vldr	s15, [r3, #8]
 800397a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800397e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003982:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003986:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = R.yx * vector.axis.x + R.yy * vector.axis.y + R.yz * vector.axis.z;
 800398a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800398e:	ed93 7a03 	vldr	s14, [r3, #12]
 8003992:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003996:	edd3 7a00 	vldr	s15, [r3]
 800399a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800399e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80039a2:	edd3 6a04 	vldr	s13, [r3, #16]
 80039a6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80039aa:	edd3 7a01 	vldr	s15, [r3, #4]
 80039ae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80039b2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80039b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80039ba:	edd3 6a05 	vldr	s13, [r3, #20]
 80039be:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80039c2:	edd3 7a02 	vldr	s15, [r3, #8]
 80039c6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80039ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80039ce:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80039d2:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = R.zx * vector.axis.x + R.zy * vector.axis.y + R.zz * vector.axis.z;
 80039d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80039da:	e009      	b.n	80039f0 <IMU_UPDATE+0x72c>
 80039dc:	200001ec 	.word	0x200001ec
 80039e0:	2000027c 	.word	0x2000027c
 80039e4:	08009bc8 	.word	0x08009bc8
 80039e8:	20000258 	.word	0x20000258
 80039ec:	20000238 	.word	0x20000238
 80039f0:	ed93 7a06 	vldr	s14, [r3, #24]
 80039f4:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80039f8:	edd3 7a00 	vldr	s15, [r3]
 80039fc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003a00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a04:	edd3 6a07 	vldr	s13, [r3, #28]
 8003a08:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003a0c:	edd3 7a01 	vldr	s15, [r3, #4]
 8003a10:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003a14:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003a18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a1c:	edd3 6a08 	vldr	s13, [r3, #32]
 8003a20:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003a24:	edd3 7a02 	vldr	s15, [r3, #8]
 8003a28:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003a2c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003a30:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003a34:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 8003a38:	f107 0294 	add.w	r2, r7, #148	; 0x94
 8003a3c:	f507 7324 	add.w	r3, r7, #656	; 0x290
 8003a40:	ca07      	ldmia	r2, {r0, r1, r2}
 8003a42:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003a46:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8003a4a:	f507 7224 	add.w	r2, r7, #656	; 0x290
 8003a4e:	ca07      	ldmia	r2, {r0, r1, r2}
 8003a50:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003a54:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003a58:	461c      	mov	r4, r3
 8003a5a:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8003a5e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003a62:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003a66:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8003a6a:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 8003a6e:	ca07      	ldmia	r2, {r0, r1, r2}
 8003a70:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    result.axis.x = vectorA.axis.x - vectorB.axis.x;
 8003a74:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003a78:	ed93 7a00 	vldr	s14, [r3]
 8003a7c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8003a80:	edd3 7a00 	vldr	s15, [r3]
 8003a84:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003a88:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003a8c:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = vectorA.axis.y - vectorB.axis.y;
 8003a90:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003a94:	ed93 7a01 	vldr	s14, [r3, #4]
 8003a98:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8003a9c:	edd3 7a01 	vldr	s15, [r3, #4]
 8003aa0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003aa4:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003aa8:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = vectorA.axis.z - vectorB.axis.z;
 8003aac:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003ab0:	ed93 7a02 	vldr	s14, [r3, #8]
 8003ab4:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8003ab8:	edd3 7a02 	vldr	s15, [r3, #8]
 8003abc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003ac0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003ac4:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 8003ac8:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8003acc:	f507 7327 	add.w	r3, r7, #668	; 0x29c
 8003ad0:	ca07      	ldmia	r2, {r0, r1, r2}
 8003ad2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003ad6:	f507 732d 	add.w	r3, r7, #692	; 0x2b4
 8003ada:	f507 7227 	add.w	r2, r7, #668	; 0x29c
 8003ade:	ca07      	ldmia	r2, {r0, r1, r2}
 8003ae0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 * @param softIronMatrix Soft-iron matrix (may not be a true rotation matrix).
 * @param hardIronBias Hard-iron bias in uT.
 * @return Calibrated magnetometer measurement.
 */
static inline __attribute__((always_inline)) FusionVector3 FusionCalibrationMagnetic(const FusionVector3 uncalibrated, const FusionRotationMatrix softIronMatrix, const FusionVector3 hardIronBias) {
    return FusionVectorSubtract(FusionRotationMatrixMultiplyVector(softIronMatrix, uncalibrated), hardIronBias);
 8003ae4:	bf00      	nop
 8003ae6:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8003aea:	461c      	mov	r4, r3
 8003aec:	f507 732d 	add.w	r3, r7, #692	; 0x2b4
 8003af0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003af4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	calibratedGyroscope = FusionBiasUpdate(&fusionBias, calibratedGyroscope);
 8003af8:	edd7 6a9a 	vldr	s13, [r7, #616]	; 0x268
 8003afc:	ed97 7a9b 	vldr	s14, [r7, #620]	; 0x26c
 8003b00:	edd7 7a9c 	vldr	s15, [r7, #624]	; 0x270
 8003b04:	eeb0 0a66 	vmov.f32	s0, s13
 8003b08:	eef0 0a47 	vmov.f32	s1, s14
 8003b0c:	eeb0 1a67 	vmov.f32	s2, s15
 8003b10:	488c      	ldr	r0, [pc, #560]	; (8003d44 <IMU_UPDATE+0xa80>)
 8003b12:	f7fe fac5 	bl	80020a0 <FusionBiasUpdate>
 8003b16:	eef0 6a40 	vmov.f32	s13, s0
 8003b1a:	eeb0 7a60 	vmov.f32	s14, s1
 8003b1e:	eef0 7a41 	vmov.f32	s15, s2
 8003b22:	edc7 6a9a 	vstr	s13, [r7, #616]	; 0x268
 8003b26:	ed87 7a9b 	vstr	s14, [r7, #620]	; 0x26c
 8003b2a:	edc7 7a9c 	vstr	s15, [r7, #624]	; 0x270
	FusionAhrsUpdate(&fusionAhrs, calibratedGyroscope, calibratedAccelerometer, calibratedMagnetometer, samplePeriod);
 8003b2e:	4b86      	ldr	r3, [pc, #536]	; (8003d48 <IMU_UPDATE+0xa84>)
 8003b30:	edd3 4a00 	vldr	s9, [r3]
 8003b34:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8003b38:	ed93 3a00 	vldr	s6, [r3]
 8003b3c:	edd3 3a01 	vldr	s7, [r3, #4]
 8003b40:	ed93 4a02 	vldr	s8, [r3, #8]
 8003b44:	f507 730b 	add.w	r3, r7, #556	; 0x22c
 8003b48:	ed93 5a00 	vldr	s10, [r3]
 8003b4c:	edd3 5a01 	vldr	s11, [r3, #4]
 8003b50:	ed93 6a02 	vldr	s12, [r3, #8]
 8003b54:	edd7 6a9a 	vldr	s13, [r7, #616]	; 0x268
 8003b58:	ed97 7a9b 	vldr	s14, [r7, #620]	; 0x26c
 8003b5c:	edd7 7a9c 	vldr	s15, [r7, #624]	; 0x270
 8003b60:	eef0 1a45 	vmov.f32	s3, s10
 8003b64:	eeb0 2a65 	vmov.f32	s4, s11
 8003b68:	eef0 2a46 	vmov.f32	s5, s12
 8003b6c:	eeb0 0a66 	vmov.f32	s0, s13
 8003b70:	eef0 0a47 	vmov.f32	s1, s14
 8003b74:	eeb0 1a67 	vmov.f32	s2, s15
 8003b78:	4874      	ldr	r0, [pc, #464]	; (8003d4c <IMU_UPDATE+0xa88>)
 8003b7a:	f7fd f985 	bl	8000e88 <FusionAhrsUpdate>
	eulerAngles = FusionQuaternionToEulerAngles(FusionAhrsGetQuaternion(&fusionAhrs));
 8003b7e:	4873      	ldr	r0, [pc, #460]	; (8003d4c <IMU_UPDATE+0xa88>)
 8003b80:	f7fe fa0a 	bl	8001f98 <FusionAhrsGetQuaternion>
 8003b84:	eeb0 6a40 	vmov.f32	s12, s0
 8003b88:	eef0 6a60 	vmov.f32	s13, s1
 8003b8c:	eeb0 7a41 	vmov.f32	s14, s2
 8003b90:	eef0 7a61 	vmov.f32	s15, s3
 8003b94:	ed87 6a9d 	vstr	s12, [r7, #628]	; 0x274
 8003b98:	edc7 6a9e 	vstr	s13, [r7, #632]	; 0x278
 8003b9c:	ed87 7a9f 	vstr	s14, [r7, #636]	; 0x27c
 8003ba0:	edc7 7aa0 	vstr	s15, [r7, #640]	; 0x280
 8003ba4:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8003ba8:	461c      	mov	r4, r3
 8003baa:	f507 731d 	add.w	r3, r7, #628	; 0x274
 8003bae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003bb0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 * @param quaternion Quaternion to be converted.
 * @return Euler angles in degrees.
 */
static inline __attribute__((always_inline)) FusionEulerAngles FusionQuaternionToEulerAngles(const FusionQuaternion quaternion) {
#define Q quaternion.element // define shorthand label for more readable code
    const float qwqwMinusHalf = Q.w * Q.w - 0.5f; // calculate common terms to avoid repeated operations
 8003bb4:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8003bb8:	ed93 7a00 	vldr	s14, [r3]
 8003bbc:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8003bc0:	edd3 7a00 	vldr	s15, [r3]
 8003bc4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bc8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003bcc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003bd0:	edc7 7ad7 	vstr	s15, [r7, #860]	; 0x35c
    FusionEulerAngles eulerAngles;
    eulerAngles.angle.roll = FusionRadiansToDegrees(atan2f(Q.y * Q.z - Q.w * Q.x, qwqwMinusHalf + Q.z * Q.z));
 8003bd4:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8003bd8:	ed93 7a02 	vldr	s14, [r3, #8]
 8003bdc:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8003be0:	edd3 7a03 	vldr	s15, [r3, #12]
 8003be4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003be8:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8003bec:	edd3 6a00 	vldr	s13, [r3]
 8003bf0:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8003bf4:	edd3 7a01 	vldr	s15, [r3, #4]
 8003bf8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003bfc:	ee77 6a67 	vsub.f32	s13, s14, s15
 8003c00:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8003c04:	ed93 7a03 	vldr	s14, [r3, #12]
 8003c08:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8003c0c:	edd3 7a03 	vldr	s15, [r3, #12]
 8003c10:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003c14:	edd7 7ad7 	vldr	s15, [r7, #860]	; 0x35c
 8003c18:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003c1c:	eef0 0a67 	vmov.f32	s1, s15
 8003c20:	eeb0 0a66 	vmov.f32	s0, s13
 8003c24:	f005 fd24 	bl	8009670 <atan2f>
 8003c28:	eef0 7a40 	vmov.f32	s15, s0
 8003c2c:	edc7 7ad6 	vstr	s15, [r7, #856]	; 0x358
    return radians * (180.0f / (float) M_PI);
 8003c30:	edd7 7ad6 	vldr	s15, [r7, #856]	; 0x358
 8003c34:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8003d50 <IMU_UPDATE+0xa8c>
 8003c38:	ee67 7a87 	vmul.f32	s15, s15, s14
    eulerAngles.angle.roll = FusionRadiansToDegrees(atan2f(Q.y * Q.z - Q.w * Q.x, qwqwMinusHalf + Q.z * Q.z));
 8003c3c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003c40:	edc3 7a00 	vstr	s15, [r3]
    eulerAngles.angle.pitch = FusionRadiansToDegrees(-1.0f * asinf(2.0f * (Q.x * Q.z + Q.w * Q.y)));
 8003c44:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8003c48:	ed93 7a01 	vldr	s14, [r3, #4]
 8003c4c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8003c50:	edd3 7a03 	vldr	s15, [r3, #12]
 8003c54:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003c58:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8003c5c:	edd3 6a00 	vldr	s13, [r3]
 8003c60:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8003c64:	edd3 7a02 	vldr	s15, [r3, #8]
 8003c68:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003c6c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003c70:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003c74:	eeb0 0a67 	vmov.f32	s0, s15
 8003c78:	f005 fcc8 	bl	800960c <asinf>
 8003c7c:	eef0 7a40 	vmov.f32	s15, s0
 8003c80:	eef1 7a67 	vneg.f32	s15, s15
 8003c84:	edc7 7ad5 	vstr	s15, [r7, #852]	; 0x354
    return radians * (180.0f / (float) M_PI);
 8003c88:	edd7 7ad5 	vldr	s15, [r7, #852]	; 0x354
 8003c8c:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8003d50 <IMU_UPDATE+0xa8c>
 8003c90:	ee67 7a87 	vmul.f32	s15, s15, s14
    eulerAngles.angle.pitch = FusionRadiansToDegrees(-1.0f * asinf(2.0f * (Q.x * Q.z + Q.w * Q.y)));
 8003c94:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003c98:	edc3 7a01 	vstr	s15, [r3, #4]
    eulerAngles.angle.yaw = FusionRadiansToDegrees(atan2f(Q.x * Q.y - Q.w * Q.z, qwqwMinusHalf + Q.x * Q.x));
 8003c9c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8003ca0:	ed93 7a01 	vldr	s14, [r3, #4]
 8003ca4:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8003ca8:	edd3 7a02 	vldr	s15, [r3, #8]
 8003cac:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003cb0:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8003cb4:	edd3 6a00 	vldr	s13, [r3]
 8003cb8:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8003cbc:	edd3 7a03 	vldr	s15, [r3, #12]
 8003cc0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003cc4:	ee77 6a67 	vsub.f32	s13, s14, s15
 8003cc8:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8003ccc:	ed93 7a01 	vldr	s14, [r3, #4]
 8003cd0:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8003cd4:	edd3 7a01 	vldr	s15, [r3, #4]
 8003cd8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003cdc:	edd7 7ad7 	vldr	s15, [r7, #860]	; 0x35c
 8003ce0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003ce4:	eef0 0a67 	vmov.f32	s1, s15
 8003ce8:	eeb0 0a66 	vmov.f32	s0, s13
 8003cec:	f005 fcc0 	bl	8009670 <atan2f>
 8003cf0:	eef0 7a40 	vmov.f32	s15, s0
 8003cf4:	edc7 7ad4 	vstr	s15, [r7, #848]	; 0x350
    return radians * (180.0f / (float) M_PI);
 8003cf8:	edd7 7ad4 	vldr	s15, [r7, #848]	; 0x350
 8003cfc:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8003d50 <IMU_UPDATE+0xa8c>
 8003d00:	ee67 7a87 	vmul.f32	s15, s15, s14
    eulerAngles.angle.yaw = FusionRadiansToDegrees(atan2f(Q.x * Q.y - Q.w * Q.z, qwqwMinusHalf + Q.x * Q.x));
 8003d04:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003d08:	edc3 7a02 	vstr	s15, [r3, #8]
    return eulerAngles;
 8003d0c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003d10:	f507 7321 	add.w	r3, r7, #644	; 0x284
 8003d14:	ca07      	ldmia	r2, {r0, r1, r2}
 8003d16:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003d1a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003d1e:	461c      	mov	r4, r3
 8003d20:	f507 7321 	add.w	r3, r7, #644	; 0x284
 8003d24:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003d28:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003d2c:	4b09      	ldr	r3, [pc, #36]	; (8003d54 <IMU_UPDATE+0xa90>)
 8003d2e:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8003d32:	ca07      	ldmia	r2, {r0, r1, r2}
 8003d34:	e883 0007 	stmia.w	r3, {r0, r1, r2}
}
 8003d38:	bf00      	nop
 8003d3a:	f507 7758 	add.w	r7, r7, #864	; 0x360
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	bdb0      	pop	{r4, r5, r7, pc}
 8003d42:	bf00      	nop
 8003d44:	200001ac 	.word	0x200001ac
 8003d48:	20000000 	.word	0x20000000
 8003d4c:	20000174 	.word	0x20000174
 8003d50:	42652ee0 	.word	0x42652ee0
 8003d54:	20000124 	.word	0x20000124

08003d58 <SERIAL_CONTROL_LOOP>:
void SERIAL_CONTROL_LOOP()
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	af00      	add	r7, sp, #0
	SerialControlWheelsRequest.ControlMode = 0;
 8003d5c:	4b0e      	ldr	r3, [pc, #56]	; (8003d98 <SERIAL_CONTROL_LOOP+0x40>)
 8003d5e:	2200      	movs	r2, #0
 8003d60:	701a      	strb	r2, [r3, #0]
	SerialControlWheelsRequest.ParameterNumber = 0;
 8003d62:	4b0d      	ldr	r3, [pc, #52]	; (8003d98 <SERIAL_CONTROL_LOOP+0x40>)
 8003d64:	2200      	movs	r2, #0
 8003d66:	705a      	strb	r2, [r3, #1]
	SerialControlWheelsRequest.WheelLeft = 0.0;
 8003d68:	4b0b      	ldr	r3, [pc, #44]	; (8003d98 <SERIAL_CONTROL_LOOP+0x40>)
 8003d6a:	3306      	adds	r3, #6
 8003d6c:	f04f 0200 	mov.w	r2, #0
 8003d70:	601a      	str	r2, [r3, #0]
	SerialControlWheelsRequest.WheelRight = 0.0;
 8003d72:	4b09      	ldr	r3, [pc, #36]	; (8003d98 <SERIAL_CONTROL_LOOP+0x40>)
 8003d74:	330a      	adds	r3, #10
 8003d76:	f04f 0200 	mov.w	r2, #0
 8003d7a:	601a      	str	r2, [r3, #0]
	SerialControlWheelsRequest.CR=13;
 8003d7c:	4b06      	ldr	r3, [pc, #24]	; (8003d98 <SERIAL_CONTROL_LOOP+0x40>)
 8003d7e:	220d      	movs	r2, #13
 8003d80:	739a      	strb	r2, [r3, #14]
	SerialControlWheelsRequest.LF=10;
 8003d82:	4b05      	ldr	r3, [pc, #20]	; (8003d98 <SERIAL_CONTROL_LOOP+0x40>)
 8003d84:	220a      	movs	r2, #10
 8003d86:	73da      	strb	r2, [r3, #15]
	HAL_UART_Transmit_DMA(&huart2, (uint8_t*)SerialControlWheelsRequest.Buffer, WHEELS_REQUEST_SIZE);
 8003d88:	2210      	movs	r2, #16
 8003d8a:	4903      	ldr	r1, [pc, #12]	; (8003d98 <SERIAL_CONTROL_LOOP+0x40>)
 8003d8c:	4803      	ldr	r0, [pc, #12]	; (8003d9c <SERIAL_CONTROL_LOOP+0x44>)
 8003d8e:	f004 fb55 	bl	800843c <HAL_UART_Transmit_DMA>
}
 8003d92:	bf00      	nop
 8003d94:	bd80      	pop	{r7, pc}
 8003d96:	bf00      	nop
 8003d98:	2000014c 	.word	0x2000014c
 8003d9c:	20000590 	.word	0x20000590

08003da0 <BALANCE_Prepare>:
void BALANCE_Prepare()
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	af00      	add	r7, sp, #0
	Front = BTFront;
 8003da4:	4b6e      	ldr	r3, [pc, #440]	; (8003f60 <BALANCE_Prepare+0x1c0>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4a6e      	ldr	r2, [pc, #440]	; (8003f64 <BALANCE_Prepare+0x1c4>)
 8003daa:	6013      	str	r3, [r2, #0]
	Turn = BTTurn;
 8003dac:	4b6e      	ldr	r3, [pc, #440]	; (8003f68 <BALANCE_Prepare+0x1c8>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a6e      	ldr	r2, [pc, #440]	; (8003f6c <BALANCE_Prepare+0x1cc>)
 8003db2:	6013      	str	r3, [r2, #0]

	if (Battery < 4)
 8003db4:	4b6e      	ldr	r3, [pc, #440]	; (8003f70 <BALANCE_Prepare+0x1d0>)
 8003db6:	edd3 7a00 	vldr	s15, [r3]
 8003dba:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8003dbe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003dc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003dc6:	d507      	bpl.n	8003dd8 <BALANCE_Prepare+0x38>
	{
		Front = 0;
 8003dc8:	4b66      	ldr	r3, [pc, #408]	; (8003f64 <BALANCE_Prepare+0x1c4>)
 8003dca:	f04f 0200 	mov.w	r2, #0
 8003dce:	601a      	str	r2, [r3, #0]
		Turn = 0;
 8003dd0:	4b66      	ldr	r3, [pc, #408]	; (8003f6c <BALANCE_Prepare+0x1cc>)
 8003dd2:	f04f 0200 	mov.w	r2, #0
 8003dd6:	601a      	str	r2, [r3, #0]
	}

	if ((fabsf(Front) < 0.001) && (fabsf(Turn) < 0.001) && (fabsf(SpeedLinear) < 0.02) && (fabsf(LeftSpeed - RightSpeed) < 0.02))
 8003dd8:	4b62      	ldr	r3, [pc, #392]	; (8003f64 <BALANCE_Prepare+0x1c4>)
 8003dda:	edd3 7a00 	vldr	s15, [r3]
 8003dde:	eef0 7ae7 	vabs.f32	s15, s15
 8003de2:	ee17 0a90 	vmov	r0, s15
 8003de6:	f7fc fb53 	bl	8000490 <__aeabi_f2d>
 8003dea:	a357      	add	r3, pc, #348	; (adr r3, 8003f48 <BALANCE_Prepare+0x1a8>)
 8003dec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003df0:	f7fc fe18 	bl	8000a24 <__aeabi_dcmplt>
 8003df4:	4603      	mov	r3, r0
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d05f      	beq.n	8003eba <BALANCE_Prepare+0x11a>
 8003dfa:	4b5c      	ldr	r3, [pc, #368]	; (8003f6c <BALANCE_Prepare+0x1cc>)
 8003dfc:	edd3 7a00 	vldr	s15, [r3]
 8003e00:	eef0 7ae7 	vabs.f32	s15, s15
 8003e04:	ee17 0a90 	vmov	r0, s15
 8003e08:	f7fc fb42 	bl	8000490 <__aeabi_f2d>
 8003e0c:	a34e      	add	r3, pc, #312	; (adr r3, 8003f48 <BALANCE_Prepare+0x1a8>)
 8003e0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e12:	f7fc fe07 	bl	8000a24 <__aeabi_dcmplt>
 8003e16:	4603      	mov	r3, r0
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d04e      	beq.n	8003eba <BALANCE_Prepare+0x11a>
 8003e1c:	4b55      	ldr	r3, [pc, #340]	; (8003f74 <BALANCE_Prepare+0x1d4>)
 8003e1e:	edd3 7a00 	vldr	s15, [r3]
 8003e22:	eef0 7ae7 	vabs.f32	s15, s15
 8003e26:	ee17 0a90 	vmov	r0, s15
 8003e2a:	f7fc fb31 	bl	8000490 <__aeabi_f2d>
 8003e2e:	a348      	add	r3, pc, #288	; (adr r3, 8003f50 <BALANCE_Prepare+0x1b0>)
 8003e30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e34:	f7fc fdf6 	bl	8000a24 <__aeabi_dcmplt>
 8003e38:	4603      	mov	r3, r0
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d03d      	beq.n	8003eba <BALANCE_Prepare+0x11a>
 8003e3e:	4b4e      	ldr	r3, [pc, #312]	; (8003f78 <BALANCE_Prepare+0x1d8>)
 8003e40:	ed93 7a00 	vldr	s14, [r3]
 8003e44:	4b4d      	ldr	r3, [pc, #308]	; (8003f7c <BALANCE_Prepare+0x1dc>)
 8003e46:	edd3 7a00 	vldr	s15, [r3]
 8003e4a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003e4e:	eef0 7ae7 	vabs.f32	s15, s15
 8003e52:	ee17 0a90 	vmov	r0, s15
 8003e56:	f7fc fb1b 	bl	8000490 <__aeabi_f2d>
 8003e5a:	a33d      	add	r3, pc, #244	; (adr r3, 8003f50 <BALANCE_Prepare+0x1b0>)
 8003e5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e60:	f7fc fde0 	bl	8000a24 <__aeabi_dcmplt>
 8003e64:	4603      	mov	r3, r0
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d027      	beq.n	8003eba <BALANCE_Prepare+0x11a>
	{
		if ((Battery < 4) && (BalanceActiveDemand))
 8003e6a:	4b41      	ldr	r3, [pc, #260]	; (8003f70 <BALANCE_Prepare+0x1d0>)
 8003e6c:	edd3 7a00 	vldr	s15, [r3]
 8003e70:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8003e74:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003e78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e7c:	d507      	bpl.n	8003e8e <BALANCE_Prepare+0xee>
 8003e7e:	4b40      	ldr	r3, [pc, #256]	; (8003f80 <BALANCE_Prepare+0x1e0>)
 8003e80:	781b      	ldrb	r3, [r3, #0]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d003      	beq.n	8003e8e <BALANCE_Prepare+0xee>
		{
			BalanceActiveDemand = false;
 8003e86:	4b3e      	ldr	r3, [pc, #248]	; (8003f80 <BALANCE_Prepare+0x1e0>)
 8003e88:	2200      	movs	r2, #0
 8003e8a:	701a      	strb	r2, [r3, #0]
 8003e8c:	e015      	b.n	8003eba <BALANCE_Prepare+0x11a>
		}
		else if (Battery > 8)
 8003e8e:	4b38      	ldr	r3, [pc, #224]	; (8003f70 <BALANCE_Prepare+0x1d0>)
 8003e90:	edd3 7a00 	vldr	s15, [r3]
 8003e94:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8003e98:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003e9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ea0:	dd04      	ble.n	8003eac <BALANCE_Prepare+0x10c>
		{
			BalanceActiveDemand = BTBalanceActive;
 8003ea2:	4b38      	ldr	r3, [pc, #224]	; (8003f84 <BALANCE_Prepare+0x1e4>)
 8003ea4:	781a      	ldrb	r2, [r3, #0]
 8003ea6:	4b36      	ldr	r3, [pc, #216]	; (8003f80 <BALANCE_Prepare+0x1e0>)
 8003ea8:	701a      	strb	r2, [r3, #0]
 8003eaa:	e006      	b.n	8003eba <BALANCE_Prepare+0x11a>
		}
		else if (!BTBalanceActive)
 8003eac:	4b35      	ldr	r3, [pc, #212]	; (8003f84 <BALANCE_Prepare+0x1e4>)
 8003eae:	781b      	ldrb	r3, [r3, #0]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d102      	bne.n	8003eba <BALANCE_Prepare+0x11a>
		{
			BalanceActiveDemand = false;
 8003eb4:	4b32      	ldr	r3, [pc, #200]	; (8003f80 <BALANCE_Prepare+0x1e0>)
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	701a      	strb	r2, [r3, #0]
		}
	}

	Turn = (Turn > 90) ? 90 : Turn;
 8003eba:	4b2c      	ldr	r3, [pc, #176]	; (8003f6c <BALANCE_Prepare+0x1cc>)
 8003ebc:	edd3 7a00 	vldr	s15, [r3]
 8003ec0:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8003f88 <BALANCE_Prepare+0x1e8>
 8003ec4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003ec8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ecc:	dd01      	ble.n	8003ed2 <BALANCE_Prepare+0x132>
 8003ece:	4b2f      	ldr	r3, [pc, #188]	; (8003f8c <BALANCE_Prepare+0x1ec>)
 8003ed0:	e001      	b.n	8003ed6 <BALANCE_Prepare+0x136>
 8003ed2:	4b26      	ldr	r3, [pc, #152]	; (8003f6c <BALANCE_Prepare+0x1cc>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4a25      	ldr	r2, [pc, #148]	; (8003f6c <BALANCE_Prepare+0x1cc>)
 8003ed8:	6013      	str	r3, [r2, #0]
	Turn = (Turn < -90) ? -90 : Turn;
 8003eda:	4b24      	ldr	r3, [pc, #144]	; (8003f6c <BALANCE_Prepare+0x1cc>)
 8003edc:	edd3 7a00 	vldr	s15, [r3]
 8003ee0:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8003f90 <BALANCE_Prepare+0x1f0>
 8003ee4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003ee8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003eec:	d501      	bpl.n	8003ef2 <BALANCE_Prepare+0x152>
 8003eee:	4b29      	ldr	r3, [pc, #164]	; (8003f94 <BALANCE_Prepare+0x1f4>)
 8003ef0:	e001      	b.n	8003ef6 <BALANCE_Prepare+0x156>
 8003ef2:	4b1e      	ldr	r3, [pc, #120]	; (8003f6c <BALANCE_Prepare+0x1cc>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4a1d      	ldr	r2, [pc, #116]	; (8003f6c <BALANCE_Prepare+0x1cc>)
 8003ef8:	6013      	str	r3, [r2, #0]
	Front = (Front > 2) ? 2 : Front;
 8003efa:	4b1a      	ldr	r3, [pc, #104]	; (8003f64 <BALANCE_Prepare+0x1c4>)
 8003efc:	edd3 7a00 	vldr	s15, [r3]
 8003f00:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8003f04:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003f08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f0c:	dd02      	ble.n	8003f14 <BALANCE_Prepare+0x174>
 8003f0e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003f12:	e001      	b.n	8003f18 <BALANCE_Prepare+0x178>
 8003f14:	4b13      	ldr	r3, [pc, #76]	; (8003f64 <BALANCE_Prepare+0x1c4>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4a12      	ldr	r2, [pc, #72]	; (8003f64 <BALANCE_Prepare+0x1c4>)
 8003f1a:	6013      	str	r3, [r2, #0]
	Front = (Front < -0.4) ? -0.4 : Front;
 8003f1c:	4b11      	ldr	r3, [pc, #68]	; (8003f64 <BALANCE_Prepare+0x1c4>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4618      	mov	r0, r3
 8003f22:	f7fc fab5 	bl	8000490 <__aeabi_f2d>
 8003f26:	a30c      	add	r3, pc, #48	; (adr r3, 8003f58 <BALANCE_Prepare+0x1b8>)
 8003f28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f2c:	f7fc fd7a 	bl	8000a24 <__aeabi_dcmplt>
 8003f30:	4603      	mov	r3, r0
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d001      	beq.n	8003f3a <BALANCE_Prepare+0x19a>
 8003f36:	4b18      	ldr	r3, [pc, #96]	; (8003f98 <BALANCE_Prepare+0x1f8>)
 8003f38:	e001      	b.n	8003f3e <BALANCE_Prepare+0x19e>
 8003f3a:	4b0a      	ldr	r3, [pc, #40]	; (8003f64 <BALANCE_Prepare+0x1c4>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4a09      	ldr	r2, [pc, #36]	; (8003f64 <BALANCE_Prepare+0x1c4>)
 8003f40:	6013      	str	r3, [r2, #0]

	// Point to add IK sensor

	// Point to add ParkingMode
}
 8003f42:	bf00      	nop
 8003f44:	bd80      	pop	{r7, pc}
 8003f46:	bf00      	nop
 8003f48:	d2f1a9fc 	.word	0xd2f1a9fc
 8003f4c:	3f50624d 	.word	0x3f50624d
 8003f50:	47ae147b 	.word	0x47ae147b
 8003f54:	3f947ae1 	.word	0x3f947ae1
 8003f58:	9999999a 	.word	0x9999999a
 8003f5c:	bfd99999 	.word	0xbfd99999
 8003f60:	200000a8 	.word	0x200000a8
 8003f64:	200000b0 	.word	0x200000b0
 8003f68:	200000ac 	.word	0x200000ac
 8003f6c:	200000b4 	.word	0x200000b4
 8003f70:	200001cc 	.word	0x200001cc
 8003f74:	20000164 	.word	0x20000164
 8003f78:	200001a8 	.word	0x200001a8
 8003f7c:	2000010c 	.word	0x2000010c
 8003f80:	20000148 	.word	0x20000148
 8003f84:	200001d0 	.word	0x200001d0
 8003f88:	42b40000 	.word	0x42b40000
 8003f8c:	42b40000 	.word	0x42b40000
 8003f90:	c2b40000 	.word	0xc2b40000
 8003f94:	c2b40000 	.word	0xc2b40000
 8003f98:	becccccd 	.word	0xbecccccd
 8003f9c:	00000000 	.word	0x00000000

08003fa0 <BALANCE_Calculate_Speeds>:

void BALANCE_Calculate_Speeds()
{
 8003fa0:	b5b0      	push	{r4, r5, r7, lr}
 8003fa2:	b082      	sub	sp, #8
 8003fa4:	af00      	add	r7, sp, #0
	//LEFT
	float TimeS = (HAL_GetTick() - StepsLeftPreviousTime) / 1000.0;
 8003fa6:	f001 f8d1 	bl	800514c <HAL_GetTick>
 8003faa:	4602      	mov	r2, r0
 8003fac:	4b88      	ldr	r3, [pc, #544]	; (80041d0 <BALANCE_Calculate_Speeds+0x230>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	1ad3      	subs	r3, r2, r3
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	f7fc fa4a 	bl	800044c <__aeabi_ui2d>
 8003fb8:	f04f 0200 	mov.w	r2, #0
 8003fbc:	4b85      	ldr	r3, [pc, #532]	; (80041d4 <BALANCE_Calculate_Speeds+0x234>)
 8003fbe:	f7fc fbe9 	bl	8000794 <__aeabi_ddiv>
 8003fc2:	4602      	mov	r2, r0
 8003fc4:	460b      	mov	r3, r1
 8003fc6:	4610      	mov	r0, r2
 8003fc8:	4619      	mov	r1, r3
 8003fca:	f7fc fd53 	bl	8000a74 <__aeabi_d2f>
 8003fce:	4603      	mov	r3, r0
 8003fd0:	607b      	str	r3, [r7, #4]
	if (TimeS > SPEED_STEPS_MAX_TIME)
 8003fd2:	6878      	ldr	r0, [r7, #4]
 8003fd4:	f7fc fa5c 	bl	8000490 <__aeabi_f2d>
 8003fd8:	a379      	add	r3, pc, #484	; (adr r3, 80041c0 <BALANCE_Calculate_Speeds+0x220>)
 8003fda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fde:	f7fc fd3f 	bl	8000a60 <__aeabi_dcmpgt>
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d005      	beq.n	8003ff4 <BALANCE_Calculate_Speeds+0x54>
	{
		TimeS = SPEED_STEPS_MAX_TIME;
 8003fe8:	4b7b      	ldr	r3, [pc, #492]	; (80041d8 <BALANCE_Calculate_Speeds+0x238>)
 8003fea:	607b      	str	r3, [r7, #4]
	    LeftSpeed = 0;
 8003fec:	4b7b      	ldr	r3, [pc, #492]	; (80041dc <BALANCE_Calculate_Speeds+0x23c>)
 8003fee:	f04f 0200 	mov.w	r2, #0
 8003ff2:	601a      	str	r2, [r3, #0]
	}
	if (HallLeftStep != StepsLeftPrevious)
 8003ff4:	4b7a      	ldr	r3, [pc, #488]	; (80041e0 <BALANCE_Calculate_Speeds+0x240>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	ee07 3a90 	vmov	s15, r3
 8003ffc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004000:	4b78      	ldr	r3, [pc, #480]	; (80041e4 <BALANCE_Calculate_Speeds+0x244>)
 8004002:	edd3 7a00 	vldr	s15, [r3]
 8004006:	eeb4 7a67 	vcmp.f32	s14, s15
 800400a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800400e:	d037      	beq.n	8004080 <BALANCE_Calculate_Speeds+0xe0>
	{
		LeftSpeed = ((HallLeftStep - StepsLeftPrevious) * STEPS_TO_METERS) / TimeS;
 8004010:	4b74      	ldr	r3, [pc, #464]	; (80041e4 <BALANCE_Calculate_Speeds+0x244>)
 8004012:	ed93 7a00 	vldr	s14, [r3]
 8004016:	4b72      	ldr	r3, [pc, #456]	; (80041e0 <BALANCE_Calculate_Speeds+0x240>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	ee07 3a90 	vmov	s15, r3
 800401e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004022:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004026:	ee17 0a90 	vmov	r0, s15
 800402a:	f7fc fa31 	bl	8000490 <__aeabi_f2d>
 800402e:	a366      	add	r3, pc, #408	; (adr r3, 80041c8 <BALANCE_Calculate_Speeds+0x228>)
 8004030:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004034:	f7fc fa84 	bl	8000540 <__aeabi_dmul>
 8004038:	4602      	mov	r2, r0
 800403a:	460b      	mov	r3, r1
 800403c:	4614      	mov	r4, r2
 800403e:	461d      	mov	r5, r3
 8004040:	6878      	ldr	r0, [r7, #4]
 8004042:	f7fc fa25 	bl	8000490 <__aeabi_f2d>
 8004046:	4602      	mov	r2, r0
 8004048:	460b      	mov	r3, r1
 800404a:	4620      	mov	r0, r4
 800404c:	4629      	mov	r1, r5
 800404e:	f7fc fba1 	bl	8000794 <__aeabi_ddiv>
 8004052:	4602      	mov	r2, r0
 8004054:	460b      	mov	r3, r1
 8004056:	4610      	mov	r0, r2
 8004058:	4619      	mov	r1, r3
 800405a:	f7fc fd0b 	bl	8000a74 <__aeabi_d2f>
 800405e:	4603      	mov	r3, r0
 8004060:	4a5e      	ldr	r2, [pc, #376]	; (80041dc <BALANCE_Calculate_Speeds+0x23c>)
 8004062:	6013      	str	r3, [r2, #0]
	    StepsLeftPrevious = HallLeftStep;
 8004064:	4b5f      	ldr	r3, [pc, #380]	; (80041e4 <BALANCE_Calculate_Speeds+0x244>)
 8004066:	edd3 7a00 	vldr	s15, [r3]
 800406a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800406e:	ee17 2a90 	vmov	r2, s15
 8004072:	4b5b      	ldr	r3, [pc, #364]	; (80041e0 <BALANCE_Calculate_Speeds+0x240>)
 8004074:	601a      	str	r2, [r3, #0]
	    StepsLeftPreviousTime = HAL_GetTick();
 8004076:	f001 f869 	bl	800514c <HAL_GetTick>
 800407a:	4603      	mov	r3, r0
 800407c:	4a54      	ldr	r2, [pc, #336]	; (80041d0 <BALANCE_Calculate_Speeds+0x230>)
 800407e:	6013      	str	r3, [r2, #0]
	}

	//RIGHT
	TimeS = (HAL_GetTick() - StepsRightPreviousTime) / 1000.0;
 8004080:	f001 f864 	bl	800514c <HAL_GetTick>
 8004084:	4602      	mov	r2, r0
 8004086:	4b58      	ldr	r3, [pc, #352]	; (80041e8 <BALANCE_Calculate_Speeds+0x248>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	1ad3      	subs	r3, r2, r3
 800408c:	4618      	mov	r0, r3
 800408e:	f7fc f9dd 	bl	800044c <__aeabi_ui2d>
 8004092:	f04f 0200 	mov.w	r2, #0
 8004096:	4b4f      	ldr	r3, [pc, #316]	; (80041d4 <BALANCE_Calculate_Speeds+0x234>)
 8004098:	f7fc fb7c 	bl	8000794 <__aeabi_ddiv>
 800409c:	4602      	mov	r2, r0
 800409e:	460b      	mov	r3, r1
 80040a0:	4610      	mov	r0, r2
 80040a2:	4619      	mov	r1, r3
 80040a4:	f7fc fce6 	bl	8000a74 <__aeabi_d2f>
 80040a8:	4603      	mov	r3, r0
 80040aa:	607b      	str	r3, [r7, #4]
	if (TimeS > SPEED_STEPS_MAX_TIME)
 80040ac:	6878      	ldr	r0, [r7, #4]
 80040ae:	f7fc f9ef 	bl	8000490 <__aeabi_f2d>
 80040b2:	a343      	add	r3, pc, #268	; (adr r3, 80041c0 <BALANCE_Calculate_Speeds+0x220>)
 80040b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040b8:	f7fc fcd2 	bl	8000a60 <__aeabi_dcmpgt>
 80040bc:	4603      	mov	r3, r0
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d005      	beq.n	80040ce <BALANCE_Calculate_Speeds+0x12e>
	{
		TimeS = SPEED_STEPS_MAX_TIME;
 80040c2:	4b45      	ldr	r3, [pc, #276]	; (80041d8 <BALANCE_Calculate_Speeds+0x238>)
 80040c4:	607b      	str	r3, [r7, #4]
	    RightSpeed = 0;
 80040c6:	4b49      	ldr	r3, [pc, #292]	; (80041ec <BALANCE_Calculate_Speeds+0x24c>)
 80040c8:	f04f 0200 	mov.w	r2, #0
 80040cc:	601a      	str	r2, [r3, #0]
	}
	if (HallRightStep != StepsRightPrevious)
 80040ce:	4b48      	ldr	r3, [pc, #288]	; (80041f0 <BALANCE_Calculate_Speeds+0x250>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	ee07 3a90 	vmov	s15, r3
 80040d6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80040da:	4b46      	ldr	r3, [pc, #280]	; (80041f4 <BALANCE_Calculate_Speeds+0x254>)
 80040dc:	edd3 7a00 	vldr	s15, [r3]
 80040e0:	eeb4 7a67 	vcmp.f32	s14, s15
 80040e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040e8:	d037      	beq.n	800415a <BALANCE_Calculate_Speeds+0x1ba>
	{
		RightSpeed = ((HallRightStep - StepsRightPrevious) * STEPS_TO_METERS) / TimeS;
 80040ea:	4b42      	ldr	r3, [pc, #264]	; (80041f4 <BALANCE_Calculate_Speeds+0x254>)
 80040ec:	ed93 7a00 	vldr	s14, [r3]
 80040f0:	4b3f      	ldr	r3, [pc, #252]	; (80041f0 <BALANCE_Calculate_Speeds+0x250>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	ee07 3a90 	vmov	s15, r3
 80040f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80040fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004100:	ee17 0a90 	vmov	r0, s15
 8004104:	f7fc f9c4 	bl	8000490 <__aeabi_f2d>
 8004108:	a32f      	add	r3, pc, #188	; (adr r3, 80041c8 <BALANCE_Calculate_Speeds+0x228>)
 800410a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800410e:	f7fc fa17 	bl	8000540 <__aeabi_dmul>
 8004112:	4602      	mov	r2, r0
 8004114:	460b      	mov	r3, r1
 8004116:	4614      	mov	r4, r2
 8004118:	461d      	mov	r5, r3
 800411a:	6878      	ldr	r0, [r7, #4]
 800411c:	f7fc f9b8 	bl	8000490 <__aeabi_f2d>
 8004120:	4602      	mov	r2, r0
 8004122:	460b      	mov	r3, r1
 8004124:	4620      	mov	r0, r4
 8004126:	4629      	mov	r1, r5
 8004128:	f7fc fb34 	bl	8000794 <__aeabi_ddiv>
 800412c:	4602      	mov	r2, r0
 800412e:	460b      	mov	r3, r1
 8004130:	4610      	mov	r0, r2
 8004132:	4619      	mov	r1, r3
 8004134:	f7fc fc9e 	bl	8000a74 <__aeabi_d2f>
 8004138:	4603      	mov	r3, r0
 800413a:	4a2c      	ldr	r2, [pc, #176]	; (80041ec <BALANCE_Calculate_Speeds+0x24c>)
 800413c:	6013      	str	r3, [r2, #0]
	    StepsRightPrevious = HallRightStep;
 800413e:	4b2d      	ldr	r3, [pc, #180]	; (80041f4 <BALANCE_Calculate_Speeds+0x254>)
 8004140:	edd3 7a00 	vldr	s15, [r3]
 8004144:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004148:	ee17 2a90 	vmov	r2, s15
 800414c:	4b28      	ldr	r3, [pc, #160]	; (80041f0 <BALANCE_Calculate_Speeds+0x250>)
 800414e:	601a      	str	r2, [r3, #0]
	    StepsRightPreviousTime = HAL_GetTick();
 8004150:	f000 fffc 	bl	800514c <HAL_GetTick>
 8004154:	4603      	mov	r3, r0
 8004156:	4a24      	ldr	r2, [pc, #144]	; (80041e8 <BALANCE_Calculate_Speeds+0x248>)
 8004158:	6013      	str	r3, [r2, #0]
	}

	PositionLinear = ((HallLeftStep + HallRightStep) / 2) * STEPS_TO_METERS;
 800415a:	4b22      	ldr	r3, [pc, #136]	; (80041e4 <BALANCE_Calculate_Speeds+0x244>)
 800415c:	ed93 7a00 	vldr	s14, [r3]
 8004160:	4b24      	ldr	r3, [pc, #144]	; (80041f4 <BALANCE_Calculate_Speeds+0x254>)
 8004162:	edd3 7a00 	vldr	s15, [r3]
 8004166:	ee77 7a27 	vadd.f32	s15, s14, s15
 800416a:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800416e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004172:	ee16 0a90 	vmov	r0, s13
 8004176:	f7fc f98b 	bl	8000490 <__aeabi_f2d>
 800417a:	a313      	add	r3, pc, #76	; (adr r3, 80041c8 <BALANCE_Calculate_Speeds+0x228>)
 800417c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004180:	f7fc f9de 	bl	8000540 <__aeabi_dmul>
 8004184:	4602      	mov	r2, r0
 8004186:	460b      	mov	r3, r1
 8004188:	4610      	mov	r0, r2
 800418a:	4619      	mov	r1, r3
 800418c:	f7fc fc72 	bl	8000a74 <__aeabi_d2f>
 8004190:	4603      	mov	r3, r0
 8004192:	4a19      	ldr	r2, [pc, #100]	; (80041f8 <BALANCE_Calculate_Speeds+0x258>)
 8004194:	6013      	str	r3, [r2, #0]
	SpeedLinear = (LeftSpeed + RightSpeed) / 2.0;
 8004196:	4b11      	ldr	r3, [pc, #68]	; (80041dc <BALANCE_Calculate_Speeds+0x23c>)
 8004198:	ed93 7a00 	vldr	s14, [r3]
 800419c:	4b13      	ldr	r3, [pc, #76]	; (80041ec <BALANCE_Calculate_Speeds+0x24c>)
 800419e:	edd3 7a00 	vldr	s15, [r3]
 80041a2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80041a6:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80041aa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80041ae:	4b13      	ldr	r3, [pc, #76]	; (80041fc <BALANCE_Calculate_Speeds+0x25c>)
 80041b0:	edc3 7a00 	vstr	s15, [r3]
}
 80041b4:	bf00      	nop
 80041b6:	3708      	adds	r7, #8
 80041b8:	46bd      	mov	sp, r7
 80041ba:	bdb0      	pop	{r4, r5, r7, pc}
 80041bc:	f3af 8000 	nop.w
 80041c0:	9999999a 	.word	0x9999999a
 80041c4:	3fc99999 	.word	0x3fc99999
 80041c8:	8121fb7c 	.word	0x8121fb7c
 80041cc:	3f821fb7 	.word	0x3f821fb7
 80041d0:	2000026c 	.word	0x2000026c
 80041d4:	408f4000 	.word	0x408f4000
 80041d8:	3e4ccccd 	.word	0x3e4ccccd
 80041dc:	200001a8 	.word	0x200001a8
 80041e0:	200001e4 	.word	0x200001e4
 80041e4:	20000130 	.word	0x20000130
 80041e8:	20000244 	.word	0x20000244
 80041ec:	2000010c 	.word	0x2000010c
 80041f0:	20000100 	.word	0x20000100
 80041f4:	20000200 	.word	0x20000200
 80041f8:	2000016c 	.word	0x2000016c
 80041fc:	20000164 	.word	0x20000164

08004200 <Interpolation>:

float Interpolation(float Value, float Min, float Max)
{
 8004200:	b480      	push	{r7}
 8004202:	b087      	sub	sp, #28
 8004204:	af00      	add	r7, sp, #0
 8004206:	ed87 0a03 	vstr	s0, [r7, #12]
 800420a:	edc7 0a02 	vstr	s1, [r7, #8]
 800420e:	ed87 1a01 	vstr	s2, [r7, #4]
    float Result = (Value - Min) / (Max - Min);
 8004212:	ed97 7a03 	vldr	s14, [r7, #12]
 8004216:	edd7 7a02 	vldr	s15, [r7, #8]
 800421a:	ee77 6a67 	vsub.f32	s13, s14, s15
 800421e:	ed97 7a01 	vldr	s14, [r7, #4]
 8004222:	edd7 7a02 	vldr	s15, [r7, #8]
 8004226:	ee37 7a67 	vsub.f32	s14, s14, s15
 800422a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800422e:	edc7 7a05 	vstr	s15, [r7, #20]
    if (Result > 1)
 8004232:	edd7 7a05 	vldr	s15, [r7, #20]
 8004236:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800423a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800423e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004242:	dd02      	ble.n	800424a <Interpolation+0x4a>
    {
        return 1;
 8004244:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8004248:	e00a      	b.n	8004260 <Interpolation+0x60>
    }
    if (Result < 0)
 800424a:	edd7 7a05 	vldr	s15, [r7, #20]
 800424e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004252:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004256:	d502      	bpl.n	800425e <Interpolation+0x5e>
    {
        return 0;
 8004258:	f04f 0300 	mov.w	r3, #0
 800425c:	e000      	b.n	8004260 <Interpolation+0x60>
    }
    return Result;
 800425e:	697b      	ldr	r3, [r7, #20]
 8004260:	ee07 3a90 	vmov	s15, r3
}
 8004264:	eeb0 0a67 	vmov.f32	s0, s15
 8004268:	371c      	adds	r7, #28
 800426a:	46bd      	mov	sp, r7
 800426c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004270:	4770      	bx	lr
 8004272:	0000      	movs	r0, r0
 8004274:	0000      	movs	r0, r0
	...

08004278 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004278:	b5b0      	push	{r4, r5, r7, lr}
 800427a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800427c:	f000 ff00 	bl	8005080 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004280:	f000 f964 	bl	800454c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004284:	f7fe fe04 	bl	8002e90 <MX_GPIO_Init>
  MX_DMA_Init();
 8004288:	f7fe fdca 	bl	8002e20 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800428c:	f000 fd48 	bl	8004d20 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8004290:	f7fe fcf8 	bl	8002c84 <MX_ADC1_Init>
  MX_TIM2_Init();
 8004294:	f000 fae8 	bl	8004868 <MX_TIM2_Init>
  MX_TIM6_Init();
 8004298:	f000 fb7c 	bl	8004994 <MX_TIM6_Init>
  MX_TIM7_Init();
 800429c:	f000 fbb0 	bl	8004a00 <MX_TIM7_Init>
  MX_TIM14_Init();
 80042a0:	f000 fbe4 	bl	8004a6c <MX_TIM14_Init>
  MX_UART4_Init();
 80042a4:	f000 fd12 	bl	8004ccc <MX_UART4_Init>
  MX_SPI2_Init();
 80042a8:	f000 f9c0 	bl	800462c <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  icm20948_init();
 80042ac:	f7fe f812 	bl	80022d4 <icm20948_init>
  ak09916_init ();
 80042b0:	f7fe f83a 	bl	8002328 <ak09916_init>
  IMU_INIT();
 80042b4:	f7fe ffc2 	bl	800323c <IMU_INIT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  IMU_UPDATE();
 80042b8:	f7ff f804 	bl	80032c4 <IMU_UPDATE>

	  if (HAL_GetTick() - PackageLastTimeReset_Motherboard > 100) // UART2 RECEIVE FEEDBACK
 80042bc:	f000 ff46 	bl	800514c <HAL_GetTick>
 80042c0:	4602      	mov	r2, r0
 80042c2:	4b8d      	ldr	r3, [pc, #564]	; (80044f8 <main+0x280>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	1ad3      	subs	r3, r2, r3
 80042c8:	2b64      	cmp	r3, #100	; 0x64
 80042ca:	d90e      	bls.n	80042ea <main+0x72>
	  {
		  MX_USART2_UART_Init();
 80042cc:	f000 fd28 	bl	8004d20 <MX_USART2_UART_Init>
		  USART2ReceiveState = 0;
 80042d0:	4b8a      	ldr	r3, [pc, #552]	; (80044fc <main+0x284>)
 80042d2:	2200      	movs	r2, #0
 80042d4:	701a      	strb	r2, [r3, #0]
		  HAL_UART_Receive_DMA(&huart2, (uint8_t*)SerialControlWheelsResponce.Buffer, WHEELS_RESPONCE_SIZE);
 80042d6:	2210      	movs	r2, #16
 80042d8:	4989      	ldr	r1, [pc, #548]	; (8004500 <main+0x288>)
 80042da:	488a      	ldr	r0, [pc, #552]	; (8004504 <main+0x28c>)
 80042dc:	f004 f92c 	bl	8008538 <HAL_UART_Receive_DMA>
		  PackageLastTimeReset_Motherboard = HAL_GetTick();
 80042e0:	f000 ff34 	bl	800514c <HAL_GetTick>
 80042e4:	4603      	mov	r3, r0
 80042e6:	4a84      	ldr	r2, [pc, #528]	; (80044f8 <main+0x280>)
 80042e8:	6013      	str	r3, [r2, #0]
	  }

	  if ((USART2ReceiveState == 10) && (SerialControlWheelsResponce.CR == 13) && (SerialControlWheelsResponce.LF == 10))
 80042ea:	4b84      	ldr	r3, [pc, #528]	; (80044fc <main+0x284>)
 80042ec:	781b      	ldrb	r3, [r3, #0]
 80042ee:	b2db      	uxtb	r3, r3
 80042f0:	2b0a      	cmp	r3, #10
 80042f2:	f040 80f4 	bne.w	80044de <main+0x266>
 80042f6:	4b82      	ldr	r3, [pc, #520]	; (8004500 <main+0x288>)
 80042f8:	7b9b      	ldrb	r3, [r3, #14]
 80042fa:	2b0d      	cmp	r3, #13
 80042fc:	f040 80ef 	bne.w	80044de <main+0x266>
 8004300:	4b7f      	ldr	r3, [pc, #508]	; (8004500 <main+0x288>)
 8004302:	7bdb      	ldrb	r3, [r3, #15]
 8004304:	2b0a      	cmp	r3, #10
 8004306:	f040 80ea 	bne.w	80044de <main+0x266>
	  {
		  USART2ReceiveState = 0;
 800430a:	4b7c      	ldr	r3, [pc, #496]	; (80044fc <main+0x284>)
 800430c:	2200      	movs	r2, #0
 800430e:	701a      	strb	r2, [r3, #0]
		  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 8004310:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004314:	487c      	ldr	r0, [pc, #496]	; (8004508 <main+0x290>)
 8004316:	f002 f874 	bl	8006402 <HAL_GPIO_TogglePin>

		  if (HallActualize(SerialControlWheelsResponce.WheelLeftSteps, HallLeftStepPast, MOTHERBOARD_DIFF))
 800431a:	4b79      	ldr	r3, [pc, #484]	; (8004500 <main+0x288>)
 800431c:	f8d3 3006 	ldr.w	r3, [r3, #6]
 8004320:	ee07 3a90 	vmov	s15, r3
 8004324:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004328:	4b78      	ldr	r3, [pc, #480]	; (800450c <main+0x294>)
 800432a:	ed93 7a00 	vldr	s14, [r3]
 800432e:	ed9f 1a78 	vldr	s2, [pc, #480]	; 8004510 <main+0x298>
 8004332:	eef0 0a47 	vmov.f32	s1, s14
 8004336:	eeb0 0a67 	vmov.f32	s0, s15
 800433a:	f7fe ff4b 	bl	80031d4 <HallActualize>
 800433e:	4603      	mov	r3, r0
 8004340:	2b00      	cmp	r3, #0
 8004342:	d00e      	beq.n	8004362 <main+0xea>
		  {
			  HallLeftStep = SerialControlWheelsResponce.WheelLeftSteps;
 8004344:	4b6e      	ldr	r3, [pc, #440]	; (8004500 <main+0x288>)
 8004346:	f8d3 3006 	ldr.w	r3, [r3, #6]
 800434a:	ee07 3a90 	vmov	s15, r3
 800434e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004352:	4b70      	ldr	r3, [pc, #448]	; (8004514 <main+0x29c>)
 8004354:	edc3 7a00 	vstr	s15, [r3]
			  HallLeftStepPast = HallLeftStep;
 8004358:	4b6e      	ldr	r3, [pc, #440]	; (8004514 <main+0x29c>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4a6b      	ldr	r2, [pc, #428]	; (800450c <main+0x294>)
 800435e:	6013      	str	r3, [r2, #0]
 8004360:	e003      	b.n	800436a <main+0xf2>
		  }
		  else
		  {
			  HallLeftStep = HallLeftStepPast;
 8004362:	4b6a      	ldr	r3, [pc, #424]	; (800450c <main+0x294>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4a6b      	ldr	r2, [pc, #428]	; (8004514 <main+0x29c>)
 8004368:	6013      	str	r3, [r2, #0]
		  }

		  if (HallActualize(SerialControlWheelsResponce.WheelRightSteps, HallRightStepPast, MOTHERBOARD_DIFF))
 800436a:	4b65      	ldr	r3, [pc, #404]	; (8004500 <main+0x288>)
 800436c:	f8d3 300a 	ldr.w	r3, [r3, #10]
 8004370:	ee07 3a90 	vmov	s15, r3
 8004374:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004378:	4b67      	ldr	r3, [pc, #412]	; (8004518 <main+0x2a0>)
 800437a:	ed93 7a00 	vldr	s14, [r3]
 800437e:	ed9f 1a64 	vldr	s2, [pc, #400]	; 8004510 <main+0x298>
 8004382:	eef0 0a47 	vmov.f32	s1, s14
 8004386:	eeb0 0a67 	vmov.f32	s0, s15
 800438a:	f7fe ff23 	bl	80031d4 <HallActualize>
 800438e:	4603      	mov	r3, r0
 8004390:	2b00      	cmp	r3, #0
 8004392:	d00e      	beq.n	80043b2 <main+0x13a>
		  {
			  HallRightStep = SerialControlWheelsResponce.WheelRightSteps;
 8004394:	4b5a      	ldr	r3, [pc, #360]	; (8004500 <main+0x288>)
 8004396:	f8d3 300a 	ldr.w	r3, [r3, #10]
 800439a:	ee07 3a90 	vmov	s15, r3
 800439e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80043a2:	4b5e      	ldr	r3, [pc, #376]	; (800451c <main+0x2a4>)
 80043a4:	edc3 7a00 	vstr	s15, [r3]
			  HallRightStepPast = HallRightStep;
 80043a8:	4b5c      	ldr	r3, [pc, #368]	; (800451c <main+0x2a4>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4a5a      	ldr	r2, [pc, #360]	; (8004518 <main+0x2a0>)
 80043ae:	6013      	str	r3, [r2, #0]
 80043b0:	e003      	b.n	80043ba <main+0x142>
		  }
		  else
		  {
			  HallRightStep = HallRightStepPast;
 80043b2:	4b59      	ldr	r3, [pc, #356]	; (8004518 <main+0x2a0>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4a59      	ldr	r2, [pc, #356]	; (800451c <main+0x2a4>)
 80043b8:	6013      	str	r3, [r2, #0]
		  }

		  PackageLastTimeReset_Motherboard = HAL_GetTick();
 80043ba:	f000 fec7 	bl	800514c <HAL_GetTick>
 80043be:	4603      	mov	r3, r0
 80043c0:	4a4d      	ldr	r2, [pc, #308]	; (80044f8 <main+0x280>)
 80043c2:	6013      	str	r3, [r2, #0]

		  switch (SerialControlWheelsResponce.ParameterNumber)
 80043c4:	4b4e      	ldr	r3, [pc, #312]	; (8004500 <main+0x288>)
 80043c6:	785b      	ldrb	r3, [r3, #1]
 80043c8:	2b07      	cmp	r3, #7
 80043ca:	f200 8089 	bhi.w	80044e0 <main+0x268>
 80043ce:	a201      	add	r2, pc, #4	; (adr r2, 80043d4 <main+0x15c>)
 80043d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043d4:	080043f5 	.word	0x080043f5
 80043d8:	0800448b 	.word	0x0800448b
 80043dc:	08004497 	.word	0x08004497
 80043e0:	080044a3 	.word	0x080044a3
 80043e4:	080044af 	.word	0x080044af
 80043e8:	080044bb 	.word	0x080044bb
 80043ec:	080044c7 	.word	0x080044c7
 80043f0:	080044d3 	.word	0x080044d3
		  {
		  case 0:
			  Voltage = SerialControlWheelsResponce.ParameterValue;
 80043f4:	4b42      	ldr	r3, [pc, #264]	; (8004500 <main+0x288>)
 80043f6:	f8d3 3002 	ldr.w	r3, [r3, #2]
 80043fa:	4a49      	ldr	r2, [pc, #292]	; (8004520 <main+0x2a8>)
 80043fc:	6013      	str	r3, [r2, #0]
			  Battery += ((Interpolation(Voltage, 28, 41) * 100.0) - Battery) * 0.01;
 80043fe:	4b48      	ldr	r3, [pc, #288]	; (8004520 <main+0x2a8>)
 8004400:	edd3 7a00 	vldr	s15, [r3]
 8004404:	ed9f 1a47 	vldr	s2, [pc, #284]	; 8004524 <main+0x2ac>
 8004408:	eef3 0a0c 	vmov.f32	s1, #60	; 0x41e00000  28.0
 800440c:	eeb0 0a67 	vmov.f32	s0, s15
 8004410:	f7ff fef6 	bl	8004200 <Interpolation>
 8004414:	ee10 3a10 	vmov	r3, s0
 8004418:	4618      	mov	r0, r3
 800441a:	f7fc f839 	bl	8000490 <__aeabi_f2d>
 800441e:	f04f 0200 	mov.w	r2, #0
 8004422:	4b41      	ldr	r3, [pc, #260]	; (8004528 <main+0x2b0>)
 8004424:	f7fc f88c 	bl	8000540 <__aeabi_dmul>
 8004428:	4602      	mov	r2, r0
 800442a:	460b      	mov	r3, r1
 800442c:	4614      	mov	r4, r2
 800442e:	461d      	mov	r5, r3
 8004430:	4b3e      	ldr	r3, [pc, #248]	; (800452c <main+0x2b4>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4618      	mov	r0, r3
 8004436:	f7fc f82b 	bl	8000490 <__aeabi_f2d>
 800443a:	4602      	mov	r2, r0
 800443c:	460b      	mov	r3, r1
 800443e:	4620      	mov	r0, r4
 8004440:	4629      	mov	r1, r5
 8004442:	f7fb fec5 	bl	80001d0 <__aeabi_dsub>
 8004446:	4602      	mov	r2, r0
 8004448:	460b      	mov	r3, r1
 800444a:	4610      	mov	r0, r2
 800444c:	4619      	mov	r1, r3
 800444e:	a328      	add	r3, pc, #160	; (adr r3, 80044f0 <main+0x278>)
 8004450:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004454:	f7fc f874 	bl	8000540 <__aeabi_dmul>
 8004458:	4602      	mov	r2, r0
 800445a:	460b      	mov	r3, r1
 800445c:	4614      	mov	r4, r2
 800445e:	461d      	mov	r5, r3
 8004460:	4b32      	ldr	r3, [pc, #200]	; (800452c <main+0x2b4>)
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4618      	mov	r0, r3
 8004466:	f7fc f813 	bl	8000490 <__aeabi_f2d>
 800446a:	4602      	mov	r2, r0
 800446c:	460b      	mov	r3, r1
 800446e:	4620      	mov	r0, r4
 8004470:	4629      	mov	r1, r5
 8004472:	f7fb feaf 	bl	80001d4 <__adddf3>
 8004476:	4602      	mov	r2, r0
 8004478:	460b      	mov	r3, r1
 800447a:	4610      	mov	r0, r2
 800447c:	4619      	mov	r1, r3
 800447e:	f7fc faf9 	bl	8000a74 <__aeabi_d2f>
 8004482:	4603      	mov	r3, r0
 8004484:	4a29      	ldr	r2, [pc, #164]	; (800452c <main+0x2b4>)
 8004486:	6013      	str	r3, [r2, #0]
			  break;
 8004488:	e02a      	b.n	80044e0 <main+0x268>
		  case 1:
			  CurrentLeft = SerialControlWheelsResponce.ParameterValue;
 800448a:	4b1d      	ldr	r3, [pc, #116]	; (8004500 <main+0x288>)
 800448c:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8004490:	4a27      	ldr	r2, [pc, #156]	; (8004530 <main+0x2b8>)
 8004492:	6013      	str	r3, [r2, #0]
		      break;
 8004494:	e024      	b.n	80044e0 <main+0x268>
		  case 2:
		      CurrentRight = SerialControlWheelsResponce.ParameterValue;
 8004496:	4b1a      	ldr	r3, [pc, #104]	; (8004500 <main+0x288>)
 8004498:	f8d3 3002 	ldr.w	r3, [r3, #2]
 800449c:	4a25      	ldr	r2, [pc, #148]	; (8004534 <main+0x2bc>)
 800449e:	6013      	str	r3, [r2, #0]
		      break;
 80044a0:	e01e      	b.n	80044e0 <main+0x268>
		  case 3:
		      RPSLeft = SerialControlWheelsResponce.ParameterValue;
 80044a2:	4b17      	ldr	r3, [pc, #92]	; (8004500 <main+0x288>)
 80044a4:	f8d3 3002 	ldr.w	r3, [r3, #2]
 80044a8:	4a23      	ldr	r2, [pc, #140]	; (8004538 <main+0x2c0>)
 80044aa:	6013      	str	r3, [r2, #0]
		      break;
 80044ac:	e018      	b.n	80044e0 <main+0x268>
		  case 4:
		      RPSRight = SerialControlWheelsResponce.ParameterValue;
 80044ae:	4b14      	ldr	r3, [pc, #80]	; (8004500 <main+0x288>)
 80044b0:	f8d3 3002 	ldr.w	r3, [r3, #2]
 80044b4:	4a21      	ldr	r2, [pc, #132]	; (800453c <main+0x2c4>)
 80044b6:	6013      	str	r3, [r2, #0]
		      break;
 80044b8:	e012      	b.n	80044e0 <main+0x268>
		  case 5:
		      OverCurrCount = SerialControlWheelsResponce.ParameterValue;
 80044ba:	4b11      	ldr	r3, [pc, #68]	; (8004500 <main+0x288>)
 80044bc:	f8d3 3002 	ldr.w	r3, [r3, #2]
 80044c0:	4a1f      	ldr	r2, [pc, #124]	; (8004540 <main+0x2c8>)
 80044c2:	6013      	str	r3, [r2, #0]
		      break;
 80044c4:	e00c      	b.n	80044e0 <main+0x268>
		  case 6:
		      ConnErrCount = SerialControlWheelsResponce.ParameterValue;
 80044c6:	4b0e      	ldr	r3, [pc, #56]	; (8004500 <main+0x288>)
 80044c8:	f8d3 3002 	ldr.w	r3, [r3, #2]
 80044cc:	4a1d      	ldr	r2, [pc, #116]	; (8004544 <main+0x2cc>)
 80044ce:	6013      	str	r3, [r2, #0]
		      break;
 80044d0:	e006      	b.n	80044e0 <main+0x268>
		  case 7:
		      CommTime = SerialControlWheelsResponce.ParameterValue;
 80044d2:	4b0b      	ldr	r3, [pc, #44]	; (8004500 <main+0x288>)
 80044d4:	f8d3 3002 	ldr.w	r3, [r3, #2]
 80044d8:	4a1b      	ldr	r2, [pc, #108]	; (8004548 <main+0x2d0>)
 80044da:	6013      	str	r3, [r2, #0]
		      break;
 80044dc:	e000      	b.n	80044e0 <main+0x268>
		  }
	  }
 80044de:	bf00      	nop
 		  HAL_UART_Transmit_DMA(&huart4, (uint8_t*)SerialOnBoardResponce.Buffer, ON_BOARD_CONTROL_RESPONCE_SIZE);

		  PackageLastTimeReset_OnBoardPC = HAL_GetTick();
	  }*/

	  BALANCE_Prepare();
 80044e0:	f7ff fc5e 	bl	8003da0 <BALANCE_Prepare>
	  BALANCE_Calculate_Speeds();
 80044e4:	f7ff fd5c 	bl	8003fa0 <BALANCE_Calculate_Speeds>

	  SERIAL_CONTROL_LOOP();
 80044e8:	f7ff fc36 	bl	8003d58 <SERIAL_CONTROL_LOOP>
	  IMU_UPDATE();
 80044ec:	e6e4      	b.n	80042b8 <main+0x40>
 80044ee:	bf00      	nop
 80044f0:	47ae147b 	.word	0x47ae147b
 80044f4:	3f847ae1 	.word	0x3f847ae1
 80044f8:	20000230 	.word	0x20000230
 80044fc:	2000009f 	.word	0x2000009f
 8004500:	20000134 	.word	0x20000134
 8004504:	20000590 	.word	0x20000590
 8004508:	40020c00 	.word	0x40020c00
 800450c:	200000a0 	.word	0x200000a0
 8004510:	42c80000 	.word	0x42c80000
 8004514:	20000130 	.word	0x20000130
 8004518:	200000a4 	.word	0x200000a4
 800451c:	20000200 	.word	0x20000200
 8004520:	20000160 	.word	0x20000160
 8004524:	42240000 	.word	0x42240000
 8004528:	40590000 	.word	0x40590000
 800452c:	200001cc 	.word	0x200001cc
 8004530:	20000110 	.word	0x20000110
 8004534:	200001c8 	.word	0x200001c8
 8004538:	20000264 	.word	0x20000264
 800453c:	20000234 	.word	0x20000234
 8004540:	20000120 	.word	0x20000120
 8004544:	2000022c 	.word	0x2000022c
 8004548:	20000268 	.word	0x20000268

0800454c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b094      	sub	sp, #80	; 0x50
 8004550:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004552:	f107 0320 	add.w	r3, r7, #32
 8004556:	2230      	movs	r2, #48	; 0x30
 8004558:	2100      	movs	r1, #0
 800455a:	4618      	mov	r0, r3
 800455c:	f005 fb20 	bl	8009ba0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004560:	f107 030c 	add.w	r3, r7, #12
 8004564:	2200      	movs	r2, #0
 8004566:	601a      	str	r2, [r3, #0]
 8004568:	605a      	str	r2, [r3, #4]
 800456a:	609a      	str	r2, [r3, #8]
 800456c:	60da      	str	r2, [r3, #12]
 800456e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004570:	2300      	movs	r3, #0
 8004572:	60bb      	str	r3, [r7, #8]
 8004574:	4b28      	ldr	r3, [pc, #160]	; (8004618 <SystemClock_Config+0xcc>)
 8004576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004578:	4a27      	ldr	r2, [pc, #156]	; (8004618 <SystemClock_Config+0xcc>)
 800457a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800457e:	6413      	str	r3, [r2, #64]	; 0x40
 8004580:	4b25      	ldr	r3, [pc, #148]	; (8004618 <SystemClock_Config+0xcc>)
 8004582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004584:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004588:	60bb      	str	r3, [r7, #8]
 800458a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800458c:	2300      	movs	r3, #0
 800458e:	607b      	str	r3, [r7, #4]
 8004590:	4b22      	ldr	r3, [pc, #136]	; (800461c <SystemClock_Config+0xd0>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4a21      	ldr	r2, [pc, #132]	; (800461c <SystemClock_Config+0xd0>)
 8004596:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800459a:	6013      	str	r3, [r2, #0]
 800459c:	4b1f      	ldr	r3, [pc, #124]	; (800461c <SystemClock_Config+0xd0>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80045a4:	607b      	str	r3, [r7, #4]
 80045a6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80045a8:	2301      	movs	r3, #1
 80045aa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80045ac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80045b0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80045b2:	2302      	movs	r3, #2
 80045b4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80045b6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80045ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80045bc:	2304      	movs	r3, #4
 80045be:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80045c0:	23a8      	movs	r3, #168	; 0xa8
 80045c2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80045c4:	2302      	movs	r3, #2
 80045c6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80045c8:	2304      	movs	r3, #4
 80045ca:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80045cc:	f107 0320 	add.w	r3, r7, #32
 80045d0:	4618      	mov	r0, r3
 80045d2:	f001 ff31 	bl	8006438 <HAL_RCC_OscConfig>
 80045d6:	4603      	mov	r3, r0
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d001      	beq.n	80045e0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80045dc:	f000 f820 	bl	8004620 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80045e0:	230f      	movs	r3, #15
 80045e2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80045e4:	2302      	movs	r3, #2
 80045e6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80045e8:	2300      	movs	r3, #0
 80045ea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80045ec:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80045f0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80045f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80045f6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80045f8:	f107 030c 	add.w	r3, r7, #12
 80045fc:	2105      	movs	r1, #5
 80045fe:	4618      	mov	r0, r3
 8004600:	f002 f992 	bl	8006928 <HAL_RCC_ClockConfig>
 8004604:	4603      	mov	r3, r0
 8004606:	2b00      	cmp	r3, #0
 8004608:	d001      	beq.n	800460e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800460a:	f000 f809 	bl	8004620 <Error_Handler>
  }
}
 800460e:	bf00      	nop
 8004610:	3750      	adds	r7, #80	; 0x50
 8004612:	46bd      	mov	sp, r7
 8004614:	bd80      	pop	{r7, pc}
 8004616:	bf00      	nop
 8004618:	40023800 	.word	0x40023800
 800461c:	40007000 	.word	0x40007000

08004620 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004620:	b480      	push	{r7}
 8004622:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004624:	b672      	cpsid	i
}
 8004626:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004628:	e7fe      	b.n	8004628 <Error_Handler+0x8>
	...

0800462c <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8004630:	4b17      	ldr	r3, [pc, #92]	; (8004690 <MX_SPI2_Init+0x64>)
 8004632:	4a18      	ldr	r2, [pc, #96]	; (8004694 <MX_SPI2_Init+0x68>)
 8004634:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8004636:	4b16      	ldr	r3, [pc, #88]	; (8004690 <MX_SPI2_Init+0x64>)
 8004638:	f44f 7282 	mov.w	r2, #260	; 0x104
 800463c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800463e:	4b14      	ldr	r3, [pc, #80]	; (8004690 <MX_SPI2_Init+0x64>)
 8004640:	2200      	movs	r2, #0
 8004642:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8004644:	4b12      	ldr	r3, [pc, #72]	; (8004690 <MX_SPI2_Init+0x64>)
 8004646:	2200      	movs	r2, #0
 8004648:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800464a:	4b11      	ldr	r3, [pc, #68]	; (8004690 <MX_SPI2_Init+0x64>)
 800464c:	2202      	movs	r2, #2
 800464e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8004650:	4b0f      	ldr	r3, [pc, #60]	; (8004690 <MX_SPI2_Init+0x64>)
 8004652:	2201      	movs	r2, #1
 8004654:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8004656:	4b0e      	ldr	r3, [pc, #56]	; (8004690 <MX_SPI2_Init+0x64>)
 8004658:	f44f 7200 	mov.w	r2, #512	; 0x200
 800465c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800465e:	4b0c      	ldr	r3, [pc, #48]	; (8004690 <MX_SPI2_Init+0x64>)
 8004660:	2210      	movs	r2, #16
 8004662:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004664:	4b0a      	ldr	r3, [pc, #40]	; (8004690 <MX_SPI2_Init+0x64>)
 8004666:	2200      	movs	r2, #0
 8004668:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800466a:	4b09      	ldr	r3, [pc, #36]	; (8004690 <MX_SPI2_Init+0x64>)
 800466c:	2200      	movs	r2, #0
 800466e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004670:	4b07      	ldr	r3, [pc, #28]	; (8004690 <MX_SPI2_Init+0x64>)
 8004672:	2200      	movs	r2, #0
 8004674:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8004676:	4b06      	ldr	r3, [pc, #24]	; (8004690 <MX_SPI2_Init+0x64>)
 8004678:	220a      	movs	r2, #10
 800467a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800467c:	4804      	ldr	r0, [pc, #16]	; (8004690 <MX_SPI2_Init+0x64>)
 800467e:	f002 fb4f 	bl	8006d20 <HAL_SPI_Init>
 8004682:	4603      	mov	r3, r0
 8004684:	2b00      	cmp	r3, #0
 8004686:	d001      	beq.n	800468c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8004688:	f7ff ffca 	bl	8004620 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800468c:	bf00      	nop
 800468e:	bd80      	pop	{r7, pc}
 8004690:	200002b4 	.word	0x200002b4
 8004694:	40003800 	.word	0x40003800

08004698 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b08a      	sub	sp, #40	; 0x28
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80046a0:	f107 0314 	add.w	r3, r7, #20
 80046a4:	2200      	movs	r2, #0
 80046a6:	601a      	str	r2, [r3, #0]
 80046a8:	605a      	str	r2, [r3, #4]
 80046aa:	609a      	str	r2, [r3, #8]
 80046ac:	60da      	str	r2, [r3, #12]
 80046ae:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	4a19      	ldr	r2, [pc, #100]	; (800471c <HAL_SPI_MspInit+0x84>)
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d12c      	bne.n	8004714 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80046ba:	2300      	movs	r3, #0
 80046bc:	613b      	str	r3, [r7, #16]
 80046be:	4b18      	ldr	r3, [pc, #96]	; (8004720 <HAL_SPI_MspInit+0x88>)
 80046c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046c2:	4a17      	ldr	r2, [pc, #92]	; (8004720 <HAL_SPI_MspInit+0x88>)
 80046c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80046c8:	6413      	str	r3, [r2, #64]	; 0x40
 80046ca:	4b15      	ldr	r3, [pc, #84]	; (8004720 <HAL_SPI_MspInit+0x88>)
 80046cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80046d2:	613b      	str	r3, [r7, #16]
 80046d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80046d6:	2300      	movs	r3, #0
 80046d8:	60fb      	str	r3, [r7, #12]
 80046da:	4b11      	ldr	r3, [pc, #68]	; (8004720 <HAL_SPI_MspInit+0x88>)
 80046dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046de:	4a10      	ldr	r2, [pc, #64]	; (8004720 <HAL_SPI_MspInit+0x88>)
 80046e0:	f043 0302 	orr.w	r3, r3, #2
 80046e4:	6313      	str	r3, [r2, #48]	; 0x30
 80046e6:	4b0e      	ldr	r3, [pc, #56]	; (8004720 <HAL_SPI_MspInit+0x88>)
 80046e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046ea:	f003 0302 	and.w	r3, r3, #2
 80046ee:	60fb      	str	r3, [r7, #12]
 80046f0:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = ICM20948_SCK_Pin|ICM20948_MISO_Pin|ICM20948_MOSI_Pin;
 80046f2:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80046f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046f8:	2302      	movs	r3, #2
 80046fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046fc:	2300      	movs	r3, #0
 80046fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004700:	2303      	movs	r3, #3
 8004702:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004704:	2305      	movs	r3, #5
 8004706:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004708:	f107 0314 	add.w	r3, r7, #20
 800470c:	4619      	mov	r1, r3
 800470e:	4805      	ldr	r0, [pc, #20]	; (8004724 <HAL_SPI_MspInit+0x8c>)
 8004710:	f001 fcc2 	bl	8006098 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8004714:	bf00      	nop
 8004716:	3728      	adds	r7, #40	; 0x28
 8004718:	46bd      	mov	sp, r7
 800471a:	bd80      	pop	{r7, pc}
 800471c:	40003800 	.word	0x40003800
 8004720:	40023800 	.word	0x40023800
 8004724:	40020400 	.word	0x40020400

08004728 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004728:	b480      	push	{r7}
 800472a:	b083      	sub	sp, #12
 800472c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800472e:	2300      	movs	r3, #0
 8004730:	607b      	str	r3, [r7, #4]
 8004732:	4b10      	ldr	r3, [pc, #64]	; (8004774 <HAL_MspInit+0x4c>)
 8004734:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004736:	4a0f      	ldr	r2, [pc, #60]	; (8004774 <HAL_MspInit+0x4c>)
 8004738:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800473c:	6453      	str	r3, [r2, #68]	; 0x44
 800473e:	4b0d      	ldr	r3, [pc, #52]	; (8004774 <HAL_MspInit+0x4c>)
 8004740:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004742:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004746:	607b      	str	r3, [r7, #4]
 8004748:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800474a:	2300      	movs	r3, #0
 800474c:	603b      	str	r3, [r7, #0]
 800474e:	4b09      	ldr	r3, [pc, #36]	; (8004774 <HAL_MspInit+0x4c>)
 8004750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004752:	4a08      	ldr	r2, [pc, #32]	; (8004774 <HAL_MspInit+0x4c>)
 8004754:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004758:	6413      	str	r3, [r2, #64]	; 0x40
 800475a:	4b06      	ldr	r3, [pc, #24]	; (8004774 <HAL_MspInit+0x4c>)
 800475c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800475e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004762:	603b      	str	r3, [r7, #0]
 8004764:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004766:	bf00      	nop
 8004768:	370c      	adds	r7, #12
 800476a:	46bd      	mov	sp, r7
 800476c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004770:	4770      	bx	lr
 8004772:	bf00      	nop
 8004774:	40023800 	.word	0x40023800

08004778 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004778:	b480      	push	{r7}
 800477a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800477c:	e7fe      	b.n	800477c <NMI_Handler+0x4>

0800477e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800477e:	b480      	push	{r7}
 8004780:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004782:	e7fe      	b.n	8004782 <HardFault_Handler+0x4>

08004784 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004784:	b480      	push	{r7}
 8004786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004788:	e7fe      	b.n	8004788 <MemManage_Handler+0x4>

0800478a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800478a:	b480      	push	{r7}
 800478c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800478e:	e7fe      	b.n	800478e <BusFault_Handler+0x4>

08004790 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004790:	b480      	push	{r7}
 8004792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004794:	e7fe      	b.n	8004794 <UsageFault_Handler+0x4>

08004796 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004796:	b480      	push	{r7}
 8004798:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800479a:	bf00      	nop
 800479c:	46bd      	mov	sp, r7
 800479e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a2:	4770      	bx	lr

080047a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80047a4:	b480      	push	{r7}
 80047a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80047a8:	bf00      	nop
 80047aa:	46bd      	mov	sp, r7
 80047ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b0:	4770      	bx	lr

080047b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80047b2:	b480      	push	{r7}
 80047b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80047b6:	bf00      	nop
 80047b8:	46bd      	mov	sp, r7
 80047ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047be:	4770      	bx	lr

080047c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80047c4:	f000 fcae 	bl	8005124 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80047c8:	bf00      	nop
 80047ca:	bd80      	pop	{r7, pc}

080047cc <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80047cc:	b580      	push	{r7, lr}
 80047ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 80047d0:	4802      	ldr	r0, [pc, #8]	; (80047dc <DMA1_Stream2_IRQHandler+0x10>)
 80047d2:	f001 f9f7 	bl	8005bc4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80047d6:	bf00      	nop
 80047d8:	bd80      	pop	{r7, pc}
 80047da:	bf00      	nop
 80047dc:	2000042c 	.word	0x2000042c

080047e0 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 80047e4:	4802      	ldr	r0, [pc, #8]	; (80047f0 <DMA1_Stream4_IRQHandler+0x10>)
 80047e6:	f001 f9ed 	bl	8005bc4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 80047ea:	bf00      	nop
 80047ec:	bd80      	pop	{r7, pc}
 80047ee:	bf00      	nop
 80047f0:	200005d4 	.word	0x200005d4

080047f4 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80047f8:	4802      	ldr	r0, [pc, #8]	; (8004804 <DMA1_Stream5_IRQHandler+0x10>)
 80047fa:	f001 f9e3 	bl	8005bc4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80047fe:	bf00      	nop
 8004800:	bd80      	pop	{r7, pc}
 8004802:	bf00      	nop
 8004804:	2000048c 	.word	0x2000048c

08004808 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8004808:	b580      	push	{r7, lr}
 800480a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800480c:	4802      	ldr	r0, [pc, #8]	; (8004818 <DMA1_Stream6_IRQHandler+0x10>)
 800480e:	f001 f9d9 	bl	8005bc4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8004812:	bf00      	nop
 8004814:	bd80      	pop	{r7, pc}
 8004816:	bf00      	nop
 8004818:	200004ec 	.word	0x200004ec

0800481c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004820:	4802      	ldr	r0, [pc, #8]	; (800482c <USART2_IRQHandler+0x10>)
 8004822:	f003 feb9 	bl	8008598 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8004826:	bf00      	nop
 8004828:	bd80      	pop	{r7, pc}
 800482a:	bf00      	nop
 800482c:	20000590 	.word	0x20000590

08004830 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8004830:	b580      	push	{r7, lr}
 8004832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8004834:	4802      	ldr	r0, [pc, #8]	; (8004840 <UART4_IRQHandler+0x10>)
 8004836:	f003 feaf 	bl	8008598 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800483a:	bf00      	nop
 800483c:	bd80      	pop	{r7, pc}
 800483e:	bf00      	nop
 8004840:	2000054c 	.word	0x2000054c

08004844 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004844:	b480      	push	{r7}
 8004846:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004848:	4b06      	ldr	r3, [pc, #24]	; (8004864 <SystemInit+0x20>)
 800484a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800484e:	4a05      	ldr	r2, [pc, #20]	; (8004864 <SystemInit+0x20>)
 8004850:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004854:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004858:	bf00      	nop
 800485a:	46bd      	mov	sp, r7
 800485c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004860:	4770      	bx	lr
 8004862:	bf00      	nop
 8004864:	e000ed00 	.word	0xe000ed00

08004868 <MX_TIM2_Init>:
TIM_HandleTypeDef htim7;
TIM_HandleTypeDef htim14;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8004868:	b580      	push	{r7, lr}
 800486a:	b08e      	sub	sp, #56	; 0x38
 800486c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800486e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004872:	2200      	movs	r2, #0
 8004874:	601a      	str	r2, [r3, #0]
 8004876:	605a      	str	r2, [r3, #4]
 8004878:	609a      	str	r2, [r3, #8]
 800487a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800487c:	f107 0320 	add.w	r3, r7, #32
 8004880:	2200      	movs	r2, #0
 8004882:	601a      	str	r2, [r3, #0]
 8004884:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004886:	1d3b      	adds	r3, r7, #4
 8004888:	2200      	movs	r2, #0
 800488a:	601a      	str	r2, [r3, #0]
 800488c:	605a      	str	r2, [r3, #4]
 800488e:	609a      	str	r2, [r3, #8]
 8004890:	60da      	str	r2, [r3, #12]
 8004892:	611a      	str	r2, [r3, #16]
 8004894:	615a      	str	r2, [r3, #20]
 8004896:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004898:	4b3d      	ldr	r3, [pc, #244]	; (8004990 <MX_TIM2_Init+0x128>)
 800489a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800489e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80048a0:	4b3b      	ldr	r3, [pc, #236]	; (8004990 <MX_TIM2_Init+0x128>)
 80048a2:	2200      	movs	r2, #0
 80048a4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80048a6:	4b3a      	ldr	r3, [pc, #232]	; (8004990 <MX_TIM2_Init+0x128>)
 80048a8:	2200      	movs	r2, #0
 80048aa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 89;
 80048ac:	4b38      	ldr	r3, [pc, #224]	; (8004990 <MX_TIM2_Init+0x128>)
 80048ae:	2259      	movs	r2, #89	; 0x59
 80048b0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80048b2:	4b37      	ldr	r3, [pc, #220]	; (8004990 <MX_TIM2_Init+0x128>)
 80048b4:	2200      	movs	r2, #0
 80048b6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80048b8:	4b35      	ldr	r3, [pc, #212]	; (8004990 <MX_TIM2_Init+0x128>)
 80048ba:	2200      	movs	r2, #0
 80048bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80048be:	4834      	ldr	r0, [pc, #208]	; (8004990 <MX_TIM2_Init+0x128>)
 80048c0:	f002 ffd6 	bl	8007870 <HAL_TIM_Base_Init>
 80048c4:	4603      	mov	r3, r0
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d001      	beq.n	80048ce <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 80048ca:	f7ff fea9 	bl	8004620 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80048ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80048d2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80048d4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80048d8:	4619      	mov	r1, r3
 80048da:	482d      	ldr	r0, [pc, #180]	; (8004990 <MX_TIM2_Init+0x128>)
 80048dc:	f003 f932 	bl	8007b44 <HAL_TIM_ConfigClockSource>
 80048e0:	4603      	mov	r3, r0
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d001      	beq.n	80048ea <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 80048e6:	f7ff fe9b 	bl	8004620 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80048ea:	4829      	ldr	r0, [pc, #164]	; (8004990 <MX_TIM2_Init+0x128>)
 80048ec:	f003 f80f 	bl	800790e <HAL_TIM_PWM_Init>
 80048f0:	4603      	mov	r3, r0
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d001      	beq.n	80048fa <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 80048f6:	f7ff fe93 	bl	8004620 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80048fa:	2300      	movs	r3, #0
 80048fc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80048fe:	2300      	movs	r3, #0
 8004900:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004902:	f107 0320 	add.w	r3, r7, #32
 8004906:	4619      	mov	r1, r3
 8004908:	4821      	ldr	r0, [pc, #132]	; (8004990 <MX_TIM2_Init+0x128>)
 800490a:	f003 fccd 	bl	80082a8 <HAL_TIMEx_MasterConfigSynchronization>
 800490e:	4603      	mov	r3, r0
 8004910:	2b00      	cmp	r3, #0
 8004912:	d001      	beq.n	8004918 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8004914:	f7ff fe84 	bl	8004620 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004918:	2360      	movs	r3, #96	; 0x60
 800491a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800491c:	2300      	movs	r3, #0
 800491e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004920:	2300      	movs	r3, #0
 8004922:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004924:	2300      	movs	r3, #0
 8004926:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004928:	1d3b      	adds	r3, r7, #4
 800492a:	2200      	movs	r2, #0
 800492c:	4619      	mov	r1, r3
 800492e:	4818      	ldr	r0, [pc, #96]	; (8004990 <MX_TIM2_Init+0x128>)
 8004930:	f003 f846 	bl	80079c0 <HAL_TIM_PWM_ConfigChannel>
 8004934:	4603      	mov	r3, r0
 8004936:	2b00      	cmp	r3, #0
 8004938:	d001      	beq.n	800493e <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 800493a:	f7ff fe71 	bl	8004620 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800493e:	1d3b      	adds	r3, r7, #4
 8004940:	2204      	movs	r2, #4
 8004942:	4619      	mov	r1, r3
 8004944:	4812      	ldr	r0, [pc, #72]	; (8004990 <MX_TIM2_Init+0x128>)
 8004946:	f003 f83b 	bl	80079c0 <HAL_TIM_PWM_ConfigChannel>
 800494a:	4603      	mov	r3, r0
 800494c:	2b00      	cmp	r3, #0
 800494e:	d001      	beq.n	8004954 <MX_TIM2_Init+0xec>
  {
    Error_Handler();
 8004950:	f7ff fe66 	bl	8004620 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004954:	1d3b      	adds	r3, r7, #4
 8004956:	2208      	movs	r2, #8
 8004958:	4619      	mov	r1, r3
 800495a:	480d      	ldr	r0, [pc, #52]	; (8004990 <MX_TIM2_Init+0x128>)
 800495c:	f003 f830 	bl	80079c0 <HAL_TIM_PWM_ConfigChannel>
 8004960:	4603      	mov	r3, r0
 8004962:	2b00      	cmp	r3, #0
 8004964:	d001      	beq.n	800496a <MX_TIM2_Init+0x102>
  {
    Error_Handler();
 8004966:	f7ff fe5b 	bl	8004620 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800496a:	1d3b      	adds	r3, r7, #4
 800496c:	220c      	movs	r2, #12
 800496e:	4619      	mov	r1, r3
 8004970:	4807      	ldr	r0, [pc, #28]	; (8004990 <MX_TIM2_Init+0x128>)
 8004972:	f003 f825 	bl	80079c0 <HAL_TIM_PWM_ConfigChannel>
 8004976:	4603      	mov	r3, r0
 8004978:	2b00      	cmp	r3, #0
 800497a:	d001      	beq.n	8004980 <MX_TIM2_Init+0x118>
  {
    Error_Handler();
 800497c:	f7ff fe50 	bl	8004620 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8004980:	4803      	ldr	r0, [pc, #12]	; (8004990 <MX_TIM2_Init+0x128>)
 8004982:	f000 f923 	bl	8004bcc <HAL_TIM_MspPostInit>

}
 8004986:	bf00      	nop
 8004988:	3738      	adds	r7, #56	; 0x38
 800498a:	46bd      	mov	sp, r7
 800498c:	bd80      	pop	{r7, pc}
 800498e:	bf00      	nop
 8004990:	20000354 	.word	0x20000354

08004994 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8004994:	b580      	push	{r7, lr}
 8004996:	b082      	sub	sp, #8
 8004998:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800499a:	463b      	mov	r3, r7
 800499c:	2200      	movs	r2, #0
 800499e:	601a      	str	r2, [r3, #0]
 80049a0:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80049a2:	4b15      	ldr	r3, [pc, #84]	; (80049f8 <MX_TIM6_Init+0x64>)
 80049a4:	4a15      	ldr	r2, [pc, #84]	; (80049fc <MX_TIM6_Init+0x68>)
 80049a6:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 80049a8:	4b13      	ldr	r3, [pc, #76]	; (80049f8 <MX_TIM6_Init+0x64>)
 80049aa:	2200      	movs	r2, #0
 80049ac:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80049ae:	4b12      	ldr	r3, [pc, #72]	; (80049f8 <MX_TIM6_Init+0x64>)
 80049b0:	2200      	movs	r2, #0
 80049b2:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 80049b4:	4b10      	ldr	r3, [pc, #64]	; (80049f8 <MX_TIM6_Init+0x64>)
 80049b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80049ba:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80049bc:	4b0e      	ldr	r3, [pc, #56]	; (80049f8 <MX_TIM6_Init+0x64>)
 80049be:	2200      	movs	r2, #0
 80049c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80049c2:	480d      	ldr	r0, [pc, #52]	; (80049f8 <MX_TIM6_Init+0x64>)
 80049c4:	f002 ff54 	bl	8007870 <HAL_TIM_Base_Init>
 80049c8:	4603      	mov	r3, r0
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d001      	beq.n	80049d2 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 80049ce:	f7ff fe27 	bl	8004620 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80049d2:	2300      	movs	r3, #0
 80049d4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80049d6:	2300      	movs	r3, #0
 80049d8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80049da:	463b      	mov	r3, r7
 80049dc:	4619      	mov	r1, r3
 80049de:	4806      	ldr	r0, [pc, #24]	; (80049f8 <MX_TIM6_Init+0x64>)
 80049e0:	f003 fc62 	bl	80082a8 <HAL_TIMEx_MasterConfigSynchronization>
 80049e4:	4603      	mov	r3, r0
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d001      	beq.n	80049ee <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 80049ea:	f7ff fe19 	bl	8004620 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80049ee:	bf00      	nop
 80049f0:	3708      	adds	r7, #8
 80049f2:	46bd      	mov	sp, r7
 80049f4:	bd80      	pop	{r7, pc}
 80049f6:	bf00      	nop
 80049f8:	2000030c 	.word	0x2000030c
 80049fc:	40001000 	.word	0x40001000

08004a00 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b082      	sub	sp, #8
 8004a04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004a06:	463b      	mov	r3, r7
 8004a08:	2200      	movs	r2, #0
 8004a0a:	601a      	str	r2, [r3, #0]
 8004a0c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8004a0e:	4b15      	ldr	r3, [pc, #84]	; (8004a64 <MX_TIM7_Init+0x64>)
 8004a10:	4a15      	ldr	r2, [pc, #84]	; (8004a68 <MX_TIM7_Init+0x68>)
 8004a12:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 8004a14:	4b13      	ldr	r3, [pc, #76]	; (8004a64 <MX_TIM7_Init+0x64>)
 8004a16:	2200      	movs	r2, #0
 8004a18:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004a1a:	4b12      	ldr	r3, [pc, #72]	; (8004a64 <MX_TIM7_Init+0x64>)
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8004a20:	4b10      	ldr	r3, [pc, #64]	; (8004a64 <MX_TIM7_Init+0x64>)
 8004a22:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004a26:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004a28:	4b0e      	ldr	r3, [pc, #56]	; (8004a64 <MX_TIM7_Init+0x64>)
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8004a2e:	480d      	ldr	r0, [pc, #52]	; (8004a64 <MX_TIM7_Init+0x64>)
 8004a30:	f002 ff1e 	bl	8007870 <HAL_TIM_Base_Init>
 8004a34:	4603      	mov	r3, r0
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d001      	beq.n	8004a3e <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8004a3a:	f7ff fdf1 	bl	8004620 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004a3e:	2300      	movs	r3, #0
 8004a40:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004a42:	2300      	movs	r3, #0
 8004a44:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8004a46:	463b      	mov	r3, r7
 8004a48:	4619      	mov	r1, r3
 8004a4a:	4806      	ldr	r0, [pc, #24]	; (8004a64 <MX_TIM7_Init+0x64>)
 8004a4c:	f003 fc2c 	bl	80082a8 <HAL_TIMEx_MasterConfigSynchronization>
 8004a50:	4603      	mov	r3, r0
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d001      	beq.n	8004a5a <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8004a56:	f7ff fde3 	bl	8004620 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8004a5a:	bf00      	nop
 8004a5c:	3708      	adds	r7, #8
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	bd80      	pop	{r7, pc}
 8004a62:	bf00      	nop
 8004a64:	200003e4 	.word	0x200003e4
 8004a68:	40001400 	.word	0x40001400

08004a6c <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b088      	sub	sp, #32
 8004a70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8004a72:	1d3b      	adds	r3, r7, #4
 8004a74:	2200      	movs	r2, #0
 8004a76:	601a      	str	r2, [r3, #0]
 8004a78:	605a      	str	r2, [r3, #4]
 8004a7a:	609a      	str	r2, [r3, #8]
 8004a7c:	60da      	str	r2, [r3, #12]
 8004a7e:	611a      	str	r2, [r3, #16]
 8004a80:	615a      	str	r2, [r3, #20]
 8004a82:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8004a84:	4b1e      	ldr	r3, [pc, #120]	; (8004b00 <MX_TIM14_Init+0x94>)
 8004a86:	4a1f      	ldr	r2, [pc, #124]	; (8004b04 <MX_TIM14_Init+0x98>)
 8004a88:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 720;
 8004a8a:	4b1d      	ldr	r3, [pc, #116]	; (8004b00 <MX_TIM14_Init+0x94>)
 8004a8c:	f44f 7234 	mov.w	r2, #720	; 0x2d0
 8004a90:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004a92:	4b1b      	ldr	r3, [pc, #108]	; (8004b00 <MX_TIM14_Init+0x94>)
 8004a94:	2200      	movs	r2, #0
 8004a96:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 2000;
 8004a98:	4b19      	ldr	r3, [pc, #100]	; (8004b00 <MX_TIM14_Init+0x94>)
 8004a9a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8004a9e:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004aa0:	4b17      	ldr	r3, [pc, #92]	; (8004b00 <MX_TIM14_Init+0x94>)
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004aa6:	4b16      	ldr	r3, [pc, #88]	; (8004b00 <MX_TIM14_Init+0x94>)
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8004aac:	4814      	ldr	r0, [pc, #80]	; (8004b00 <MX_TIM14_Init+0x94>)
 8004aae:	f002 fedf 	bl	8007870 <HAL_TIM_Base_Init>
 8004ab2:	4603      	mov	r3, r0
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d001      	beq.n	8004abc <MX_TIM14_Init+0x50>
  {
    Error_Handler();
 8004ab8:	f7ff fdb2 	bl	8004620 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 8004abc:	4810      	ldr	r0, [pc, #64]	; (8004b00 <MX_TIM14_Init+0x94>)
 8004abe:	f002 ff26 	bl	800790e <HAL_TIM_PWM_Init>
 8004ac2:	4603      	mov	r3, r0
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d001      	beq.n	8004acc <MX_TIM14_Init+0x60>
  {
    Error_Handler();
 8004ac8:	f7ff fdaa 	bl	8004620 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004acc:	2360      	movs	r3, #96	; 0x60
 8004ace:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 50;
 8004ad0:	2332      	movs	r3, #50	; 0x32
 8004ad2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004ad8:	2300      	movs	r3, #0
 8004ada:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004adc:	1d3b      	adds	r3, r7, #4
 8004ade:	2200      	movs	r2, #0
 8004ae0:	4619      	mov	r1, r3
 8004ae2:	4807      	ldr	r0, [pc, #28]	; (8004b00 <MX_TIM14_Init+0x94>)
 8004ae4:	f002 ff6c 	bl	80079c0 <HAL_TIM_PWM_ConfigChannel>
 8004ae8:	4603      	mov	r3, r0
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d001      	beq.n	8004af2 <MX_TIM14_Init+0x86>
  {
    Error_Handler();
 8004aee:	f7ff fd97 	bl	8004620 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 8004af2:	4803      	ldr	r0, [pc, #12]	; (8004b00 <MX_TIM14_Init+0x94>)
 8004af4:	f000 f86a 	bl	8004bcc <HAL_TIM_MspPostInit>

}
 8004af8:	bf00      	nop
 8004afa:	3720      	adds	r7, #32
 8004afc:	46bd      	mov	sp, r7
 8004afe:	bd80      	pop	{r7, pc}
 8004b00:	2000039c 	.word	0x2000039c
 8004b04:	40002000 	.word	0x40002000

08004b08 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004b08:	b480      	push	{r7}
 8004b0a:	b087      	sub	sp, #28
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b18:	d10e      	bne.n	8004b38 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	617b      	str	r3, [r7, #20]
 8004b1e:	4b27      	ldr	r3, [pc, #156]	; (8004bbc <HAL_TIM_Base_MspInit+0xb4>)
 8004b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b22:	4a26      	ldr	r2, [pc, #152]	; (8004bbc <HAL_TIM_Base_MspInit+0xb4>)
 8004b24:	f043 0301 	orr.w	r3, r3, #1
 8004b28:	6413      	str	r3, [r2, #64]	; 0x40
 8004b2a:	4b24      	ldr	r3, [pc, #144]	; (8004bbc <HAL_TIM_Base_MspInit+0xb4>)
 8004b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b2e:	f003 0301 	and.w	r3, r3, #1
 8004b32:	617b      	str	r3, [r7, #20]
 8004b34:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM14_CLK_ENABLE();
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }
}
 8004b36:	e03a      	b.n	8004bae <HAL_TIM_Base_MspInit+0xa6>
  else if(tim_baseHandle->Instance==TIM6)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	4a20      	ldr	r2, [pc, #128]	; (8004bc0 <HAL_TIM_Base_MspInit+0xb8>)
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	d10e      	bne.n	8004b60 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8004b42:	2300      	movs	r3, #0
 8004b44:	613b      	str	r3, [r7, #16]
 8004b46:	4b1d      	ldr	r3, [pc, #116]	; (8004bbc <HAL_TIM_Base_MspInit+0xb4>)
 8004b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b4a:	4a1c      	ldr	r2, [pc, #112]	; (8004bbc <HAL_TIM_Base_MspInit+0xb4>)
 8004b4c:	f043 0310 	orr.w	r3, r3, #16
 8004b50:	6413      	str	r3, [r2, #64]	; 0x40
 8004b52:	4b1a      	ldr	r3, [pc, #104]	; (8004bbc <HAL_TIM_Base_MspInit+0xb4>)
 8004b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b56:	f003 0310 	and.w	r3, r3, #16
 8004b5a:	613b      	str	r3, [r7, #16]
 8004b5c:	693b      	ldr	r3, [r7, #16]
}
 8004b5e:	e026      	b.n	8004bae <HAL_TIM_Base_MspInit+0xa6>
  else if(tim_baseHandle->Instance==TIM7)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	4a17      	ldr	r2, [pc, #92]	; (8004bc4 <HAL_TIM_Base_MspInit+0xbc>)
 8004b66:	4293      	cmp	r3, r2
 8004b68:	d10e      	bne.n	8004b88 <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	60fb      	str	r3, [r7, #12]
 8004b6e:	4b13      	ldr	r3, [pc, #76]	; (8004bbc <HAL_TIM_Base_MspInit+0xb4>)
 8004b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b72:	4a12      	ldr	r2, [pc, #72]	; (8004bbc <HAL_TIM_Base_MspInit+0xb4>)
 8004b74:	f043 0320 	orr.w	r3, r3, #32
 8004b78:	6413      	str	r3, [r2, #64]	; 0x40
 8004b7a:	4b10      	ldr	r3, [pc, #64]	; (8004bbc <HAL_TIM_Base_MspInit+0xb4>)
 8004b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b7e:	f003 0320 	and.w	r3, r3, #32
 8004b82:	60fb      	str	r3, [r7, #12]
 8004b84:	68fb      	ldr	r3, [r7, #12]
}
 8004b86:	e012      	b.n	8004bae <HAL_TIM_Base_MspInit+0xa6>
  else if(tim_baseHandle->Instance==TIM14)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	4a0e      	ldr	r2, [pc, #56]	; (8004bc8 <HAL_TIM_Base_MspInit+0xc0>)
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d10d      	bne.n	8004bae <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8004b92:	2300      	movs	r3, #0
 8004b94:	60bb      	str	r3, [r7, #8]
 8004b96:	4b09      	ldr	r3, [pc, #36]	; (8004bbc <HAL_TIM_Base_MspInit+0xb4>)
 8004b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b9a:	4a08      	ldr	r2, [pc, #32]	; (8004bbc <HAL_TIM_Base_MspInit+0xb4>)
 8004b9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ba0:	6413      	str	r3, [r2, #64]	; 0x40
 8004ba2:	4b06      	ldr	r3, [pc, #24]	; (8004bbc <HAL_TIM_Base_MspInit+0xb4>)
 8004ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ba6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004baa:	60bb      	str	r3, [r7, #8]
 8004bac:	68bb      	ldr	r3, [r7, #8]
}
 8004bae:	bf00      	nop
 8004bb0:	371c      	adds	r7, #28
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb8:	4770      	bx	lr
 8004bba:	bf00      	nop
 8004bbc:	40023800 	.word	0x40023800
 8004bc0:	40001000 	.word	0x40001000
 8004bc4:	40001400 	.word	0x40001400
 8004bc8:	40002000 	.word	0x40002000

08004bcc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b08a      	sub	sp, #40	; 0x28
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004bd4:	f107 0314 	add.w	r3, r7, #20
 8004bd8:	2200      	movs	r2, #0
 8004bda:	601a      	str	r2, [r3, #0]
 8004bdc:	605a      	str	r2, [r3, #4]
 8004bde:	609a      	str	r2, [r3, #8]
 8004be0:	60da      	str	r2, [r3, #12]
 8004be2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bec:	d13e      	bne.n	8004c6c <HAL_TIM_MspPostInit+0xa0>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004bee:	2300      	movs	r3, #0
 8004bf0:	613b      	str	r3, [r7, #16]
 8004bf2:	4b32      	ldr	r3, [pc, #200]	; (8004cbc <HAL_TIM_MspPostInit+0xf0>)
 8004bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bf6:	4a31      	ldr	r2, [pc, #196]	; (8004cbc <HAL_TIM_MspPostInit+0xf0>)
 8004bf8:	f043 0301 	orr.w	r3, r3, #1
 8004bfc:	6313      	str	r3, [r2, #48]	; 0x30
 8004bfe:	4b2f      	ldr	r3, [pc, #188]	; (8004cbc <HAL_TIM_MspPostInit+0xf0>)
 8004c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c02:	f003 0301 	and.w	r3, r3, #1
 8004c06:	613b      	str	r3, [r7, #16]
 8004c08:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	60fb      	str	r3, [r7, #12]
 8004c0e:	4b2b      	ldr	r3, [pc, #172]	; (8004cbc <HAL_TIM_MspPostInit+0xf0>)
 8004c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c12:	4a2a      	ldr	r2, [pc, #168]	; (8004cbc <HAL_TIM_MspPostInit+0xf0>)
 8004c14:	f043 0302 	orr.w	r3, r3, #2
 8004c18:	6313      	str	r3, [r2, #48]	; 0x30
 8004c1a:	4b28      	ldr	r3, [pc, #160]	; (8004cbc <HAL_TIM_MspPostInit+0xf0>)
 8004c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c1e:	f003 0302 	and.w	r3, r3, #2
 8004c22:	60fb      	str	r3, [r7, #12]
 8004c24:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> TIM2_CH2
    PB10     ------> TIM2_CH3
    PB11     ------> TIM2_CH4
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = LED_PWM_2_Pin|LED_PWM_1_Pin;
 8004c26:	f248 0302 	movw	r3, #32770	; 0x8002
 8004c2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c2c:	2302      	movs	r3, #2
 8004c2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c30:	2300      	movs	r3, #0
 8004c32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c34:	2300      	movs	r3, #0
 8004c36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004c38:	2301      	movs	r3, #1
 8004c3a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004c3c:	f107 0314 	add.w	r3, r7, #20
 8004c40:	4619      	mov	r1, r3
 8004c42:	481f      	ldr	r0, [pc, #124]	; (8004cc0 <HAL_TIM_MspPostInit+0xf4>)
 8004c44:	f001 fa28 	bl	8006098 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LED_PWM_3_Pin|LED_PWM_4_Pin;
 8004c48:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004c4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c4e:	2302      	movs	r3, #2
 8004c50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c52:	2300      	movs	r3, #0
 8004c54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c56:	2300      	movs	r3, #0
 8004c58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004c5e:	f107 0314 	add.w	r3, r7, #20
 8004c62:	4619      	mov	r1, r3
 8004c64:	4817      	ldr	r0, [pc, #92]	; (8004cc4 <HAL_TIM_MspPostInit+0xf8>)
 8004c66:	f001 fa17 	bl	8006098 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM14_MspPostInit 1 */

  /* USER CODE END TIM14_MspPostInit 1 */
  }

}
 8004c6a:	e022      	b.n	8004cb2 <HAL_TIM_MspPostInit+0xe6>
  else if(timHandle->Instance==TIM14)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	4a15      	ldr	r2, [pc, #84]	; (8004cc8 <HAL_TIM_MspPostInit+0xfc>)
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d11d      	bne.n	8004cb2 <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004c76:	2300      	movs	r3, #0
 8004c78:	60bb      	str	r3, [r7, #8]
 8004c7a:	4b10      	ldr	r3, [pc, #64]	; (8004cbc <HAL_TIM_MspPostInit+0xf0>)
 8004c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c7e:	4a0f      	ldr	r2, [pc, #60]	; (8004cbc <HAL_TIM_MspPostInit+0xf0>)
 8004c80:	f043 0301 	orr.w	r3, r3, #1
 8004c84:	6313      	str	r3, [r2, #48]	; 0x30
 8004c86:	4b0d      	ldr	r3, [pc, #52]	; (8004cbc <HAL_TIM_MspPostInit+0xf0>)
 8004c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c8a:	f003 0301 	and.w	r3, r3, #1
 8004c8e:	60bb      	str	r3, [r7, #8]
 8004c90:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = SERVO_PWM_Pin;
 8004c92:	2380      	movs	r3, #128	; 0x80
 8004c94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c96:	2302      	movs	r3, #2
 8004c98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 8004ca2:	2309      	movs	r3, #9
 8004ca4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SERVO_PWM_GPIO_Port, &GPIO_InitStruct);
 8004ca6:	f107 0314 	add.w	r3, r7, #20
 8004caa:	4619      	mov	r1, r3
 8004cac:	4804      	ldr	r0, [pc, #16]	; (8004cc0 <HAL_TIM_MspPostInit+0xf4>)
 8004cae:	f001 f9f3 	bl	8006098 <HAL_GPIO_Init>
}
 8004cb2:	bf00      	nop
 8004cb4:	3728      	adds	r7, #40	; 0x28
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	bd80      	pop	{r7, pc}
 8004cba:	bf00      	nop
 8004cbc:	40023800 	.word	0x40023800
 8004cc0:	40020000 	.word	0x40020000
 8004cc4:	40020400 	.word	0x40020400
 8004cc8:	40002000 	.word	0x40002000

08004ccc <MX_UART4_Init>:
DMA_HandleTypeDef hdma_usart2_rx;
DMA_HandleTypeDef hdma_usart2_tx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8004cd0:	4b11      	ldr	r3, [pc, #68]	; (8004d18 <MX_UART4_Init+0x4c>)
 8004cd2:	4a12      	ldr	r2, [pc, #72]	; (8004d1c <MX_UART4_Init+0x50>)
 8004cd4:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8004cd6:	4b10      	ldr	r3, [pc, #64]	; (8004d18 <MX_UART4_Init+0x4c>)
 8004cd8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004cdc:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8004cde:	4b0e      	ldr	r3, [pc, #56]	; (8004d18 <MX_UART4_Init+0x4c>)
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8004ce4:	4b0c      	ldr	r3, [pc, #48]	; (8004d18 <MX_UART4_Init+0x4c>)
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8004cea:	4b0b      	ldr	r3, [pc, #44]	; (8004d18 <MX_UART4_Init+0x4c>)
 8004cec:	2200      	movs	r2, #0
 8004cee:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8004cf0:	4b09      	ldr	r3, [pc, #36]	; (8004d18 <MX_UART4_Init+0x4c>)
 8004cf2:	220c      	movs	r2, #12
 8004cf4:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004cf6:	4b08      	ldr	r3, [pc, #32]	; (8004d18 <MX_UART4_Init+0x4c>)
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8004cfc:	4b06      	ldr	r3, [pc, #24]	; (8004d18 <MX_UART4_Init+0x4c>)
 8004cfe:	2200      	movs	r2, #0
 8004d00:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8004d02:	4805      	ldr	r0, [pc, #20]	; (8004d18 <MX_UART4_Init+0x4c>)
 8004d04:	f003 fb4c 	bl	80083a0 <HAL_UART_Init>
 8004d08:	4603      	mov	r3, r0
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d001      	beq.n	8004d12 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8004d0e:	f7ff fc87 	bl	8004620 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8004d12:	bf00      	nop
 8004d14:	bd80      	pop	{r7, pc}
 8004d16:	bf00      	nop
 8004d18:	2000054c 	.word	0x2000054c
 8004d1c:	40004c00 	.word	0x40004c00

08004d20 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004d24:	4b11      	ldr	r3, [pc, #68]	; (8004d6c <MX_USART2_UART_Init+0x4c>)
 8004d26:	4a12      	ldr	r2, [pc, #72]	; (8004d70 <MX_USART2_UART_Init+0x50>)
 8004d28:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8004d2a:	4b10      	ldr	r3, [pc, #64]	; (8004d6c <MX_USART2_UART_Init+0x4c>)
 8004d2c:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8004d30:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004d32:	4b0e      	ldr	r3, [pc, #56]	; (8004d6c <MX_USART2_UART_Init+0x4c>)
 8004d34:	2200      	movs	r2, #0
 8004d36:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004d38:	4b0c      	ldr	r3, [pc, #48]	; (8004d6c <MX_USART2_UART_Init+0x4c>)
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004d3e:	4b0b      	ldr	r3, [pc, #44]	; (8004d6c <MX_USART2_UART_Init+0x4c>)
 8004d40:	2200      	movs	r2, #0
 8004d42:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004d44:	4b09      	ldr	r3, [pc, #36]	; (8004d6c <MX_USART2_UART_Init+0x4c>)
 8004d46:	220c      	movs	r2, #12
 8004d48:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004d4a:	4b08      	ldr	r3, [pc, #32]	; (8004d6c <MX_USART2_UART_Init+0x4c>)
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004d50:	4b06      	ldr	r3, [pc, #24]	; (8004d6c <MX_USART2_UART_Init+0x4c>)
 8004d52:	2200      	movs	r2, #0
 8004d54:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004d56:	4805      	ldr	r0, [pc, #20]	; (8004d6c <MX_USART2_UART_Init+0x4c>)
 8004d58:	f003 fb22 	bl	80083a0 <HAL_UART_Init>
 8004d5c:	4603      	mov	r3, r0
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d001      	beq.n	8004d66 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8004d62:	f7ff fc5d 	bl	8004620 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8004d66:	bf00      	nop
 8004d68:	bd80      	pop	{r7, pc}
 8004d6a:	bf00      	nop
 8004d6c:	20000590 	.word	0x20000590
 8004d70:	40004400 	.word	0x40004400

08004d74 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004d74:	b580      	push	{r7, lr}
 8004d76:	b08c      	sub	sp, #48	; 0x30
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d7c:	f107 031c 	add.w	r3, r7, #28
 8004d80:	2200      	movs	r2, #0
 8004d82:	601a      	str	r2, [r3, #0]
 8004d84:	605a      	str	r2, [r3, #4]
 8004d86:	609a      	str	r2, [r3, #8]
 8004d88:	60da      	str	r2, [r3, #12]
 8004d8a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	4a99      	ldr	r2, [pc, #612]	; (8004ff8 <HAL_UART_MspInit+0x284>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	f040 8094 	bne.w	8004ec0 <HAL_UART_MspInit+0x14c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8004d98:	2300      	movs	r3, #0
 8004d9a:	61bb      	str	r3, [r7, #24]
 8004d9c:	4b97      	ldr	r3, [pc, #604]	; (8004ffc <HAL_UART_MspInit+0x288>)
 8004d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004da0:	4a96      	ldr	r2, [pc, #600]	; (8004ffc <HAL_UART_MspInit+0x288>)
 8004da2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004da6:	6413      	str	r3, [r2, #64]	; 0x40
 8004da8:	4b94      	ldr	r3, [pc, #592]	; (8004ffc <HAL_UART_MspInit+0x288>)
 8004daa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004db0:	61bb      	str	r3, [r7, #24]
 8004db2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004db4:	2300      	movs	r3, #0
 8004db6:	617b      	str	r3, [r7, #20]
 8004db8:	4b90      	ldr	r3, [pc, #576]	; (8004ffc <HAL_UART_MspInit+0x288>)
 8004dba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dbc:	4a8f      	ldr	r2, [pc, #572]	; (8004ffc <HAL_UART_MspInit+0x288>)
 8004dbe:	f043 0304 	orr.w	r3, r3, #4
 8004dc2:	6313      	str	r3, [r2, #48]	; 0x30
 8004dc4:	4b8d      	ldr	r3, [pc, #564]	; (8004ffc <HAL_UART_MspInit+0x288>)
 8004dc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dc8:	f003 0304 	and.w	r3, r3, #4
 8004dcc:	617b      	str	r3, [r7, #20]
 8004dce:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = JETSON_TX_Pin|JETSON_RX_Pin;
 8004dd0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004dd4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004dd6:	2302      	movs	r3, #2
 8004dd8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004dda:	2300      	movs	r3, #0
 8004ddc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004dde:	2303      	movs	r3, #3
 8004de0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8004de2:	2308      	movs	r3, #8
 8004de4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004de6:	f107 031c 	add.w	r3, r7, #28
 8004dea:	4619      	mov	r1, r3
 8004dec:	4884      	ldr	r0, [pc, #528]	; (8005000 <HAL_UART_MspInit+0x28c>)
 8004dee:	f001 f953 	bl	8006098 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 8004df2:	4b84      	ldr	r3, [pc, #528]	; (8005004 <HAL_UART_MspInit+0x290>)
 8004df4:	4a84      	ldr	r2, [pc, #528]	; (8005008 <HAL_UART_MspInit+0x294>)
 8004df6:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 8004df8:	4b82      	ldr	r3, [pc, #520]	; (8005004 <HAL_UART_MspInit+0x290>)
 8004dfa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004dfe:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004e00:	4b80      	ldr	r3, [pc, #512]	; (8005004 <HAL_UART_MspInit+0x290>)
 8004e02:	2200      	movs	r2, #0
 8004e04:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004e06:	4b7f      	ldr	r3, [pc, #508]	; (8005004 <HAL_UART_MspInit+0x290>)
 8004e08:	2200      	movs	r2, #0
 8004e0a:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004e0c:	4b7d      	ldr	r3, [pc, #500]	; (8005004 <HAL_UART_MspInit+0x290>)
 8004e0e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004e12:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004e14:	4b7b      	ldr	r3, [pc, #492]	; (8005004 <HAL_UART_MspInit+0x290>)
 8004e16:	2200      	movs	r2, #0
 8004e18:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004e1a:	4b7a      	ldr	r3, [pc, #488]	; (8005004 <HAL_UART_MspInit+0x290>)
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 8004e20:	4b78      	ldr	r3, [pc, #480]	; (8005004 <HAL_UART_MspInit+0x290>)
 8004e22:	2200      	movs	r2, #0
 8004e24:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8004e26:	4b77      	ldr	r3, [pc, #476]	; (8005004 <HAL_UART_MspInit+0x290>)
 8004e28:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004e2c:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004e2e:	4b75      	ldr	r3, [pc, #468]	; (8005004 <HAL_UART_MspInit+0x290>)
 8004e30:	2200      	movs	r2, #0
 8004e32:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8004e34:	4873      	ldr	r0, [pc, #460]	; (8005004 <HAL_UART_MspInit+0x290>)
 8004e36:	f000 fd2d 	bl	8005894 <HAL_DMA_Init>
 8004e3a:	4603      	mov	r3, r0
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d001      	beq.n	8004e44 <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 8004e40:	f7ff fbee 	bl	8004620 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart4_rx);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	4a6f      	ldr	r2, [pc, #444]	; (8005004 <HAL_UART_MspInit+0x290>)
 8004e48:	639a      	str	r2, [r3, #56]	; 0x38
 8004e4a:	4a6e      	ldr	r2, [pc, #440]	; (8005004 <HAL_UART_MspInit+0x290>)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
 8004e50:	4b6e      	ldr	r3, [pc, #440]	; (800500c <HAL_UART_MspInit+0x298>)
 8004e52:	4a6f      	ldr	r2, [pc, #444]	; (8005010 <HAL_UART_MspInit+0x29c>)
 8004e54:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Channel = DMA_CHANNEL_4;
 8004e56:	4b6d      	ldr	r3, [pc, #436]	; (800500c <HAL_UART_MspInit+0x298>)
 8004e58:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004e5c:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004e5e:	4b6b      	ldr	r3, [pc, #428]	; (800500c <HAL_UART_MspInit+0x298>)
 8004e60:	2240      	movs	r2, #64	; 0x40
 8004e62:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004e64:	4b69      	ldr	r3, [pc, #420]	; (800500c <HAL_UART_MspInit+0x298>)
 8004e66:	2200      	movs	r2, #0
 8004e68:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004e6a:	4b68      	ldr	r3, [pc, #416]	; (800500c <HAL_UART_MspInit+0x298>)
 8004e6c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004e70:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004e72:	4b66      	ldr	r3, [pc, #408]	; (800500c <HAL_UART_MspInit+0x298>)
 8004e74:	2200      	movs	r2, #0
 8004e76:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004e78:	4b64      	ldr	r3, [pc, #400]	; (800500c <HAL_UART_MspInit+0x298>)
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 8004e7e:	4b63      	ldr	r3, [pc, #396]	; (800500c <HAL_UART_MspInit+0x298>)
 8004e80:	2200      	movs	r2, #0
 8004e82:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8004e84:	4b61      	ldr	r3, [pc, #388]	; (800500c <HAL_UART_MspInit+0x298>)
 8004e86:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004e8a:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004e8c:	4b5f      	ldr	r3, [pc, #380]	; (800500c <HAL_UART_MspInit+0x298>)
 8004e8e:	2200      	movs	r2, #0
 8004e90:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 8004e92:	485e      	ldr	r0, [pc, #376]	; (800500c <HAL_UART_MspInit+0x298>)
 8004e94:	f000 fcfe 	bl	8005894 <HAL_DMA_Init>
 8004e98:	4603      	mov	r3, r0
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d001      	beq.n	8004ea2 <HAL_UART_MspInit+0x12e>
    {
      Error_Handler();
 8004e9e:	f7ff fbbf 	bl	8004620 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart4_tx);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	4a59      	ldr	r2, [pc, #356]	; (800500c <HAL_UART_MspInit+0x298>)
 8004ea6:	635a      	str	r2, [r3, #52]	; 0x34
 8004ea8:	4a58      	ldr	r2, [pc, #352]	; (800500c <HAL_UART_MspInit+0x298>)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8004eae:	2200      	movs	r2, #0
 8004eb0:	2100      	movs	r1, #0
 8004eb2:	2034      	movs	r0, #52	; 0x34
 8004eb4:	f000 fcb7 	bl	8005826 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8004eb8:	2034      	movs	r0, #52	; 0x34
 8004eba:	f000 fcd0 	bl	800585e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8004ebe:	e097      	b.n	8004ff0 <HAL_UART_MspInit+0x27c>
  else if(uartHandle->Instance==USART2)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	4a53      	ldr	r2, [pc, #332]	; (8005014 <HAL_UART_MspInit+0x2a0>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	f040 8092 	bne.w	8004ff0 <HAL_UART_MspInit+0x27c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8004ecc:	2300      	movs	r3, #0
 8004ece:	613b      	str	r3, [r7, #16]
 8004ed0:	4b4a      	ldr	r3, [pc, #296]	; (8004ffc <HAL_UART_MspInit+0x288>)
 8004ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ed4:	4a49      	ldr	r2, [pc, #292]	; (8004ffc <HAL_UART_MspInit+0x288>)
 8004ed6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004eda:	6413      	str	r3, [r2, #64]	; 0x40
 8004edc:	4b47      	ldr	r3, [pc, #284]	; (8004ffc <HAL_UART_MspInit+0x288>)
 8004ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ee0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ee4:	613b      	str	r3, [r7, #16]
 8004ee6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004ee8:	2300      	movs	r3, #0
 8004eea:	60fb      	str	r3, [r7, #12]
 8004eec:	4b43      	ldr	r3, [pc, #268]	; (8004ffc <HAL_UART_MspInit+0x288>)
 8004eee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ef0:	4a42      	ldr	r2, [pc, #264]	; (8004ffc <HAL_UART_MspInit+0x288>)
 8004ef2:	f043 0308 	orr.w	r3, r3, #8
 8004ef6:	6313      	str	r3, [r2, #48]	; 0x30
 8004ef8:	4b40      	ldr	r3, [pc, #256]	; (8004ffc <HAL_UART_MspInit+0x288>)
 8004efa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004efc:	f003 0308 	and.w	r3, r3, #8
 8004f00:	60fb      	str	r3, [r7, #12]
 8004f02:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GYROSCOOTER_TX_Pin|GYROSCOOTER_RX_Pin;
 8004f04:	2360      	movs	r3, #96	; 0x60
 8004f06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f08:	2302      	movs	r3, #2
 8004f0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004f10:	2303      	movs	r3, #3
 8004f12:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004f14:	2307      	movs	r3, #7
 8004f16:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004f18:	f107 031c 	add.w	r3, r7, #28
 8004f1c:	4619      	mov	r1, r3
 8004f1e:	483e      	ldr	r0, [pc, #248]	; (8005018 <HAL_UART_MspInit+0x2a4>)
 8004f20:	f001 f8ba 	bl	8006098 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8004f24:	4b3d      	ldr	r3, [pc, #244]	; (800501c <HAL_UART_MspInit+0x2a8>)
 8004f26:	4a3e      	ldr	r2, [pc, #248]	; (8005020 <HAL_UART_MspInit+0x2ac>)
 8004f28:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8004f2a:	4b3c      	ldr	r3, [pc, #240]	; (800501c <HAL_UART_MspInit+0x2a8>)
 8004f2c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004f30:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004f32:	4b3a      	ldr	r3, [pc, #232]	; (800501c <HAL_UART_MspInit+0x2a8>)
 8004f34:	2200      	movs	r2, #0
 8004f36:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004f38:	4b38      	ldr	r3, [pc, #224]	; (800501c <HAL_UART_MspInit+0x2a8>)
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004f3e:	4b37      	ldr	r3, [pc, #220]	; (800501c <HAL_UART_MspInit+0x2a8>)
 8004f40:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004f44:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004f46:	4b35      	ldr	r3, [pc, #212]	; (800501c <HAL_UART_MspInit+0x2a8>)
 8004f48:	2200      	movs	r2, #0
 8004f4a:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004f4c:	4b33      	ldr	r3, [pc, #204]	; (800501c <HAL_UART_MspInit+0x2a8>)
 8004f4e:	2200      	movs	r2, #0
 8004f50:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8004f52:	4b32      	ldr	r3, [pc, #200]	; (800501c <HAL_UART_MspInit+0x2a8>)
 8004f54:	2200      	movs	r2, #0
 8004f56:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8004f58:	4b30      	ldr	r3, [pc, #192]	; (800501c <HAL_UART_MspInit+0x2a8>)
 8004f5a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004f5e:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004f60:	4b2e      	ldr	r3, [pc, #184]	; (800501c <HAL_UART_MspInit+0x2a8>)
 8004f62:	2200      	movs	r2, #0
 8004f64:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8004f66:	482d      	ldr	r0, [pc, #180]	; (800501c <HAL_UART_MspInit+0x2a8>)
 8004f68:	f000 fc94 	bl	8005894 <HAL_DMA_Init>
 8004f6c:	4603      	mov	r3, r0
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d001      	beq.n	8004f76 <HAL_UART_MspInit+0x202>
      Error_Handler();
 8004f72:	f7ff fb55 	bl	8004620 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	4a28      	ldr	r2, [pc, #160]	; (800501c <HAL_UART_MspInit+0x2a8>)
 8004f7a:	639a      	str	r2, [r3, #56]	; 0x38
 8004f7c:	4a27      	ldr	r2, [pc, #156]	; (800501c <HAL_UART_MspInit+0x2a8>)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8004f82:	4b28      	ldr	r3, [pc, #160]	; (8005024 <HAL_UART_MspInit+0x2b0>)
 8004f84:	4a28      	ldr	r2, [pc, #160]	; (8005028 <HAL_UART_MspInit+0x2b4>)
 8004f86:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8004f88:	4b26      	ldr	r3, [pc, #152]	; (8005024 <HAL_UART_MspInit+0x2b0>)
 8004f8a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004f8e:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004f90:	4b24      	ldr	r3, [pc, #144]	; (8005024 <HAL_UART_MspInit+0x2b0>)
 8004f92:	2240      	movs	r2, #64	; 0x40
 8004f94:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004f96:	4b23      	ldr	r3, [pc, #140]	; (8005024 <HAL_UART_MspInit+0x2b0>)
 8004f98:	2200      	movs	r2, #0
 8004f9a:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004f9c:	4b21      	ldr	r3, [pc, #132]	; (8005024 <HAL_UART_MspInit+0x2b0>)
 8004f9e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004fa2:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004fa4:	4b1f      	ldr	r3, [pc, #124]	; (8005024 <HAL_UART_MspInit+0x2b0>)
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004faa:	4b1e      	ldr	r3, [pc, #120]	; (8005024 <HAL_UART_MspInit+0x2b0>)
 8004fac:	2200      	movs	r2, #0
 8004fae:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8004fb0:	4b1c      	ldr	r3, [pc, #112]	; (8005024 <HAL_UART_MspInit+0x2b0>)
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8004fb6:	4b1b      	ldr	r3, [pc, #108]	; (8005024 <HAL_UART_MspInit+0x2b0>)
 8004fb8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004fbc:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004fbe:	4b19      	ldr	r3, [pc, #100]	; (8005024 <HAL_UART_MspInit+0x2b0>)
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8004fc4:	4817      	ldr	r0, [pc, #92]	; (8005024 <HAL_UART_MspInit+0x2b0>)
 8004fc6:	f000 fc65 	bl	8005894 <HAL_DMA_Init>
 8004fca:	4603      	mov	r3, r0
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d001      	beq.n	8004fd4 <HAL_UART_MspInit+0x260>
      Error_Handler();
 8004fd0:	f7ff fb26 	bl	8004620 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	4a13      	ldr	r2, [pc, #76]	; (8005024 <HAL_UART_MspInit+0x2b0>)
 8004fd8:	635a      	str	r2, [r3, #52]	; 0x34
 8004fda:	4a12      	ldr	r2, [pc, #72]	; (8005024 <HAL_UART_MspInit+0x2b0>)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	2100      	movs	r1, #0
 8004fe4:	2026      	movs	r0, #38	; 0x26
 8004fe6:	f000 fc1e 	bl	8005826 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004fea:	2026      	movs	r0, #38	; 0x26
 8004fec:	f000 fc37 	bl	800585e <HAL_NVIC_EnableIRQ>
}
 8004ff0:	bf00      	nop
 8004ff2:	3730      	adds	r7, #48	; 0x30
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	bd80      	pop	{r7, pc}
 8004ff8:	40004c00 	.word	0x40004c00
 8004ffc:	40023800 	.word	0x40023800
 8005000:	40020800 	.word	0x40020800
 8005004:	2000042c 	.word	0x2000042c
 8005008:	40026040 	.word	0x40026040
 800500c:	200005d4 	.word	0x200005d4
 8005010:	40026070 	.word	0x40026070
 8005014:	40004400 	.word	0x40004400
 8005018:	40020c00 	.word	0x40020c00
 800501c:	2000048c 	.word	0x2000048c
 8005020:	40026088 	.word	0x40026088
 8005024:	200004ec 	.word	0x200004ec
 8005028:	400260a0 	.word	0x400260a0

0800502c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800502c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005064 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005030:	480d      	ldr	r0, [pc, #52]	; (8005068 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8005032:	490e      	ldr	r1, [pc, #56]	; (800506c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8005034:	4a0e      	ldr	r2, [pc, #56]	; (8005070 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8005036:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005038:	e002      	b.n	8005040 <LoopCopyDataInit>

0800503a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800503a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800503c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800503e:	3304      	adds	r3, #4

08005040 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005040:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005042:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005044:	d3f9      	bcc.n	800503a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005046:	4a0b      	ldr	r2, [pc, #44]	; (8005074 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8005048:	4c0b      	ldr	r4, [pc, #44]	; (8005078 <LoopFillZerobss+0x26>)
  movs r3, #0
 800504a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800504c:	e001      	b.n	8005052 <LoopFillZerobss>

0800504e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800504e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005050:	3204      	adds	r2, #4

08005052 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005052:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005054:	d3fb      	bcc.n	800504e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8005056:	f7ff fbf5 	bl	8004844 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800505a:	f004 fd7d 	bl	8009b58 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800505e:	f7ff f90b 	bl	8004278 <main>
  bx  lr    
 8005062:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8005064:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8005068:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800506c:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8005070:	08009c58 	.word	0x08009c58
  ldr r2, =_sbss
 8005074:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8005078:	20000638 	.word	0x20000638

0800507c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800507c:	e7fe      	b.n	800507c <ADC_IRQHandler>
	...

08005080 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005080:	b580      	push	{r7, lr}
 8005082:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005084:	4b0e      	ldr	r3, [pc, #56]	; (80050c0 <HAL_Init+0x40>)
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	4a0d      	ldr	r2, [pc, #52]	; (80050c0 <HAL_Init+0x40>)
 800508a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800508e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005090:	4b0b      	ldr	r3, [pc, #44]	; (80050c0 <HAL_Init+0x40>)
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	4a0a      	ldr	r2, [pc, #40]	; (80050c0 <HAL_Init+0x40>)
 8005096:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800509a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800509c:	4b08      	ldr	r3, [pc, #32]	; (80050c0 <HAL_Init+0x40>)
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	4a07      	ldr	r2, [pc, #28]	; (80050c0 <HAL_Init+0x40>)
 80050a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050a6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80050a8:	2003      	movs	r0, #3
 80050aa:	f000 fbb1 	bl	8005810 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80050ae:	200f      	movs	r0, #15
 80050b0:	f000 f808 	bl	80050c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80050b4:	f7ff fb38 	bl	8004728 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80050b8:	2300      	movs	r3, #0
}
 80050ba:	4618      	mov	r0, r3
 80050bc:	bd80      	pop	{r7, pc}
 80050be:	bf00      	nop
 80050c0:	40023c00 	.word	0x40023c00

080050c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b082      	sub	sp, #8
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80050cc:	4b12      	ldr	r3, [pc, #72]	; (8005118 <HAL_InitTick+0x54>)
 80050ce:	681a      	ldr	r2, [r3, #0]
 80050d0:	4b12      	ldr	r3, [pc, #72]	; (800511c <HAL_InitTick+0x58>)
 80050d2:	781b      	ldrb	r3, [r3, #0]
 80050d4:	4619      	mov	r1, r3
 80050d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80050da:	fbb3 f3f1 	udiv	r3, r3, r1
 80050de:	fbb2 f3f3 	udiv	r3, r2, r3
 80050e2:	4618      	mov	r0, r3
 80050e4:	f000 fbc9 	bl	800587a <HAL_SYSTICK_Config>
 80050e8:	4603      	mov	r3, r0
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d001      	beq.n	80050f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80050ee:	2301      	movs	r3, #1
 80050f0:	e00e      	b.n	8005110 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2b0f      	cmp	r3, #15
 80050f6:	d80a      	bhi.n	800510e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80050f8:	2200      	movs	r2, #0
 80050fa:	6879      	ldr	r1, [r7, #4]
 80050fc:	f04f 30ff 	mov.w	r0, #4294967295
 8005100:	f000 fb91 	bl	8005826 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005104:	4a06      	ldr	r2, [pc, #24]	; (8005120 <HAL_InitTick+0x5c>)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800510a:	2300      	movs	r3, #0
 800510c:	e000      	b.n	8005110 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800510e:	2301      	movs	r3, #1
}
 8005110:	4618      	mov	r0, r3
 8005112:	3708      	adds	r7, #8
 8005114:	46bd      	mov	sp, r7
 8005116:	bd80      	pop	{r7, pc}
 8005118:	20000004 	.word	0x20000004
 800511c:	2000000c 	.word	0x2000000c
 8005120:	20000008 	.word	0x20000008

08005124 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005124:	b480      	push	{r7}
 8005126:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005128:	4b06      	ldr	r3, [pc, #24]	; (8005144 <HAL_IncTick+0x20>)
 800512a:	781b      	ldrb	r3, [r3, #0]
 800512c:	461a      	mov	r2, r3
 800512e:	4b06      	ldr	r3, [pc, #24]	; (8005148 <HAL_IncTick+0x24>)
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	4413      	add	r3, r2
 8005134:	4a04      	ldr	r2, [pc, #16]	; (8005148 <HAL_IncTick+0x24>)
 8005136:	6013      	str	r3, [r2, #0]
}
 8005138:	bf00      	nop
 800513a:	46bd      	mov	sp, r7
 800513c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005140:	4770      	bx	lr
 8005142:	bf00      	nop
 8005144:	2000000c 	.word	0x2000000c
 8005148:	20000634 	.word	0x20000634

0800514c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800514c:	b480      	push	{r7}
 800514e:	af00      	add	r7, sp, #0
  return uwTick;
 8005150:	4b03      	ldr	r3, [pc, #12]	; (8005160 <HAL_GetTick+0x14>)
 8005152:	681b      	ldr	r3, [r3, #0]
}
 8005154:	4618      	mov	r0, r3
 8005156:	46bd      	mov	sp, r7
 8005158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515c:	4770      	bx	lr
 800515e:	bf00      	nop
 8005160:	20000634 	.word	0x20000634

08005164 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005164:	b580      	push	{r7, lr}
 8005166:	b084      	sub	sp, #16
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800516c:	f7ff ffee 	bl	800514c <HAL_GetTick>
 8005170:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	f1b3 3fff 	cmp.w	r3, #4294967295
 800517c:	d005      	beq.n	800518a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800517e:	4b0a      	ldr	r3, [pc, #40]	; (80051a8 <HAL_Delay+0x44>)
 8005180:	781b      	ldrb	r3, [r3, #0]
 8005182:	461a      	mov	r2, r3
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	4413      	add	r3, r2
 8005188:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800518a:	bf00      	nop
 800518c:	f7ff ffde 	bl	800514c <HAL_GetTick>
 8005190:	4602      	mov	r2, r0
 8005192:	68bb      	ldr	r3, [r7, #8]
 8005194:	1ad3      	subs	r3, r2, r3
 8005196:	68fa      	ldr	r2, [r7, #12]
 8005198:	429a      	cmp	r2, r3
 800519a:	d8f7      	bhi.n	800518c <HAL_Delay+0x28>
  {
  }
}
 800519c:	bf00      	nop
 800519e:	bf00      	nop
 80051a0:	3710      	adds	r7, #16
 80051a2:	46bd      	mov	sp, r7
 80051a4:	bd80      	pop	{r7, pc}
 80051a6:	bf00      	nop
 80051a8:	2000000c 	.word	0x2000000c

080051ac <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b084      	sub	sp, #16
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80051b4:	2300      	movs	r3, #0
 80051b6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d101      	bne.n	80051c2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80051be:	2301      	movs	r3, #1
 80051c0:	e033      	b.n	800522a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d109      	bne.n	80051de <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80051ca:	6878      	ldr	r0, [r7, #4]
 80051cc:	f7fd fdac 	bl	8002d28 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2200      	movs	r2, #0
 80051d4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	2200      	movs	r2, #0
 80051da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051e2:	f003 0310 	and.w	r3, r3, #16
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d118      	bne.n	800521c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ee:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80051f2:	f023 0302 	bic.w	r3, r3, #2
 80051f6:	f043 0202 	orr.w	r2, r3, #2
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80051fe:	6878      	ldr	r0, [r7, #4]
 8005200:	f000 f93a 	bl	8005478 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2200      	movs	r2, #0
 8005208:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800520e:	f023 0303 	bic.w	r3, r3, #3
 8005212:	f043 0201 	orr.w	r2, r3, #1
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	641a      	str	r2, [r3, #64]	; 0x40
 800521a:	e001      	b.n	8005220 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800521c:	2301      	movs	r3, #1
 800521e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2200      	movs	r2, #0
 8005224:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8005228:	7bfb      	ldrb	r3, [r7, #15]
}
 800522a:	4618      	mov	r0, r3
 800522c:	3710      	adds	r7, #16
 800522e:	46bd      	mov	sp, r7
 8005230:	bd80      	pop	{r7, pc}
	...

08005234 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8005234:	b480      	push	{r7}
 8005236:	b085      	sub	sp, #20
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
 800523c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800523e:	2300      	movs	r3, #0
 8005240:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005248:	2b01      	cmp	r3, #1
 800524a:	d101      	bne.n	8005250 <HAL_ADC_ConfigChannel+0x1c>
 800524c:	2302      	movs	r3, #2
 800524e:	e105      	b.n	800545c <HAL_ADC_ConfigChannel+0x228>
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2201      	movs	r2, #1
 8005254:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	2b09      	cmp	r3, #9
 800525e:	d925      	bls.n	80052ac <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	68d9      	ldr	r1, [r3, #12]
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	b29b      	uxth	r3, r3
 800526c:	461a      	mov	r2, r3
 800526e:	4613      	mov	r3, r2
 8005270:	005b      	lsls	r3, r3, #1
 8005272:	4413      	add	r3, r2
 8005274:	3b1e      	subs	r3, #30
 8005276:	2207      	movs	r2, #7
 8005278:	fa02 f303 	lsl.w	r3, r2, r3
 800527c:	43da      	mvns	r2, r3
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	400a      	ands	r2, r1
 8005284:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	68d9      	ldr	r1, [r3, #12]
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	689a      	ldr	r2, [r3, #8]
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	b29b      	uxth	r3, r3
 8005296:	4618      	mov	r0, r3
 8005298:	4603      	mov	r3, r0
 800529a:	005b      	lsls	r3, r3, #1
 800529c:	4403      	add	r3, r0
 800529e:	3b1e      	subs	r3, #30
 80052a0:	409a      	lsls	r2, r3
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	430a      	orrs	r2, r1
 80052a8:	60da      	str	r2, [r3, #12]
 80052aa:	e022      	b.n	80052f2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	6919      	ldr	r1, [r3, #16]
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	b29b      	uxth	r3, r3
 80052b8:	461a      	mov	r2, r3
 80052ba:	4613      	mov	r3, r2
 80052bc:	005b      	lsls	r3, r3, #1
 80052be:	4413      	add	r3, r2
 80052c0:	2207      	movs	r2, #7
 80052c2:	fa02 f303 	lsl.w	r3, r2, r3
 80052c6:	43da      	mvns	r2, r3
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	400a      	ands	r2, r1
 80052ce:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	6919      	ldr	r1, [r3, #16]
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	689a      	ldr	r2, [r3, #8]
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	b29b      	uxth	r3, r3
 80052e0:	4618      	mov	r0, r3
 80052e2:	4603      	mov	r3, r0
 80052e4:	005b      	lsls	r3, r3, #1
 80052e6:	4403      	add	r3, r0
 80052e8:	409a      	lsls	r2, r3
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	430a      	orrs	r2, r1
 80052f0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	685b      	ldr	r3, [r3, #4]
 80052f6:	2b06      	cmp	r3, #6
 80052f8:	d824      	bhi.n	8005344 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	685a      	ldr	r2, [r3, #4]
 8005304:	4613      	mov	r3, r2
 8005306:	009b      	lsls	r3, r3, #2
 8005308:	4413      	add	r3, r2
 800530a:	3b05      	subs	r3, #5
 800530c:	221f      	movs	r2, #31
 800530e:	fa02 f303 	lsl.w	r3, r2, r3
 8005312:	43da      	mvns	r2, r3
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	400a      	ands	r2, r1
 800531a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	b29b      	uxth	r3, r3
 8005328:	4618      	mov	r0, r3
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	685a      	ldr	r2, [r3, #4]
 800532e:	4613      	mov	r3, r2
 8005330:	009b      	lsls	r3, r3, #2
 8005332:	4413      	add	r3, r2
 8005334:	3b05      	subs	r3, #5
 8005336:	fa00 f203 	lsl.w	r2, r0, r3
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	430a      	orrs	r2, r1
 8005340:	635a      	str	r2, [r3, #52]	; 0x34
 8005342:	e04c      	b.n	80053de <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	685b      	ldr	r3, [r3, #4]
 8005348:	2b0c      	cmp	r3, #12
 800534a:	d824      	bhi.n	8005396 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	685a      	ldr	r2, [r3, #4]
 8005356:	4613      	mov	r3, r2
 8005358:	009b      	lsls	r3, r3, #2
 800535a:	4413      	add	r3, r2
 800535c:	3b23      	subs	r3, #35	; 0x23
 800535e:	221f      	movs	r2, #31
 8005360:	fa02 f303 	lsl.w	r3, r2, r3
 8005364:	43da      	mvns	r2, r3
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	400a      	ands	r2, r1
 800536c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	b29b      	uxth	r3, r3
 800537a:	4618      	mov	r0, r3
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	685a      	ldr	r2, [r3, #4]
 8005380:	4613      	mov	r3, r2
 8005382:	009b      	lsls	r3, r3, #2
 8005384:	4413      	add	r3, r2
 8005386:	3b23      	subs	r3, #35	; 0x23
 8005388:	fa00 f203 	lsl.w	r2, r0, r3
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	430a      	orrs	r2, r1
 8005392:	631a      	str	r2, [r3, #48]	; 0x30
 8005394:	e023      	b.n	80053de <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	685a      	ldr	r2, [r3, #4]
 80053a0:	4613      	mov	r3, r2
 80053a2:	009b      	lsls	r3, r3, #2
 80053a4:	4413      	add	r3, r2
 80053a6:	3b41      	subs	r3, #65	; 0x41
 80053a8:	221f      	movs	r2, #31
 80053aa:	fa02 f303 	lsl.w	r3, r2, r3
 80053ae:	43da      	mvns	r2, r3
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	400a      	ands	r2, r1
 80053b6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	b29b      	uxth	r3, r3
 80053c4:	4618      	mov	r0, r3
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	685a      	ldr	r2, [r3, #4]
 80053ca:	4613      	mov	r3, r2
 80053cc:	009b      	lsls	r3, r3, #2
 80053ce:	4413      	add	r3, r2
 80053d0:	3b41      	subs	r3, #65	; 0x41
 80053d2:	fa00 f203 	lsl.w	r2, r0, r3
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	430a      	orrs	r2, r1
 80053dc:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80053de:	4b22      	ldr	r3, [pc, #136]	; (8005468 <HAL_ADC_ConfigChannel+0x234>)
 80053e0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	4a21      	ldr	r2, [pc, #132]	; (800546c <HAL_ADC_ConfigChannel+0x238>)
 80053e8:	4293      	cmp	r3, r2
 80053ea:	d109      	bne.n	8005400 <HAL_ADC_ConfigChannel+0x1cc>
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	2b12      	cmp	r3, #18
 80053f2:	d105      	bne.n	8005400 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	685b      	ldr	r3, [r3, #4]
 80053f8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	4a19      	ldr	r2, [pc, #100]	; (800546c <HAL_ADC_ConfigChannel+0x238>)
 8005406:	4293      	cmp	r3, r2
 8005408:	d123      	bne.n	8005452 <HAL_ADC_ConfigChannel+0x21e>
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	2b10      	cmp	r3, #16
 8005410:	d003      	beq.n	800541a <HAL_ADC_ConfigChannel+0x1e6>
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	2b11      	cmp	r3, #17
 8005418:	d11b      	bne.n	8005452 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	685b      	ldr	r3, [r3, #4]
 800541e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005426:	683b      	ldr	r3, [r7, #0]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	2b10      	cmp	r3, #16
 800542c:	d111      	bne.n	8005452 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800542e:	4b10      	ldr	r3, [pc, #64]	; (8005470 <HAL_ADC_ConfigChannel+0x23c>)
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	4a10      	ldr	r2, [pc, #64]	; (8005474 <HAL_ADC_ConfigChannel+0x240>)
 8005434:	fba2 2303 	umull	r2, r3, r2, r3
 8005438:	0c9a      	lsrs	r2, r3, #18
 800543a:	4613      	mov	r3, r2
 800543c:	009b      	lsls	r3, r3, #2
 800543e:	4413      	add	r3, r2
 8005440:	005b      	lsls	r3, r3, #1
 8005442:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8005444:	e002      	b.n	800544c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8005446:	68bb      	ldr	r3, [r7, #8]
 8005448:	3b01      	subs	r3, #1
 800544a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800544c:	68bb      	ldr	r3, [r7, #8]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d1f9      	bne.n	8005446 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	2200      	movs	r2, #0
 8005456:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800545a:	2300      	movs	r3, #0
}
 800545c:	4618      	mov	r0, r3
 800545e:	3714      	adds	r7, #20
 8005460:	46bd      	mov	sp, r7
 8005462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005466:	4770      	bx	lr
 8005468:	40012300 	.word	0x40012300
 800546c:	40012000 	.word	0x40012000
 8005470:	20000004 	.word	0x20000004
 8005474:	431bde83 	.word	0x431bde83

08005478 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005478:	b480      	push	{r7}
 800547a:	b085      	sub	sp, #20
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005480:	4b79      	ldr	r3, [pc, #484]	; (8005668 <ADC_Init+0x1f0>)
 8005482:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	685b      	ldr	r3, [r3, #4]
 8005488:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	685a      	ldr	r2, [r3, #4]
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	685b      	ldr	r3, [r3, #4]
 8005498:	431a      	orrs	r2, r3
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	685a      	ldr	r2, [r3, #4]
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80054ac:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	6859      	ldr	r1, [r3, #4]
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	691b      	ldr	r3, [r3, #16]
 80054b8:	021a      	lsls	r2, r3, #8
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	430a      	orrs	r2, r1
 80054c0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	685a      	ldr	r2, [r3, #4]
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80054d0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	6859      	ldr	r1, [r3, #4]
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	689a      	ldr	r2, [r3, #8]
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	430a      	orrs	r2, r1
 80054e2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	689a      	ldr	r2, [r3, #8]
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80054f2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	6899      	ldr	r1, [r3, #8]
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	68da      	ldr	r2, [r3, #12]
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	430a      	orrs	r2, r1
 8005504:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800550a:	4a58      	ldr	r2, [pc, #352]	; (800566c <ADC_Init+0x1f4>)
 800550c:	4293      	cmp	r3, r2
 800550e:	d022      	beq.n	8005556 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	689a      	ldr	r2, [r3, #8]
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800551e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	6899      	ldr	r1, [r3, #8]
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	430a      	orrs	r2, r1
 8005530:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	689a      	ldr	r2, [r3, #8]
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005540:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	6899      	ldr	r1, [r3, #8]
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	430a      	orrs	r2, r1
 8005552:	609a      	str	r2, [r3, #8]
 8005554:	e00f      	b.n	8005576 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	689a      	ldr	r2, [r3, #8]
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005564:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	689a      	ldr	r2, [r3, #8]
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005574:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	689a      	ldr	r2, [r3, #8]
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f022 0202 	bic.w	r2, r2, #2
 8005584:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	6899      	ldr	r1, [r3, #8]
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	7e1b      	ldrb	r3, [r3, #24]
 8005590:	005a      	lsls	r2, r3, #1
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	430a      	orrs	r2, r1
 8005598:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	f893 3020 	ldrb.w	r3, [r3, #32]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d01b      	beq.n	80055dc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	685a      	ldr	r2, [r3, #4]
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80055b2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	685a      	ldr	r2, [r3, #4]
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80055c2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	6859      	ldr	r1, [r3, #4]
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ce:	3b01      	subs	r3, #1
 80055d0:	035a      	lsls	r2, r3, #13
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	430a      	orrs	r2, r1
 80055d8:	605a      	str	r2, [r3, #4]
 80055da:	e007      	b.n	80055ec <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	685a      	ldr	r2, [r3, #4]
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80055ea:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80055fa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	69db      	ldr	r3, [r3, #28]
 8005606:	3b01      	subs	r3, #1
 8005608:	051a      	lsls	r2, r3, #20
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	430a      	orrs	r2, r1
 8005610:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	689a      	ldr	r2, [r3, #8]
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005620:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	6899      	ldr	r1, [r3, #8]
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800562e:	025a      	lsls	r2, r3, #9
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	430a      	orrs	r2, r1
 8005636:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	689a      	ldr	r2, [r3, #8]
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005646:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	6899      	ldr	r1, [r3, #8]
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	695b      	ldr	r3, [r3, #20]
 8005652:	029a      	lsls	r2, r3, #10
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	430a      	orrs	r2, r1
 800565a:	609a      	str	r2, [r3, #8]
}
 800565c:	bf00      	nop
 800565e:	3714      	adds	r7, #20
 8005660:	46bd      	mov	sp, r7
 8005662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005666:	4770      	bx	lr
 8005668:	40012300 	.word	0x40012300
 800566c:	0f000001 	.word	0x0f000001

08005670 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005670:	b480      	push	{r7}
 8005672:	b085      	sub	sp, #20
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	f003 0307 	and.w	r3, r3, #7
 800567e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005680:	4b0c      	ldr	r3, [pc, #48]	; (80056b4 <__NVIC_SetPriorityGrouping+0x44>)
 8005682:	68db      	ldr	r3, [r3, #12]
 8005684:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005686:	68ba      	ldr	r2, [r7, #8]
 8005688:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800568c:	4013      	ands	r3, r2
 800568e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005694:	68bb      	ldr	r3, [r7, #8]
 8005696:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005698:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800569c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80056a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80056a2:	4a04      	ldr	r2, [pc, #16]	; (80056b4 <__NVIC_SetPriorityGrouping+0x44>)
 80056a4:	68bb      	ldr	r3, [r7, #8]
 80056a6:	60d3      	str	r3, [r2, #12]
}
 80056a8:	bf00      	nop
 80056aa:	3714      	adds	r7, #20
 80056ac:	46bd      	mov	sp, r7
 80056ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b2:	4770      	bx	lr
 80056b4:	e000ed00 	.word	0xe000ed00

080056b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80056b8:	b480      	push	{r7}
 80056ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80056bc:	4b04      	ldr	r3, [pc, #16]	; (80056d0 <__NVIC_GetPriorityGrouping+0x18>)
 80056be:	68db      	ldr	r3, [r3, #12]
 80056c0:	0a1b      	lsrs	r3, r3, #8
 80056c2:	f003 0307 	and.w	r3, r3, #7
}
 80056c6:	4618      	mov	r0, r3
 80056c8:	46bd      	mov	sp, r7
 80056ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ce:	4770      	bx	lr
 80056d0:	e000ed00 	.word	0xe000ed00

080056d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80056d4:	b480      	push	{r7}
 80056d6:	b083      	sub	sp, #12
 80056d8:	af00      	add	r7, sp, #0
 80056da:	4603      	mov	r3, r0
 80056dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80056de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	db0b      	blt.n	80056fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80056e6:	79fb      	ldrb	r3, [r7, #7]
 80056e8:	f003 021f 	and.w	r2, r3, #31
 80056ec:	4907      	ldr	r1, [pc, #28]	; (800570c <__NVIC_EnableIRQ+0x38>)
 80056ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80056f2:	095b      	lsrs	r3, r3, #5
 80056f4:	2001      	movs	r0, #1
 80056f6:	fa00 f202 	lsl.w	r2, r0, r2
 80056fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80056fe:	bf00      	nop
 8005700:	370c      	adds	r7, #12
 8005702:	46bd      	mov	sp, r7
 8005704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005708:	4770      	bx	lr
 800570a:	bf00      	nop
 800570c:	e000e100 	.word	0xe000e100

08005710 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005710:	b480      	push	{r7}
 8005712:	b083      	sub	sp, #12
 8005714:	af00      	add	r7, sp, #0
 8005716:	4603      	mov	r3, r0
 8005718:	6039      	str	r1, [r7, #0]
 800571a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800571c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005720:	2b00      	cmp	r3, #0
 8005722:	db0a      	blt.n	800573a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	b2da      	uxtb	r2, r3
 8005728:	490c      	ldr	r1, [pc, #48]	; (800575c <__NVIC_SetPriority+0x4c>)
 800572a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800572e:	0112      	lsls	r2, r2, #4
 8005730:	b2d2      	uxtb	r2, r2
 8005732:	440b      	add	r3, r1
 8005734:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005738:	e00a      	b.n	8005750 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	b2da      	uxtb	r2, r3
 800573e:	4908      	ldr	r1, [pc, #32]	; (8005760 <__NVIC_SetPriority+0x50>)
 8005740:	79fb      	ldrb	r3, [r7, #7]
 8005742:	f003 030f 	and.w	r3, r3, #15
 8005746:	3b04      	subs	r3, #4
 8005748:	0112      	lsls	r2, r2, #4
 800574a:	b2d2      	uxtb	r2, r2
 800574c:	440b      	add	r3, r1
 800574e:	761a      	strb	r2, [r3, #24]
}
 8005750:	bf00      	nop
 8005752:	370c      	adds	r7, #12
 8005754:	46bd      	mov	sp, r7
 8005756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575a:	4770      	bx	lr
 800575c:	e000e100 	.word	0xe000e100
 8005760:	e000ed00 	.word	0xe000ed00

08005764 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005764:	b480      	push	{r7}
 8005766:	b089      	sub	sp, #36	; 0x24
 8005768:	af00      	add	r7, sp, #0
 800576a:	60f8      	str	r0, [r7, #12]
 800576c:	60b9      	str	r1, [r7, #8]
 800576e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	f003 0307 	and.w	r3, r3, #7
 8005776:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005778:	69fb      	ldr	r3, [r7, #28]
 800577a:	f1c3 0307 	rsb	r3, r3, #7
 800577e:	2b04      	cmp	r3, #4
 8005780:	bf28      	it	cs
 8005782:	2304      	movcs	r3, #4
 8005784:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005786:	69fb      	ldr	r3, [r7, #28]
 8005788:	3304      	adds	r3, #4
 800578a:	2b06      	cmp	r3, #6
 800578c:	d902      	bls.n	8005794 <NVIC_EncodePriority+0x30>
 800578e:	69fb      	ldr	r3, [r7, #28]
 8005790:	3b03      	subs	r3, #3
 8005792:	e000      	b.n	8005796 <NVIC_EncodePriority+0x32>
 8005794:	2300      	movs	r3, #0
 8005796:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005798:	f04f 32ff 	mov.w	r2, #4294967295
 800579c:	69bb      	ldr	r3, [r7, #24]
 800579e:	fa02 f303 	lsl.w	r3, r2, r3
 80057a2:	43da      	mvns	r2, r3
 80057a4:	68bb      	ldr	r3, [r7, #8]
 80057a6:	401a      	ands	r2, r3
 80057a8:	697b      	ldr	r3, [r7, #20]
 80057aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80057ac:	f04f 31ff 	mov.w	r1, #4294967295
 80057b0:	697b      	ldr	r3, [r7, #20]
 80057b2:	fa01 f303 	lsl.w	r3, r1, r3
 80057b6:	43d9      	mvns	r1, r3
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80057bc:	4313      	orrs	r3, r2
         );
}
 80057be:	4618      	mov	r0, r3
 80057c0:	3724      	adds	r7, #36	; 0x24
 80057c2:	46bd      	mov	sp, r7
 80057c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c8:	4770      	bx	lr
	...

080057cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80057cc:	b580      	push	{r7, lr}
 80057ce:	b082      	sub	sp, #8
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	3b01      	subs	r3, #1
 80057d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80057dc:	d301      	bcc.n	80057e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80057de:	2301      	movs	r3, #1
 80057e0:	e00f      	b.n	8005802 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80057e2:	4a0a      	ldr	r2, [pc, #40]	; (800580c <SysTick_Config+0x40>)
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	3b01      	subs	r3, #1
 80057e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80057ea:	210f      	movs	r1, #15
 80057ec:	f04f 30ff 	mov.w	r0, #4294967295
 80057f0:	f7ff ff8e 	bl	8005710 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80057f4:	4b05      	ldr	r3, [pc, #20]	; (800580c <SysTick_Config+0x40>)
 80057f6:	2200      	movs	r2, #0
 80057f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80057fa:	4b04      	ldr	r3, [pc, #16]	; (800580c <SysTick_Config+0x40>)
 80057fc:	2207      	movs	r2, #7
 80057fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005800:	2300      	movs	r3, #0
}
 8005802:	4618      	mov	r0, r3
 8005804:	3708      	adds	r7, #8
 8005806:	46bd      	mov	sp, r7
 8005808:	bd80      	pop	{r7, pc}
 800580a:	bf00      	nop
 800580c:	e000e010 	.word	0xe000e010

08005810 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005810:	b580      	push	{r7, lr}
 8005812:	b082      	sub	sp, #8
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005818:	6878      	ldr	r0, [r7, #4]
 800581a:	f7ff ff29 	bl	8005670 <__NVIC_SetPriorityGrouping>
}
 800581e:	bf00      	nop
 8005820:	3708      	adds	r7, #8
 8005822:	46bd      	mov	sp, r7
 8005824:	bd80      	pop	{r7, pc}

08005826 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005826:	b580      	push	{r7, lr}
 8005828:	b086      	sub	sp, #24
 800582a:	af00      	add	r7, sp, #0
 800582c:	4603      	mov	r3, r0
 800582e:	60b9      	str	r1, [r7, #8]
 8005830:	607a      	str	r2, [r7, #4]
 8005832:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005834:	2300      	movs	r3, #0
 8005836:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005838:	f7ff ff3e 	bl	80056b8 <__NVIC_GetPriorityGrouping>
 800583c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800583e:	687a      	ldr	r2, [r7, #4]
 8005840:	68b9      	ldr	r1, [r7, #8]
 8005842:	6978      	ldr	r0, [r7, #20]
 8005844:	f7ff ff8e 	bl	8005764 <NVIC_EncodePriority>
 8005848:	4602      	mov	r2, r0
 800584a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800584e:	4611      	mov	r1, r2
 8005850:	4618      	mov	r0, r3
 8005852:	f7ff ff5d 	bl	8005710 <__NVIC_SetPriority>
}
 8005856:	bf00      	nop
 8005858:	3718      	adds	r7, #24
 800585a:	46bd      	mov	sp, r7
 800585c:	bd80      	pop	{r7, pc}

0800585e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800585e:	b580      	push	{r7, lr}
 8005860:	b082      	sub	sp, #8
 8005862:	af00      	add	r7, sp, #0
 8005864:	4603      	mov	r3, r0
 8005866:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005868:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800586c:	4618      	mov	r0, r3
 800586e:	f7ff ff31 	bl	80056d4 <__NVIC_EnableIRQ>
}
 8005872:	bf00      	nop
 8005874:	3708      	adds	r7, #8
 8005876:	46bd      	mov	sp, r7
 8005878:	bd80      	pop	{r7, pc}

0800587a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800587a:	b580      	push	{r7, lr}
 800587c:	b082      	sub	sp, #8
 800587e:	af00      	add	r7, sp, #0
 8005880:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005882:	6878      	ldr	r0, [r7, #4]
 8005884:	f7ff ffa2 	bl	80057cc <SysTick_Config>
 8005888:	4603      	mov	r3, r0
}
 800588a:	4618      	mov	r0, r3
 800588c:	3708      	adds	r7, #8
 800588e:	46bd      	mov	sp, r7
 8005890:	bd80      	pop	{r7, pc}
	...

08005894 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005894:	b580      	push	{r7, lr}
 8005896:	b086      	sub	sp, #24
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800589c:	2300      	movs	r3, #0
 800589e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80058a0:	f7ff fc54 	bl	800514c <HAL_GetTick>
 80058a4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d101      	bne.n	80058b0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80058ac:	2301      	movs	r3, #1
 80058ae:	e099      	b.n	80059e4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2202      	movs	r2, #2
 80058b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2200      	movs	r2, #0
 80058bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	681a      	ldr	r2, [r3, #0]
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f022 0201 	bic.w	r2, r2, #1
 80058ce:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80058d0:	e00f      	b.n	80058f2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80058d2:	f7ff fc3b 	bl	800514c <HAL_GetTick>
 80058d6:	4602      	mov	r2, r0
 80058d8:	693b      	ldr	r3, [r7, #16]
 80058da:	1ad3      	subs	r3, r2, r3
 80058dc:	2b05      	cmp	r3, #5
 80058de:	d908      	bls.n	80058f2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2220      	movs	r2, #32
 80058e4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	2203      	movs	r2, #3
 80058ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80058ee:	2303      	movs	r3, #3
 80058f0:	e078      	b.n	80059e4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f003 0301 	and.w	r3, r3, #1
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d1e8      	bne.n	80058d2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005908:	697a      	ldr	r2, [r7, #20]
 800590a:	4b38      	ldr	r3, [pc, #224]	; (80059ec <HAL_DMA_Init+0x158>)
 800590c:	4013      	ands	r3, r2
 800590e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	685a      	ldr	r2, [r3, #4]
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	689b      	ldr	r3, [r3, #8]
 8005918:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800591e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	691b      	ldr	r3, [r3, #16]
 8005924:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800592a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	699b      	ldr	r3, [r3, #24]
 8005930:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005936:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	6a1b      	ldr	r3, [r3, #32]
 800593c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800593e:	697a      	ldr	r2, [r7, #20]
 8005940:	4313      	orrs	r3, r2
 8005942:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005948:	2b04      	cmp	r3, #4
 800594a:	d107      	bne.n	800595c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005954:	4313      	orrs	r3, r2
 8005956:	697a      	ldr	r2, [r7, #20]
 8005958:	4313      	orrs	r3, r2
 800595a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	697a      	ldr	r2, [r7, #20]
 8005962:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	695b      	ldr	r3, [r3, #20]
 800596a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800596c:	697b      	ldr	r3, [r7, #20]
 800596e:	f023 0307 	bic.w	r3, r3, #7
 8005972:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005978:	697a      	ldr	r2, [r7, #20]
 800597a:	4313      	orrs	r3, r2
 800597c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005982:	2b04      	cmp	r3, #4
 8005984:	d117      	bne.n	80059b6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800598a:	697a      	ldr	r2, [r7, #20]
 800598c:	4313      	orrs	r3, r2
 800598e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005994:	2b00      	cmp	r3, #0
 8005996:	d00e      	beq.n	80059b6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005998:	6878      	ldr	r0, [r7, #4]
 800599a:	f000 fb01 	bl	8005fa0 <DMA_CheckFifoParam>
 800599e:	4603      	mov	r3, r0
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d008      	beq.n	80059b6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2240      	movs	r2, #64	; 0x40
 80059a8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	2201      	movs	r2, #1
 80059ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80059b2:	2301      	movs	r3, #1
 80059b4:	e016      	b.n	80059e4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	697a      	ldr	r2, [r7, #20]
 80059bc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80059be:	6878      	ldr	r0, [r7, #4]
 80059c0:	f000 fab8 	bl	8005f34 <DMA_CalcBaseAndBitshift>
 80059c4:	4603      	mov	r3, r0
 80059c6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059cc:	223f      	movs	r2, #63	; 0x3f
 80059ce:	409a      	lsls	r2, r3
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2200      	movs	r2, #0
 80059d8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	2201      	movs	r2, #1
 80059de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80059e2:	2300      	movs	r3, #0
}
 80059e4:	4618      	mov	r0, r3
 80059e6:	3718      	adds	r7, #24
 80059e8:	46bd      	mov	sp, r7
 80059ea:	bd80      	pop	{r7, pc}
 80059ec:	f010803f 	.word	0xf010803f

080059f0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80059f0:	b580      	push	{r7, lr}
 80059f2:	b086      	sub	sp, #24
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	60f8      	str	r0, [r7, #12]
 80059f8:	60b9      	str	r1, [r7, #8]
 80059fa:	607a      	str	r2, [r7, #4]
 80059fc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80059fe:	2300      	movs	r3, #0
 8005a00:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a06:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005a0e:	2b01      	cmp	r3, #1
 8005a10:	d101      	bne.n	8005a16 <HAL_DMA_Start_IT+0x26>
 8005a12:	2302      	movs	r3, #2
 8005a14:	e040      	b.n	8005a98 <HAL_DMA_Start_IT+0xa8>
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	2201      	movs	r2, #1
 8005a1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005a24:	b2db      	uxtb	r3, r3
 8005a26:	2b01      	cmp	r3, #1
 8005a28:	d12f      	bne.n	8005a8a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	2202      	movs	r2, #2
 8005a2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	2200      	movs	r2, #0
 8005a36:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	687a      	ldr	r2, [r7, #4]
 8005a3c:	68b9      	ldr	r1, [r7, #8]
 8005a3e:	68f8      	ldr	r0, [r7, #12]
 8005a40:	f000 fa4a 	bl	8005ed8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a48:	223f      	movs	r2, #63	; 0x3f
 8005a4a:	409a      	lsls	r2, r3
 8005a4c:	693b      	ldr	r3, [r7, #16]
 8005a4e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	681a      	ldr	r2, [r3, #0]
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f042 0216 	orr.w	r2, r2, #22
 8005a5e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d007      	beq.n	8005a78 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	681a      	ldr	r2, [r3, #0]
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f042 0208 	orr.w	r2, r2, #8
 8005a76:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	681a      	ldr	r2, [r3, #0]
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f042 0201 	orr.w	r2, r2, #1
 8005a86:	601a      	str	r2, [r3, #0]
 8005a88:	e005      	b.n	8005a96 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005a92:	2302      	movs	r3, #2
 8005a94:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8005a96:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a98:	4618      	mov	r0, r3
 8005a9a:	3718      	adds	r7, #24
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	bd80      	pop	{r7, pc}

08005aa0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b084      	sub	sp, #16
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005aac:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005aae:	f7ff fb4d 	bl	800514c <HAL_GetTick>
 8005ab2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005aba:	b2db      	uxtb	r3, r3
 8005abc:	2b02      	cmp	r3, #2
 8005abe:	d008      	beq.n	8005ad2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2280      	movs	r2, #128	; 0x80
 8005ac4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	2200      	movs	r2, #0
 8005aca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8005ace:	2301      	movs	r3, #1
 8005ad0:	e052      	b.n	8005b78 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	681a      	ldr	r2, [r3, #0]
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f022 0216 	bic.w	r2, r2, #22
 8005ae0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	695a      	ldr	r2, [r3, #20]
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005af0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d103      	bne.n	8005b02 <HAL_DMA_Abort+0x62>
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d007      	beq.n	8005b12 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	681a      	ldr	r2, [r3, #0]
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f022 0208 	bic.w	r2, r2, #8
 8005b10:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	681a      	ldr	r2, [r3, #0]
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f022 0201 	bic.w	r2, r2, #1
 8005b20:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005b22:	e013      	b.n	8005b4c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005b24:	f7ff fb12 	bl	800514c <HAL_GetTick>
 8005b28:	4602      	mov	r2, r0
 8005b2a:	68bb      	ldr	r3, [r7, #8]
 8005b2c:	1ad3      	subs	r3, r2, r3
 8005b2e:	2b05      	cmp	r3, #5
 8005b30:	d90c      	bls.n	8005b4c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	2220      	movs	r2, #32
 8005b36:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2203      	movs	r2, #3
 8005b3c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2200      	movs	r2, #0
 8005b44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8005b48:	2303      	movs	r3, #3
 8005b4a:	e015      	b.n	8005b78 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f003 0301 	and.w	r3, r3, #1
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d1e4      	bne.n	8005b24 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b5e:	223f      	movs	r2, #63	; 0x3f
 8005b60:	409a      	lsls	r2, r3
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	2201      	movs	r2, #1
 8005b6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	2200      	movs	r2, #0
 8005b72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8005b76:	2300      	movs	r3, #0
}
 8005b78:	4618      	mov	r0, r3
 8005b7a:	3710      	adds	r7, #16
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	bd80      	pop	{r7, pc}

08005b80 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005b80:	b480      	push	{r7}
 8005b82:	b083      	sub	sp, #12
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005b8e:	b2db      	uxtb	r3, r3
 8005b90:	2b02      	cmp	r3, #2
 8005b92:	d004      	beq.n	8005b9e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2280      	movs	r2, #128	; 0x80
 8005b98:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005b9a:	2301      	movs	r3, #1
 8005b9c:	e00c      	b.n	8005bb8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	2205      	movs	r2, #5
 8005ba2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	681a      	ldr	r2, [r3, #0]
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f022 0201 	bic.w	r2, r2, #1
 8005bb4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005bb6:	2300      	movs	r3, #0
}
 8005bb8:	4618      	mov	r0, r3
 8005bba:	370c      	adds	r7, #12
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc2:	4770      	bx	lr

08005bc4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005bc4:	b580      	push	{r7, lr}
 8005bc6:	b086      	sub	sp, #24
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005bcc:	2300      	movs	r3, #0
 8005bce:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005bd0:	4b92      	ldr	r3, [pc, #584]	; (8005e1c <HAL_DMA_IRQHandler+0x258>)
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	4a92      	ldr	r2, [pc, #584]	; (8005e20 <HAL_DMA_IRQHandler+0x25c>)
 8005bd6:	fba2 2303 	umull	r2, r3, r2, r3
 8005bda:	0a9b      	lsrs	r3, r3, #10
 8005bdc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005be2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005be4:	693b      	ldr	r3, [r7, #16]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005bee:	2208      	movs	r2, #8
 8005bf0:	409a      	lsls	r2, r3
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	4013      	ands	r3, r2
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d01a      	beq.n	8005c30 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f003 0304 	and.w	r3, r3, #4
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d013      	beq.n	8005c30 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	681a      	ldr	r2, [r3, #0]
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f022 0204 	bic.w	r2, r2, #4
 8005c16:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c1c:	2208      	movs	r2, #8
 8005c1e:	409a      	lsls	r2, r3
 8005c20:	693b      	ldr	r3, [r7, #16]
 8005c22:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c28:	f043 0201 	orr.w	r2, r3, #1
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c34:	2201      	movs	r2, #1
 8005c36:	409a      	lsls	r2, r3
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	4013      	ands	r3, r2
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d012      	beq.n	8005c66 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	695b      	ldr	r3, [r3, #20]
 8005c46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d00b      	beq.n	8005c66 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c52:	2201      	movs	r2, #1
 8005c54:	409a      	lsls	r2, r3
 8005c56:	693b      	ldr	r3, [r7, #16]
 8005c58:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c5e:	f043 0202 	orr.w	r2, r3, #2
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c6a:	2204      	movs	r2, #4
 8005c6c:	409a      	lsls	r2, r3
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	4013      	ands	r3, r2
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d012      	beq.n	8005c9c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f003 0302 	and.w	r3, r3, #2
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d00b      	beq.n	8005c9c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c88:	2204      	movs	r2, #4
 8005c8a:	409a      	lsls	r2, r3
 8005c8c:	693b      	ldr	r3, [r7, #16]
 8005c8e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c94:	f043 0204 	orr.w	r2, r3, #4
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ca0:	2210      	movs	r2, #16
 8005ca2:	409a      	lsls	r2, r3
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	4013      	ands	r3, r2
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d043      	beq.n	8005d34 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f003 0308 	and.w	r3, r3, #8
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d03c      	beq.n	8005d34 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005cbe:	2210      	movs	r2, #16
 8005cc0:	409a      	lsls	r2, r3
 8005cc2:	693b      	ldr	r3, [r7, #16]
 8005cc4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d018      	beq.n	8005d06 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d108      	bne.n	8005cf4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d024      	beq.n	8005d34 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cee:	6878      	ldr	r0, [r7, #4]
 8005cf0:	4798      	blx	r3
 8005cf2:	e01f      	b.n	8005d34 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d01b      	beq.n	8005d34 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d00:	6878      	ldr	r0, [r7, #4]
 8005d02:	4798      	blx	r3
 8005d04:	e016      	b.n	8005d34 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d107      	bne.n	8005d24 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	681a      	ldr	r2, [r3, #0]
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f022 0208 	bic.w	r2, r2, #8
 8005d22:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d003      	beq.n	8005d34 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d30:	6878      	ldr	r0, [r7, #4]
 8005d32:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d38:	2220      	movs	r2, #32
 8005d3a:	409a      	lsls	r2, r3
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	4013      	ands	r3, r2
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	f000 808e 	beq.w	8005e62 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	f003 0310 	and.w	r3, r3, #16
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	f000 8086 	beq.w	8005e62 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d5a:	2220      	movs	r2, #32
 8005d5c:	409a      	lsls	r2, r3
 8005d5e:	693b      	ldr	r3, [r7, #16]
 8005d60:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005d68:	b2db      	uxtb	r3, r3
 8005d6a:	2b05      	cmp	r3, #5
 8005d6c:	d136      	bne.n	8005ddc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	681a      	ldr	r2, [r3, #0]
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f022 0216 	bic.w	r2, r2, #22
 8005d7c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	695a      	ldr	r2, [r3, #20]
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005d8c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d103      	bne.n	8005d9e <HAL_DMA_IRQHandler+0x1da>
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d007      	beq.n	8005dae <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	681a      	ldr	r2, [r3, #0]
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f022 0208 	bic.w	r2, r2, #8
 8005dac:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005db2:	223f      	movs	r2, #63	; 0x3f
 8005db4:	409a      	lsls	r2, r3
 8005db6:	693b      	ldr	r3, [r7, #16]
 8005db8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	2201      	movs	r2, #1
 8005dbe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d07d      	beq.n	8005ece <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005dd6:	6878      	ldr	r0, [r7, #4]
 8005dd8:	4798      	blx	r3
        }
        return;
 8005dda:	e078      	b.n	8005ece <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d01c      	beq.n	8005e24 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d108      	bne.n	8005e0a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d030      	beq.n	8005e62 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e04:	6878      	ldr	r0, [r7, #4]
 8005e06:	4798      	blx	r3
 8005e08:	e02b      	b.n	8005e62 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d027      	beq.n	8005e62 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e16:	6878      	ldr	r0, [r7, #4]
 8005e18:	4798      	blx	r3
 8005e1a:	e022      	b.n	8005e62 <HAL_DMA_IRQHandler+0x29e>
 8005e1c:	20000004 	.word	0x20000004
 8005e20:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d10f      	bne.n	8005e52 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	681a      	ldr	r2, [r3, #0]
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f022 0210 	bic.w	r2, r2, #16
 8005e40:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	2201      	movs	r2, #1
 8005e46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d003      	beq.n	8005e62 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e5e:	6878      	ldr	r0, [r7, #4]
 8005e60:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d032      	beq.n	8005ed0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e6e:	f003 0301 	and.w	r3, r3, #1
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d022      	beq.n	8005ebc <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	2205      	movs	r2, #5
 8005e7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	681a      	ldr	r2, [r3, #0]
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f022 0201 	bic.w	r2, r2, #1
 8005e8c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005e8e:	68bb      	ldr	r3, [r7, #8]
 8005e90:	3301      	adds	r3, #1
 8005e92:	60bb      	str	r3, [r7, #8]
 8005e94:	697a      	ldr	r2, [r7, #20]
 8005e96:	429a      	cmp	r2, r3
 8005e98:	d307      	bcc.n	8005eaa <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f003 0301 	and.w	r3, r3, #1
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d1f2      	bne.n	8005e8e <HAL_DMA_IRQHandler+0x2ca>
 8005ea8:	e000      	b.n	8005eac <HAL_DMA_IRQHandler+0x2e8>
          break;
 8005eaa:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2201      	movs	r2, #1
 8005eb0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d005      	beq.n	8005ed0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ec8:	6878      	ldr	r0, [r7, #4]
 8005eca:	4798      	blx	r3
 8005ecc:	e000      	b.n	8005ed0 <HAL_DMA_IRQHandler+0x30c>
        return;
 8005ece:	bf00      	nop
    }
  }
}
 8005ed0:	3718      	adds	r7, #24
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	bd80      	pop	{r7, pc}
 8005ed6:	bf00      	nop

08005ed8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005ed8:	b480      	push	{r7}
 8005eda:	b085      	sub	sp, #20
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	60f8      	str	r0, [r7, #12]
 8005ee0:	60b9      	str	r1, [r7, #8]
 8005ee2:	607a      	str	r2, [r7, #4]
 8005ee4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	681a      	ldr	r2, [r3, #0]
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005ef4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	683a      	ldr	r2, [r7, #0]
 8005efc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	689b      	ldr	r3, [r3, #8]
 8005f02:	2b40      	cmp	r3, #64	; 0x40
 8005f04:	d108      	bne.n	8005f18 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	687a      	ldr	r2, [r7, #4]
 8005f0c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	68ba      	ldr	r2, [r7, #8]
 8005f14:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005f16:	e007      	b.n	8005f28 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	68ba      	ldr	r2, [r7, #8]
 8005f1e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	687a      	ldr	r2, [r7, #4]
 8005f26:	60da      	str	r2, [r3, #12]
}
 8005f28:	bf00      	nop
 8005f2a:	3714      	adds	r7, #20
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f32:	4770      	bx	lr

08005f34 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005f34:	b480      	push	{r7}
 8005f36:	b085      	sub	sp, #20
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	b2db      	uxtb	r3, r3
 8005f42:	3b10      	subs	r3, #16
 8005f44:	4a14      	ldr	r2, [pc, #80]	; (8005f98 <DMA_CalcBaseAndBitshift+0x64>)
 8005f46:	fba2 2303 	umull	r2, r3, r2, r3
 8005f4a:	091b      	lsrs	r3, r3, #4
 8005f4c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005f4e:	4a13      	ldr	r2, [pc, #76]	; (8005f9c <DMA_CalcBaseAndBitshift+0x68>)
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	4413      	add	r3, r2
 8005f54:	781b      	ldrb	r3, [r3, #0]
 8005f56:	461a      	mov	r2, r3
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	2b03      	cmp	r3, #3
 8005f60:	d909      	bls.n	8005f76 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005f6a:	f023 0303 	bic.w	r3, r3, #3
 8005f6e:	1d1a      	adds	r2, r3, #4
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	659a      	str	r2, [r3, #88]	; 0x58
 8005f74:	e007      	b.n	8005f86 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005f7e:	f023 0303 	bic.w	r3, r3, #3
 8005f82:	687a      	ldr	r2, [r7, #4]
 8005f84:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	3714      	adds	r7, #20
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f94:	4770      	bx	lr
 8005f96:	bf00      	nop
 8005f98:	aaaaaaab 	.word	0xaaaaaaab
 8005f9c:	08009c04 	.word	0x08009c04

08005fa0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005fa0:	b480      	push	{r7}
 8005fa2:	b085      	sub	sp, #20
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005fa8:	2300      	movs	r3, #0
 8005faa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fb0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	699b      	ldr	r3, [r3, #24]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d11f      	bne.n	8005ffa <DMA_CheckFifoParam+0x5a>
 8005fba:	68bb      	ldr	r3, [r7, #8]
 8005fbc:	2b03      	cmp	r3, #3
 8005fbe:	d856      	bhi.n	800606e <DMA_CheckFifoParam+0xce>
 8005fc0:	a201      	add	r2, pc, #4	; (adr r2, 8005fc8 <DMA_CheckFifoParam+0x28>)
 8005fc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fc6:	bf00      	nop
 8005fc8:	08005fd9 	.word	0x08005fd9
 8005fcc:	08005feb 	.word	0x08005feb
 8005fd0:	08005fd9 	.word	0x08005fd9
 8005fd4:	0800606f 	.word	0x0800606f
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fdc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d046      	beq.n	8006072 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005fe4:	2301      	movs	r3, #1
 8005fe6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005fe8:	e043      	b.n	8006072 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fee:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005ff2:	d140      	bne.n	8006076 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005ff4:	2301      	movs	r3, #1
 8005ff6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005ff8:	e03d      	b.n	8006076 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	699b      	ldr	r3, [r3, #24]
 8005ffe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006002:	d121      	bne.n	8006048 <DMA_CheckFifoParam+0xa8>
 8006004:	68bb      	ldr	r3, [r7, #8]
 8006006:	2b03      	cmp	r3, #3
 8006008:	d837      	bhi.n	800607a <DMA_CheckFifoParam+0xda>
 800600a:	a201      	add	r2, pc, #4	; (adr r2, 8006010 <DMA_CheckFifoParam+0x70>)
 800600c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006010:	08006021 	.word	0x08006021
 8006014:	08006027 	.word	0x08006027
 8006018:	08006021 	.word	0x08006021
 800601c:	08006039 	.word	0x08006039
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8006020:	2301      	movs	r3, #1
 8006022:	73fb      	strb	r3, [r7, #15]
      break;
 8006024:	e030      	b.n	8006088 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800602a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800602e:	2b00      	cmp	r3, #0
 8006030:	d025      	beq.n	800607e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8006032:	2301      	movs	r3, #1
 8006034:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006036:	e022      	b.n	800607e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800603c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006040:	d11f      	bne.n	8006082 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8006042:	2301      	movs	r3, #1
 8006044:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8006046:	e01c      	b.n	8006082 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8006048:	68bb      	ldr	r3, [r7, #8]
 800604a:	2b02      	cmp	r3, #2
 800604c:	d903      	bls.n	8006056 <DMA_CheckFifoParam+0xb6>
 800604e:	68bb      	ldr	r3, [r7, #8]
 8006050:	2b03      	cmp	r3, #3
 8006052:	d003      	beq.n	800605c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8006054:	e018      	b.n	8006088 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8006056:	2301      	movs	r3, #1
 8006058:	73fb      	strb	r3, [r7, #15]
      break;
 800605a:	e015      	b.n	8006088 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006060:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006064:	2b00      	cmp	r3, #0
 8006066:	d00e      	beq.n	8006086 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8006068:	2301      	movs	r3, #1
 800606a:	73fb      	strb	r3, [r7, #15]
      break;
 800606c:	e00b      	b.n	8006086 <DMA_CheckFifoParam+0xe6>
      break;
 800606e:	bf00      	nop
 8006070:	e00a      	b.n	8006088 <DMA_CheckFifoParam+0xe8>
      break;
 8006072:	bf00      	nop
 8006074:	e008      	b.n	8006088 <DMA_CheckFifoParam+0xe8>
      break;
 8006076:	bf00      	nop
 8006078:	e006      	b.n	8006088 <DMA_CheckFifoParam+0xe8>
      break;
 800607a:	bf00      	nop
 800607c:	e004      	b.n	8006088 <DMA_CheckFifoParam+0xe8>
      break;
 800607e:	bf00      	nop
 8006080:	e002      	b.n	8006088 <DMA_CheckFifoParam+0xe8>
      break;   
 8006082:	bf00      	nop
 8006084:	e000      	b.n	8006088 <DMA_CheckFifoParam+0xe8>
      break;
 8006086:	bf00      	nop
    }
  } 
  
  return status; 
 8006088:	7bfb      	ldrb	r3, [r7, #15]
}
 800608a:	4618      	mov	r0, r3
 800608c:	3714      	adds	r7, #20
 800608e:	46bd      	mov	sp, r7
 8006090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006094:	4770      	bx	lr
 8006096:	bf00      	nop

08006098 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006098:	b480      	push	{r7}
 800609a:	b089      	sub	sp, #36	; 0x24
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]
 80060a0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80060a2:	2300      	movs	r3, #0
 80060a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80060a6:	2300      	movs	r3, #0
 80060a8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80060aa:	2300      	movs	r3, #0
 80060ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80060ae:	2300      	movs	r3, #0
 80060b0:	61fb      	str	r3, [r7, #28]
 80060b2:	e16b      	b.n	800638c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80060b4:	2201      	movs	r2, #1
 80060b6:	69fb      	ldr	r3, [r7, #28]
 80060b8:	fa02 f303 	lsl.w	r3, r2, r3
 80060bc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80060be:	683b      	ldr	r3, [r7, #0]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	697a      	ldr	r2, [r7, #20]
 80060c4:	4013      	ands	r3, r2
 80060c6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80060c8:	693a      	ldr	r2, [r7, #16]
 80060ca:	697b      	ldr	r3, [r7, #20]
 80060cc:	429a      	cmp	r2, r3
 80060ce:	f040 815a 	bne.w	8006386 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80060d2:	683b      	ldr	r3, [r7, #0]
 80060d4:	685b      	ldr	r3, [r3, #4]
 80060d6:	f003 0303 	and.w	r3, r3, #3
 80060da:	2b01      	cmp	r3, #1
 80060dc:	d005      	beq.n	80060ea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	685b      	ldr	r3, [r3, #4]
 80060e2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80060e6:	2b02      	cmp	r3, #2
 80060e8:	d130      	bne.n	800614c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	689b      	ldr	r3, [r3, #8]
 80060ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80060f0:	69fb      	ldr	r3, [r7, #28]
 80060f2:	005b      	lsls	r3, r3, #1
 80060f4:	2203      	movs	r2, #3
 80060f6:	fa02 f303 	lsl.w	r3, r2, r3
 80060fa:	43db      	mvns	r3, r3
 80060fc:	69ba      	ldr	r2, [r7, #24]
 80060fe:	4013      	ands	r3, r2
 8006100:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006102:	683b      	ldr	r3, [r7, #0]
 8006104:	68da      	ldr	r2, [r3, #12]
 8006106:	69fb      	ldr	r3, [r7, #28]
 8006108:	005b      	lsls	r3, r3, #1
 800610a:	fa02 f303 	lsl.w	r3, r2, r3
 800610e:	69ba      	ldr	r2, [r7, #24]
 8006110:	4313      	orrs	r3, r2
 8006112:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	69ba      	ldr	r2, [r7, #24]
 8006118:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	685b      	ldr	r3, [r3, #4]
 800611e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006120:	2201      	movs	r2, #1
 8006122:	69fb      	ldr	r3, [r7, #28]
 8006124:	fa02 f303 	lsl.w	r3, r2, r3
 8006128:	43db      	mvns	r3, r3
 800612a:	69ba      	ldr	r2, [r7, #24]
 800612c:	4013      	ands	r3, r2
 800612e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006130:	683b      	ldr	r3, [r7, #0]
 8006132:	685b      	ldr	r3, [r3, #4]
 8006134:	091b      	lsrs	r3, r3, #4
 8006136:	f003 0201 	and.w	r2, r3, #1
 800613a:	69fb      	ldr	r3, [r7, #28]
 800613c:	fa02 f303 	lsl.w	r3, r2, r3
 8006140:	69ba      	ldr	r2, [r7, #24]
 8006142:	4313      	orrs	r3, r2
 8006144:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	69ba      	ldr	r2, [r7, #24]
 800614a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800614c:	683b      	ldr	r3, [r7, #0]
 800614e:	685b      	ldr	r3, [r3, #4]
 8006150:	f003 0303 	and.w	r3, r3, #3
 8006154:	2b03      	cmp	r3, #3
 8006156:	d017      	beq.n	8006188 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	68db      	ldr	r3, [r3, #12]
 800615c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800615e:	69fb      	ldr	r3, [r7, #28]
 8006160:	005b      	lsls	r3, r3, #1
 8006162:	2203      	movs	r2, #3
 8006164:	fa02 f303 	lsl.w	r3, r2, r3
 8006168:	43db      	mvns	r3, r3
 800616a:	69ba      	ldr	r2, [r7, #24]
 800616c:	4013      	ands	r3, r2
 800616e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006170:	683b      	ldr	r3, [r7, #0]
 8006172:	689a      	ldr	r2, [r3, #8]
 8006174:	69fb      	ldr	r3, [r7, #28]
 8006176:	005b      	lsls	r3, r3, #1
 8006178:	fa02 f303 	lsl.w	r3, r2, r3
 800617c:	69ba      	ldr	r2, [r7, #24]
 800617e:	4313      	orrs	r3, r2
 8006180:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	69ba      	ldr	r2, [r7, #24]
 8006186:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006188:	683b      	ldr	r3, [r7, #0]
 800618a:	685b      	ldr	r3, [r3, #4]
 800618c:	f003 0303 	and.w	r3, r3, #3
 8006190:	2b02      	cmp	r3, #2
 8006192:	d123      	bne.n	80061dc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006194:	69fb      	ldr	r3, [r7, #28]
 8006196:	08da      	lsrs	r2, r3, #3
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	3208      	adds	r2, #8
 800619c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80061a2:	69fb      	ldr	r3, [r7, #28]
 80061a4:	f003 0307 	and.w	r3, r3, #7
 80061a8:	009b      	lsls	r3, r3, #2
 80061aa:	220f      	movs	r2, #15
 80061ac:	fa02 f303 	lsl.w	r3, r2, r3
 80061b0:	43db      	mvns	r3, r3
 80061b2:	69ba      	ldr	r2, [r7, #24]
 80061b4:	4013      	ands	r3, r2
 80061b6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	691a      	ldr	r2, [r3, #16]
 80061bc:	69fb      	ldr	r3, [r7, #28]
 80061be:	f003 0307 	and.w	r3, r3, #7
 80061c2:	009b      	lsls	r3, r3, #2
 80061c4:	fa02 f303 	lsl.w	r3, r2, r3
 80061c8:	69ba      	ldr	r2, [r7, #24]
 80061ca:	4313      	orrs	r3, r2
 80061cc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80061ce:	69fb      	ldr	r3, [r7, #28]
 80061d0:	08da      	lsrs	r2, r3, #3
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	3208      	adds	r2, #8
 80061d6:	69b9      	ldr	r1, [r7, #24]
 80061d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80061e2:	69fb      	ldr	r3, [r7, #28]
 80061e4:	005b      	lsls	r3, r3, #1
 80061e6:	2203      	movs	r2, #3
 80061e8:	fa02 f303 	lsl.w	r3, r2, r3
 80061ec:	43db      	mvns	r3, r3
 80061ee:	69ba      	ldr	r2, [r7, #24]
 80061f0:	4013      	ands	r3, r2
 80061f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80061f4:	683b      	ldr	r3, [r7, #0]
 80061f6:	685b      	ldr	r3, [r3, #4]
 80061f8:	f003 0203 	and.w	r2, r3, #3
 80061fc:	69fb      	ldr	r3, [r7, #28]
 80061fe:	005b      	lsls	r3, r3, #1
 8006200:	fa02 f303 	lsl.w	r3, r2, r3
 8006204:	69ba      	ldr	r2, [r7, #24]
 8006206:	4313      	orrs	r3, r2
 8006208:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	69ba      	ldr	r2, [r7, #24]
 800620e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006210:	683b      	ldr	r3, [r7, #0]
 8006212:	685b      	ldr	r3, [r3, #4]
 8006214:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006218:	2b00      	cmp	r3, #0
 800621a:	f000 80b4 	beq.w	8006386 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800621e:	2300      	movs	r3, #0
 8006220:	60fb      	str	r3, [r7, #12]
 8006222:	4b60      	ldr	r3, [pc, #384]	; (80063a4 <HAL_GPIO_Init+0x30c>)
 8006224:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006226:	4a5f      	ldr	r2, [pc, #380]	; (80063a4 <HAL_GPIO_Init+0x30c>)
 8006228:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800622c:	6453      	str	r3, [r2, #68]	; 0x44
 800622e:	4b5d      	ldr	r3, [pc, #372]	; (80063a4 <HAL_GPIO_Init+0x30c>)
 8006230:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006232:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006236:	60fb      	str	r3, [r7, #12]
 8006238:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800623a:	4a5b      	ldr	r2, [pc, #364]	; (80063a8 <HAL_GPIO_Init+0x310>)
 800623c:	69fb      	ldr	r3, [r7, #28]
 800623e:	089b      	lsrs	r3, r3, #2
 8006240:	3302      	adds	r3, #2
 8006242:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006246:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006248:	69fb      	ldr	r3, [r7, #28]
 800624a:	f003 0303 	and.w	r3, r3, #3
 800624e:	009b      	lsls	r3, r3, #2
 8006250:	220f      	movs	r2, #15
 8006252:	fa02 f303 	lsl.w	r3, r2, r3
 8006256:	43db      	mvns	r3, r3
 8006258:	69ba      	ldr	r2, [r7, #24]
 800625a:	4013      	ands	r3, r2
 800625c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	4a52      	ldr	r2, [pc, #328]	; (80063ac <HAL_GPIO_Init+0x314>)
 8006262:	4293      	cmp	r3, r2
 8006264:	d02b      	beq.n	80062be <HAL_GPIO_Init+0x226>
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	4a51      	ldr	r2, [pc, #324]	; (80063b0 <HAL_GPIO_Init+0x318>)
 800626a:	4293      	cmp	r3, r2
 800626c:	d025      	beq.n	80062ba <HAL_GPIO_Init+0x222>
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	4a50      	ldr	r2, [pc, #320]	; (80063b4 <HAL_GPIO_Init+0x31c>)
 8006272:	4293      	cmp	r3, r2
 8006274:	d01f      	beq.n	80062b6 <HAL_GPIO_Init+0x21e>
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	4a4f      	ldr	r2, [pc, #316]	; (80063b8 <HAL_GPIO_Init+0x320>)
 800627a:	4293      	cmp	r3, r2
 800627c:	d019      	beq.n	80062b2 <HAL_GPIO_Init+0x21a>
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	4a4e      	ldr	r2, [pc, #312]	; (80063bc <HAL_GPIO_Init+0x324>)
 8006282:	4293      	cmp	r3, r2
 8006284:	d013      	beq.n	80062ae <HAL_GPIO_Init+0x216>
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	4a4d      	ldr	r2, [pc, #308]	; (80063c0 <HAL_GPIO_Init+0x328>)
 800628a:	4293      	cmp	r3, r2
 800628c:	d00d      	beq.n	80062aa <HAL_GPIO_Init+0x212>
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	4a4c      	ldr	r2, [pc, #304]	; (80063c4 <HAL_GPIO_Init+0x32c>)
 8006292:	4293      	cmp	r3, r2
 8006294:	d007      	beq.n	80062a6 <HAL_GPIO_Init+0x20e>
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	4a4b      	ldr	r2, [pc, #300]	; (80063c8 <HAL_GPIO_Init+0x330>)
 800629a:	4293      	cmp	r3, r2
 800629c:	d101      	bne.n	80062a2 <HAL_GPIO_Init+0x20a>
 800629e:	2307      	movs	r3, #7
 80062a0:	e00e      	b.n	80062c0 <HAL_GPIO_Init+0x228>
 80062a2:	2308      	movs	r3, #8
 80062a4:	e00c      	b.n	80062c0 <HAL_GPIO_Init+0x228>
 80062a6:	2306      	movs	r3, #6
 80062a8:	e00a      	b.n	80062c0 <HAL_GPIO_Init+0x228>
 80062aa:	2305      	movs	r3, #5
 80062ac:	e008      	b.n	80062c0 <HAL_GPIO_Init+0x228>
 80062ae:	2304      	movs	r3, #4
 80062b0:	e006      	b.n	80062c0 <HAL_GPIO_Init+0x228>
 80062b2:	2303      	movs	r3, #3
 80062b4:	e004      	b.n	80062c0 <HAL_GPIO_Init+0x228>
 80062b6:	2302      	movs	r3, #2
 80062b8:	e002      	b.n	80062c0 <HAL_GPIO_Init+0x228>
 80062ba:	2301      	movs	r3, #1
 80062bc:	e000      	b.n	80062c0 <HAL_GPIO_Init+0x228>
 80062be:	2300      	movs	r3, #0
 80062c0:	69fa      	ldr	r2, [r7, #28]
 80062c2:	f002 0203 	and.w	r2, r2, #3
 80062c6:	0092      	lsls	r2, r2, #2
 80062c8:	4093      	lsls	r3, r2
 80062ca:	69ba      	ldr	r2, [r7, #24]
 80062cc:	4313      	orrs	r3, r2
 80062ce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80062d0:	4935      	ldr	r1, [pc, #212]	; (80063a8 <HAL_GPIO_Init+0x310>)
 80062d2:	69fb      	ldr	r3, [r7, #28]
 80062d4:	089b      	lsrs	r3, r3, #2
 80062d6:	3302      	adds	r3, #2
 80062d8:	69ba      	ldr	r2, [r7, #24]
 80062da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80062de:	4b3b      	ldr	r3, [pc, #236]	; (80063cc <HAL_GPIO_Init+0x334>)
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80062e4:	693b      	ldr	r3, [r7, #16]
 80062e6:	43db      	mvns	r3, r3
 80062e8:	69ba      	ldr	r2, [r7, #24]
 80062ea:	4013      	ands	r3, r2
 80062ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80062ee:	683b      	ldr	r3, [r7, #0]
 80062f0:	685b      	ldr	r3, [r3, #4]
 80062f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d003      	beq.n	8006302 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80062fa:	69ba      	ldr	r2, [r7, #24]
 80062fc:	693b      	ldr	r3, [r7, #16]
 80062fe:	4313      	orrs	r3, r2
 8006300:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006302:	4a32      	ldr	r2, [pc, #200]	; (80063cc <HAL_GPIO_Init+0x334>)
 8006304:	69bb      	ldr	r3, [r7, #24]
 8006306:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8006308:	4b30      	ldr	r3, [pc, #192]	; (80063cc <HAL_GPIO_Init+0x334>)
 800630a:	685b      	ldr	r3, [r3, #4]
 800630c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800630e:	693b      	ldr	r3, [r7, #16]
 8006310:	43db      	mvns	r3, r3
 8006312:	69ba      	ldr	r2, [r7, #24]
 8006314:	4013      	ands	r3, r2
 8006316:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006318:	683b      	ldr	r3, [r7, #0]
 800631a:	685b      	ldr	r3, [r3, #4]
 800631c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006320:	2b00      	cmp	r3, #0
 8006322:	d003      	beq.n	800632c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8006324:	69ba      	ldr	r2, [r7, #24]
 8006326:	693b      	ldr	r3, [r7, #16]
 8006328:	4313      	orrs	r3, r2
 800632a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800632c:	4a27      	ldr	r2, [pc, #156]	; (80063cc <HAL_GPIO_Init+0x334>)
 800632e:	69bb      	ldr	r3, [r7, #24]
 8006330:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006332:	4b26      	ldr	r3, [pc, #152]	; (80063cc <HAL_GPIO_Init+0x334>)
 8006334:	689b      	ldr	r3, [r3, #8]
 8006336:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006338:	693b      	ldr	r3, [r7, #16]
 800633a:	43db      	mvns	r3, r3
 800633c:	69ba      	ldr	r2, [r7, #24]
 800633e:	4013      	ands	r3, r2
 8006340:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006342:	683b      	ldr	r3, [r7, #0]
 8006344:	685b      	ldr	r3, [r3, #4]
 8006346:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800634a:	2b00      	cmp	r3, #0
 800634c:	d003      	beq.n	8006356 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800634e:	69ba      	ldr	r2, [r7, #24]
 8006350:	693b      	ldr	r3, [r7, #16]
 8006352:	4313      	orrs	r3, r2
 8006354:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006356:	4a1d      	ldr	r2, [pc, #116]	; (80063cc <HAL_GPIO_Init+0x334>)
 8006358:	69bb      	ldr	r3, [r7, #24]
 800635a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800635c:	4b1b      	ldr	r3, [pc, #108]	; (80063cc <HAL_GPIO_Init+0x334>)
 800635e:	68db      	ldr	r3, [r3, #12]
 8006360:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006362:	693b      	ldr	r3, [r7, #16]
 8006364:	43db      	mvns	r3, r3
 8006366:	69ba      	ldr	r2, [r7, #24]
 8006368:	4013      	ands	r3, r2
 800636a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800636c:	683b      	ldr	r3, [r7, #0]
 800636e:	685b      	ldr	r3, [r3, #4]
 8006370:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006374:	2b00      	cmp	r3, #0
 8006376:	d003      	beq.n	8006380 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8006378:	69ba      	ldr	r2, [r7, #24]
 800637a:	693b      	ldr	r3, [r7, #16]
 800637c:	4313      	orrs	r3, r2
 800637e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006380:	4a12      	ldr	r2, [pc, #72]	; (80063cc <HAL_GPIO_Init+0x334>)
 8006382:	69bb      	ldr	r3, [r7, #24]
 8006384:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006386:	69fb      	ldr	r3, [r7, #28]
 8006388:	3301      	adds	r3, #1
 800638a:	61fb      	str	r3, [r7, #28]
 800638c:	69fb      	ldr	r3, [r7, #28]
 800638e:	2b0f      	cmp	r3, #15
 8006390:	f67f ae90 	bls.w	80060b4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006394:	bf00      	nop
 8006396:	bf00      	nop
 8006398:	3724      	adds	r7, #36	; 0x24
 800639a:	46bd      	mov	sp, r7
 800639c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a0:	4770      	bx	lr
 80063a2:	bf00      	nop
 80063a4:	40023800 	.word	0x40023800
 80063a8:	40013800 	.word	0x40013800
 80063ac:	40020000 	.word	0x40020000
 80063b0:	40020400 	.word	0x40020400
 80063b4:	40020800 	.word	0x40020800
 80063b8:	40020c00 	.word	0x40020c00
 80063bc:	40021000 	.word	0x40021000
 80063c0:	40021400 	.word	0x40021400
 80063c4:	40021800 	.word	0x40021800
 80063c8:	40021c00 	.word	0x40021c00
 80063cc:	40013c00 	.word	0x40013c00

080063d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80063d0:	b480      	push	{r7}
 80063d2:	b083      	sub	sp, #12
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
 80063d8:	460b      	mov	r3, r1
 80063da:	807b      	strh	r3, [r7, #2]
 80063dc:	4613      	mov	r3, r2
 80063de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80063e0:	787b      	ldrb	r3, [r7, #1]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d003      	beq.n	80063ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80063e6:	887a      	ldrh	r2, [r7, #2]
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80063ec:	e003      	b.n	80063f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80063ee:	887b      	ldrh	r3, [r7, #2]
 80063f0:	041a      	lsls	r2, r3, #16
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	619a      	str	r2, [r3, #24]
}
 80063f6:	bf00      	nop
 80063f8:	370c      	adds	r7, #12
 80063fa:	46bd      	mov	sp, r7
 80063fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006400:	4770      	bx	lr

08006402 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006402:	b480      	push	{r7}
 8006404:	b085      	sub	sp, #20
 8006406:	af00      	add	r7, sp, #0
 8006408:	6078      	str	r0, [r7, #4]
 800640a:	460b      	mov	r3, r1
 800640c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	695b      	ldr	r3, [r3, #20]
 8006412:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006414:	887a      	ldrh	r2, [r7, #2]
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	4013      	ands	r3, r2
 800641a:	041a      	lsls	r2, r3, #16
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	43d9      	mvns	r1, r3
 8006420:	887b      	ldrh	r3, [r7, #2]
 8006422:	400b      	ands	r3, r1
 8006424:	431a      	orrs	r2, r3
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	619a      	str	r2, [r3, #24]
}
 800642a:	bf00      	nop
 800642c:	3714      	adds	r7, #20
 800642e:	46bd      	mov	sp, r7
 8006430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006434:	4770      	bx	lr
	...

08006438 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006438:	b580      	push	{r7, lr}
 800643a:	b086      	sub	sp, #24
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d101      	bne.n	800644a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006446:	2301      	movs	r3, #1
 8006448:	e264      	b.n	8006914 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f003 0301 	and.w	r3, r3, #1
 8006452:	2b00      	cmp	r3, #0
 8006454:	d075      	beq.n	8006542 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006456:	4ba3      	ldr	r3, [pc, #652]	; (80066e4 <HAL_RCC_OscConfig+0x2ac>)
 8006458:	689b      	ldr	r3, [r3, #8]
 800645a:	f003 030c 	and.w	r3, r3, #12
 800645e:	2b04      	cmp	r3, #4
 8006460:	d00c      	beq.n	800647c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006462:	4ba0      	ldr	r3, [pc, #640]	; (80066e4 <HAL_RCC_OscConfig+0x2ac>)
 8006464:	689b      	ldr	r3, [r3, #8]
 8006466:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800646a:	2b08      	cmp	r3, #8
 800646c:	d112      	bne.n	8006494 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800646e:	4b9d      	ldr	r3, [pc, #628]	; (80066e4 <HAL_RCC_OscConfig+0x2ac>)
 8006470:	685b      	ldr	r3, [r3, #4]
 8006472:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006476:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800647a:	d10b      	bne.n	8006494 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800647c:	4b99      	ldr	r3, [pc, #612]	; (80066e4 <HAL_RCC_OscConfig+0x2ac>)
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006484:	2b00      	cmp	r3, #0
 8006486:	d05b      	beq.n	8006540 <HAL_RCC_OscConfig+0x108>
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	685b      	ldr	r3, [r3, #4]
 800648c:	2b00      	cmp	r3, #0
 800648e:	d157      	bne.n	8006540 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006490:	2301      	movs	r3, #1
 8006492:	e23f      	b.n	8006914 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	685b      	ldr	r3, [r3, #4]
 8006498:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800649c:	d106      	bne.n	80064ac <HAL_RCC_OscConfig+0x74>
 800649e:	4b91      	ldr	r3, [pc, #580]	; (80066e4 <HAL_RCC_OscConfig+0x2ac>)
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	4a90      	ldr	r2, [pc, #576]	; (80066e4 <HAL_RCC_OscConfig+0x2ac>)
 80064a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80064a8:	6013      	str	r3, [r2, #0]
 80064aa:	e01d      	b.n	80064e8 <HAL_RCC_OscConfig+0xb0>
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	685b      	ldr	r3, [r3, #4]
 80064b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80064b4:	d10c      	bne.n	80064d0 <HAL_RCC_OscConfig+0x98>
 80064b6:	4b8b      	ldr	r3, [pc, #556]	; (80066e4 <HAL_RCC_OscConfig+0x2ac>)
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	4a8a      	ldr	r2, [pc, #552]	; (80066e4 <HAL_RCC_OscConfig+0x2ac>)
 80064bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80064c0:	6013      	str	r3, [r2, #0]
 80064c2:	4b88      	ldr	r3, [pc, #544]	; (80066e4 <HAL_RCC_OscConfig+0x2ac>)
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	4a87      	ldr	r2, [pc, #540]	; (80066e4 <HAL_RCC_OscConfig+0x2ac>)
 80064c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80064cc:	6013      	str	r3, [r2, #0]
 80064ce:	e00b      	b.n	80064e8 <HAL_RCC_OscConfig+0xb0>
 80064d0:	4b84      	ldr	r3, [pc, #528]	; (80066e4 <HAL_RCC_OscConfig+0x2ac>)
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	4a83      	ldr	r2, [pc, #524]	; (80066e4 <HAL_RCC_OscConfig+0x2ac>)
 80064d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80064da:	6013      	str	r3, [r2, #0]
 80064dc:	4b81      	ldr	r3, [pc, #516]	; (80066e4 <HAL_RCC_OscConfig+0x2ac>)
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	4a80      	ldr	r2, [pc, #512]	; (80066e4 <HAL_RCC_OscConfig+0x2ac>)
 80064e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80064e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	685b      	ldr	r3, [r3, #4]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d013      	beq.n	8006518 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80064f0:	f7fe fe2c 	bl	800514c <HAL_GetTick>
 80064f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80064f6:	e008      	b.n	800650a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80064f8:	f7fe fe28 	bl	800514c <HAL_GetTick>
 80064fc:	4602      	mov	r2, r0
 80064fe:	693b      	ldr	r3, [r7, #16]
 8006500:	1ad3      	subs	r3, r2, r3
 8006502:	2b64      	cmp	r3, #100	; 0x64
 8006504:	d901      	bls.n	800650a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006506:	2303      	movs	r3, #3
 8006508:	e204      	b.n	8006914 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800650a:	4b76      	ldr	r3, [pc, #472]	; (80066e4 <HAL_RCC_OscConfig+0x2ac>)
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006512:	2b00      	cmp	r3, #0
 8006514:	d0f0      	beq.n	80064f8 <HAL_RCC_OscConfig+0xc0>
 8006516:	e014      	b.n	8006542 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006518:	f7fe fe18 	bl	800514c <HAL_GetTick>
 800651c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800651e:	e008      	b.n	8006532 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006520:	f7fe fe14 	bl	800514c <HAL_GetTick>
 8006524:	4602      	mov	r2, r0
 8006526:	693b      	ldr	r3, [r7, #16]
 8006528:	1ad3      	subs	r3, r2, r3
 800652a:	2b64      	cmp	r3, #100	; 0x64
 800652c:	d901      	bls.n	8006532 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800652e:	2303      	movs	r3, #3
 8006530:	e1f0      	b.n	8006914 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006532:	4b6c      	ldr	r3, [pc, #432]	; (80066e4 <HAL_RCC_OscConfig+0x2ac>)
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800653a:	2b00      	cmp	r3, #0
 800653c:	d1f0      	bne.n	8006520 <HAL_RCC_OscConfig+0xe8>
 800653e:	e000      	b.n	8006542 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006540:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f003 0302 	and.w	r3, r3, #2
 800654a:	2b00      	cmp	r3, #0
 800654c:	d063      	beq.n	8006616 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800654e:	4b65      	ldr	r3, [pc, #404]	; (80066e4 <HAL_RCC_OscConfig+0x2ac>)
 8006550:	689b      	ldr	r3, [r3, #8]
 8006552:	f003 030c 	and.w	r3, r3, #12
 8006556:	2b00      	cmp	r3, #0
 8006558:	d00b      	beq.n	8006572 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800655a:	4b62      	ldr	r3, [pc, #392]	; (80066e4 <HAL_RCC_OscConfig+0x2ac>)
 800655c:	689b      	ldr	r3, [r3, #8]
 800655e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006562:	2b08      	cmp	r3, #8
 8006564:	d11c      	bne.n	80065a0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006566:	4b5f      	ldr	r3, [pc, #380]	; (80066e4 <HAL_RCC_OscConfig+0x2ac>)
 8006568:	685b      	ldr	r3, [r3, #4]
 800656a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800656e:	2b00      	cmp	r3, #0
 8006570:	d116      	bne.n	80065a0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006572:	4b5c      	ldr	r3, [pc, #368]	; (80066e4 <HAL_RCC_OscConfig+0x2ac>)
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	f003 0302 	and.w	r3, r3, #2
 800657a:	2b00      	cmp	r3, #0
 800657c:	d005      	beq.n	800658a <HAL_RCC_OscConfig+0x152>
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	68db      	ldr	r3, [r3, #12]
 8006582:	2b01      	cmp	r3, #1
 8006584:	d001      	beq.n	800658a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006586:	2301      	movs	r3, #1
 8006588:	e1c4      	b.n	8006914 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800658a:	4b56      	ldr	r3, [pc, #344]	; (80066e4 <HAL_RCC_OscConfig+0x2ac>)
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	691b      	ldr	r3, [r3, #16]
 8006596:	00db      	lsls	r3, r3, #3
 8006598:	4952      	ldr	r1, [pc, #328]	; (80066e4 <HAL_RCC_OscConfig+0x2ac>)
 800659a:	4313      	orrs	r3, r2
 800659c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800659e:	e03a      	b.n	8006616 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	68db      	ldr	r3, [r3, #12]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d020      	beq.n	80065ea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80065a8:	4b4f      	ldr	r3, [pc, #316]	; (80066e8 <HAL_RCC_OscConfig+0x2b0>)
 80065aa:	2201      	movs	r2, #1
 80065ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065ae:	f7fe fdcd 	bl	800514c <HAL_GetTick>
 80065b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80065b4:	e008      	b.n	80065c8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80065b6:	f7fe fdc9 	bl	800514c <HAL_GetTick>
 80065ba:	4602      	mov	r2, r0
 80065bc:	693b      	ldr	r3, [r7, #16]
 80065be:	1ad3      	subs	r3, r2, r3
 80065c0:	2b02      	cmp	r3, #2
 80065c2:	d901      	bls.n	80065c8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80065c4:	2303      	movs	r3, #3
 80065c6:	e1a5      	b.n	8006914 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80065c8:	4b46      	ldr	r3, [pc, #280]	; (80066e4 <HAL_RCC_OscConfig+0x2ac>)
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	f003 0302 	and.w	r3, r3, #2
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d0f0      	beq.n	80065b6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80065d4:	4b43      	ldr	r3, [pc, #268]	; (80066e4 <HAL_RCC_OscConfig+0x2ac>)
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	691b      	ldr	r3, [r3, #16]
 80065e0:	00db      	lsls	r3, r3, #3
 80065e2:	4940      	ldr	r1, [pc, #256]	; (80066e4 <HAL_RCC_OscConfig+0x2ac>)
 80065e4:	4313      	orrs	r3, r2
 80065e6:	600b      	str	r3, [r1, #0]
 80065e8:	e015      	b.n	8006616 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80065ea:	4b3f      	ldr	r3, [pc, #252]	; (80066e8 <HAL_RCC_OscConfig+0x2b0>)
 80065ec:	2200      	movs	r2, #0
 80065ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065f0:	f7fe fdac 	bl	800514c <HAL_GetTick>
 80065f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80065f6:	e008      	b.n	800660a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80065f8:	f7fe fda8 	bl	800514c <HAL_GetTick>
 80065fc:	4602      	mov	r2, r0
 80065fe:	693b      	ldr	r3, [r7, #16]
 8006600:	1ad3      	subs	r3, r2, r3
 8006602:	2b02      	cmp	r3, #2
 8006604:	d901      	bls.n	800660a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006606:	2303      	movs	r3, #3
 8006608:	e184      	b.n	8006914 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800660a:	4b36      	ldr	r3, [pc, #216]	; (80066e4 <HAL_RCC_OscConfig+0x2ac>)
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	f003 0302 	and.w	r3, r3, #2
 8006612:	2b00      	cmp	r3, #0
 8006614:	d1f0      	bne.n	80065f8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	f003 0308 	and.w	r3, r3, #8
 800661e:	2b00      	cmp	r3, #0
 8006620:	d030      	beq.n	8006684 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	695b      	ldr	r3, [r3, #20]
 8006626:	2b00      	cmp	r3, #0
 8006628:	d016      	beq.n	8006658 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800662a:	4b30      	ldr	r3, [pc, #192]	; (80066ec <HAL_RCC_OscConfig+0x2b4>)
 800662c:	2201      	movs	r2, #1
 800662e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006630:	f7fe fd8c 	bl	800514c <HAL_GetTick>
 8006634:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006636:	e008      	b.n	800664a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006638:	f7fe fd88 	bl	800514c <HAL_GetTick>
 800663c:	4602      	mov	r2, r0
 800663e:	693b      	ldr	r3, [r7, #16]
 8006640:	1ad3      	subs	r3, r2, r3
 8006642:	2b02      	cmp	r3, #2
 8006644:	d901      	bls.n	800664a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006646:	2303      	movs	r3, #3
 8006648:	e164      	b.n	8006914 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800664a:	4b26      	ldr	r3, [pc, #152]	; (80066e4 <HAL_RCC_OscConfig+0x2ac>)
 800664c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800664e:	f003 0302 	and.w	r3, r3, #2
 8006652:	2b00      	cmp	r3, #0
 8006654:	d0f0      	beq.n	8006638 <HAL_RCC_OscConfig+0x200>
 8006656:	e015      	b.n	8006684 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006658:	4b24      	ldr	r3, [pc, #144]	; (80066ec <HAL_RCC_OscConfig+0x2b4>)
 800665a:	2200      	movs	r2, #0
 800665c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800665e:	f7fe fd75 	bl	800514c <HAL_GetTick>
 8006662:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006664:	e008      	b.n	8006678 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006666:	f7fe fd71 	bl	800514c <HAL_GetTick>
 800666a:	4602      	mov	r2, r0
 800666c:	693b      	ldr	r3, [r7, #16]
 800666e:	1ad3      	subs	r3, r2, r3
 8006670:	2b02      	cmp	r3, #2
 8006672:	d901      	bls.n	8006678 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006674:	2303      	movs	r3, #3
 8006676:	e14d      	b.n	8006914 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006678:	4b1a      	ldr	r3, [pc, #104]	; (80066e4 <HAL_RCC_OscConfig+0x2ac>)
 800667a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800667c:	f003 0302 	and.w	r3, r3, #2
 8006680:	2b00      	cmp	r3, #0
 8006682:	d1f0      	bne.n	8006666 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f003 0304 	and.w	r3, r3, #4
 800668c:	2b00      	cmp	r3, #0
 800668e:	f000 80a0 	beq.w	80067d2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006692:	2300      	movs	r3, #0
 8006694:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006696:	4b13      	ldr	r3, [pc, #76]	; (80066e4 <HAL_RCC_OscConfig+0x2ac>)
 8006698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800669a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d10f      	bne.n	80066c2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80066a2:	2300      	movs	r3, #0
 80066a4:	60bb      	str	r3, [r7, #8]
 80066a6:	4b0f      	ldr	r3, [pc, #60]	; (80066e4 <HAL_RCC_OscConfig+0x2ac>)
 80066a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066aa:	4a0e      	ldr	r2, [pc, #56]	; (80066e4 <HAL_RCC_OscConfig+0x2ac>)
 80066ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80066b0:	6413      	str	r3, [r2, #64]	; 0x40
 80066b2:	4b0c      	ldr	r3, [pc, #48]	; (80066e4 <HAL_RCC_OscConfig+0x2ac>)
 80066b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80066ba:	60bb      	str	r3, [r7, #8]
 80066bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80066be:	2301      	movs	r3, #1
 80066c0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80066c2:	4b0b      	ldr	r3, [pc, #44]	; (80066f0 <HAL_RCC_OscConfig+0x2b8>)
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d121      	bne.n	8006712 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80066ce:	4b08      	ldr	r3, [pc, #32]	; (80066f0 <HAL_RCC_OscConfig+0x2b8>)
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	4a07      	ldr	r2, [pc, #28]	; (80066f0 <HAL_RCC_OscConfig+0x2b8>)
 80066d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80066d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80066da:	f7fe fd37 	bl	800514c <HAL_GetTick>
 80066de:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80066e0:	e011      	b.n	8006706 <HAL_RCC_OscConfig+0x2ce>
 80066e2:	bf00      	nop
 80066e4:	40023800 	.word	0x40023800
 80066e8:	42470000 	.word	0x42470000
 80066ec:	42470e80 	.word	0x42470e80
 80066f0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80066f4:	f7fe fd2a 	bl	800514c <HAL_GetTick>
 80066f8:	4602      	mov	r2, r0
 80066fa:	693b      	ldr	r3, [r7, #16]
 80066fc:	1ad3      	subs	r3, r2, r3
 80066fe:	2b02      	cmp	r3, #2
 8006700:	d901      	bls.n	8006706 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8006702:	2303      	movs	r3, #3
 8006704:	e106      	b.n	8006914 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006706:	4b85      	ldr	r3, [pc, #532]	; (800691c <HAL_RCC_OscConfig+0x4e4>)
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800670e:	2b00      	cmp	r3, #0
 8006710:	d0f0      	beq.n	80066f4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	689b      	ldr	r3, [r3, #8]
 8006716:	2b01      	cmp	r3, #1
 8006718:	d106      	bne.n	8006728 <HAL_RCC_OscConfig+0x2f0>
 800671a:	4b81      	ldr	r3, [pc, #516]	; (8006920 <HAL_RCC_OscConfig+0x4e8>)
 800671c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800671e:	4a80      	ldr	r2, [pc, #512]	; (8006920 <HAL_RCC_OscConfig+0x4e8>)
 8006720:	f043 0301 	orr.w	r3, r3, #1
 8006724:	6713      	str	r3, [r2, #112]	; 0x70
 8006726:	e01c      	b.n	8006762 <HAL_RCC_OscConfig+0x32a>
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	689b      	ldr	r3, [r3, #8]
 800672c:	2b05      	cmp	r3, #5
 800672e:	d10c      	bne.n	800674a <HAL_RCC_OscConfig+0x312>
 8006730:	4b7b      	ldr	r3, [pc, #492]	; (8006920 <HAL_RCC_OscConfig+0x4e8>)
 8006732:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006734:	4a7a      	ldr	r2, [pc, #488]	; (8006920 <HAL_RCC_OscConfig+0x4e8>)
 8006736:	f043 0304 	orr.w	r3, r3, #4
 800673a:	6713      	str	r3, [r2, #112]	; 0x70
 800673c:	4b78      	ldr	r3, [pc, #480]	; (8006920 <HAL_RCC_OscConfig+0x4e8>)
 800673e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006740:	4a77      	ldr	r2, [pc, #476]	; (8006920 <HAL_RCC_OscConfig+0x4e8>)
 8006742:	f043 0301 	orr.w	r3, r3, #1
 8006746:	6713      	str	r3, [r2, #112]	; 0x70
 8006748:	e00b      	b.n	8006762 <HAL_RCC_OscConfig+0x32a>
 800674a:	4b75      	ldr	r3, [pc, #468]	; (8006920 <HAL_RCC_OscConfig+0x4e8>)
 800674c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800674e:	4a74      	ldr	r2, [pc, #464]	; (8006920 <HAL_RCC_OscConfig+0x4e8>)
 8006750:	f023 0301 	bic.w	r3, r3, #1
 8006754:	6713      	str	r3, [r2, #112]	; 0x70
 8006756:	4b72      	ldr	r3, [pc, #456]	; (8006920 <HAL_RCC_OscConfig+0x4e8>)
 8006758:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800675a:	4a71      	ldr	r2, [pc, #452]	; (8006920 <HAL_RCC_OscConfig+0x4e8>)
 800675c:	f023 0304 	bic.w	r3, r3, #4
 8006760:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	689b      	ldr	r3, [r3, #8]
 8006766:	2b00      	cmp	r3, #0
 8006768:	d015      	beq.n	8006796 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800676a:	f7fe fcef 	bl	800514c <HAL_GetTick>
 800676e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006770:	e00a      	b.n	8006788 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006772:	f7fe fceb 	bl	800514c <HAL_GetTick>
 8006776:	4602      	mov	r2, r0
 8006778:	693b      	ldr	r3, [r7, #16]
 800677a:	1ad3      	subs	r3, r2, r3
 800677c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006780:	4293      	cmp	r3, r2
 8006782:	d901      	bls.n	8006788 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8006784:	2303      	movs	r3, #3
 8006786:	e0c5      	b.n	8006914 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006788:	4b65      	ldr	r3, [pc, #404]	; (8006920 <HAL_RCC_OscConfig+0x4e8>)
 800678a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800678c:	f003 0302 	and.w	r3, r3, #2
 8006790:	2b00      	cmp	r3, #0
 8006792:	d0ee      	beq.n	8006772 <HAL_RCC_OscConfig+0x33a>
 8006794:	e014      	b.n	80067c0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006796:	f7fe fcd9 	bl	800514c <HAL_GetTick>
 800679a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800679c:	e00a      	b.n	80067b4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800679e:	f7fe fcd5 	bl	800514c <HAL_GetTick>
 80067a2:	4602      	mov	r2, r0
 80067a4:	693b      	ldr	r3, [r7, #16]
 80067a6:	1ad3      	subs	r3, r2, r3
 80067a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80067ac:	4293      	cmp	r3, r2
 80067ae:	d901      	bls.n	80067b4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80067b0:	2303      	movs	r3, #3
 80067b2:	e0af      	b.n	8006914 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80067b4:	4b5a      	ldr	r3, [pc, #360]	; (8006920 <HAL_RCC_OscConfig+0x4e8>)
 80067b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067b8:	f003 0302 	and.w	r3, r3, #2
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d1ee      	bne.n	800679e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80067c0:	7dfb      	ldrb	r3, [r7, #23]
 80067c2:	2b01      	cmp	r3, #1
 80067c4:	d105      	bne.n	80067d2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80067c6:	4b56      	ldr	r3, [pc, #344]	; (8006920 <HAL_RCC_OscConfig+0x4e8>)
 80067c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067ca:	4a55      	ldr	r2, [pc, #340]	; (8006920 <HAL_RCC_OscConfig+0x4e8>)
 80067cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80067d0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	699b      	ldr	r3, [r3, #24]
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	f000 809b 	beq.w	8006912 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80067dc:	4b50      	ldr	r3, [pc, #320]	; (8006920 <HAL_RCC_OscConfig+0x4e8>)
 80067de:	689b      	ldr	r3, [r3, #8]
 80067e0:	f003 030c 	and.w	r3, r3, #12
 80067e4:	2b08      	cmp	r3, #8
 80067e6:	d05c      	beq.n	80068a2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	699b      	ldr	r3, [r3, #24]
 80067ec:	2b02      	cmp	r3, #2
 80067ee:	d141      	bne.n	8006874 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80067f0:	4b4c      	ldr	r3, [pc, #304]	; (8006924 <HAL_RCC_OscConfig+0x4ec>)
 80067f2:	2200      	movs	r2, #0
 80067f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80067f6:	f7fe fca9 	bl	800514c <HAL_GetTick>
 80067fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80067fc:	e008      	b.n	8006810 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80067fe:	f7fe fca5 	bl	800514c <HAL_GetTick>
 8006802:	4602      	mov	r2, r0
 8006804:	693b      	ldr	r3, [r7, #16]
 8006806:	1ad3      	subs	r3, r2, r3
 8006808:	2b02      	cmp	r3, #2
 800680a:	d901      	bls.n	8006810 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800680c:	2303      	movs	r3, #3
 800680e:	e081      	b.n	8006914 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006810:	4b43      	ldr	r3, [pc, #268]	; (8006920 <HAL_RCC_OscConfig+0x4e8>)
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006818:	2b00      	cmp	r3, #0
 800681a:	d1f0      	bne.n	80067fe <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	69da      	ldr	r2, [r3, #28]
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	6a1b      	ldr	r3, [r3, #32]
 8006824:	431a      	orrs	r2, r3
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800682a:	019b      	lsls	r3, r3, #6
 800682c:	431a      	orrs	r2, r3
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006832:	085b      	lsrs	r3, r3, #1
 8006834:	3b01      	subs	r3, #1
 8006836:	041b      	lsls	r3, r3, #16
 8006838:	431a      	orrs	r2, r3
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800683e:	061b      	lsls	r3, r3, #24
 8006840:	4937      	ldr	r1, [pc, #220]	; (8006920 <HAL_RCC_OscConfig+0x4e8>)
 8006842:	4313      	orrs	r3, r2
 8006844:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006846:	4b37      	ldr	r3, [pc, #220]	; (8006924 <HAL_RCC_OscConfig+0x4ec>)
 8006848:	2201      	movs	r2, #1
 800684a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800684c:	f7fe fc7e 	bl	800514c <HAL_GetTick>
 8006850:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006852:	e008      	b.n	8006866 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006854:	f7fe fc7a 	bl	800514c <HAL_GetTick>
 8006858:	4602      	mov	r2, r0
 800685a:	693b      	ldr	r3, [r7, #16]
 800685c:	1ad3      	subs	r3, r2, r3
 800685e:	2b02      	cmp	r3, #2
 8006860:	d901      	bls.n	8006866 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8006862:	2303      	movs	r3, #3
 8006864:	e056      	b.n	8006914 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006866:	4b2e      	ldr	r3, [pc, #184]	; (8006920 <HAL_RCC_OscConfig+0x4e8>)
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800686e:	2b00      	cmp	r3, #0
 8006870:	d0f0      	beq.n	8006854 <HAL_RCC_OscConfig+0x41c>
 8006872:	e04e      	b.n	8006912 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006874:	4b2b      	ldr	r3, [pc, #172]	; (8006924 <HAL_RCC_OscConfig+0x4ec>)
 8006876:	2200      	movs	r2, #0
 8006878:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800687a:	f7fe fc67 	bl	800514c <HAL_GetTick>
 800687e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006880:	e008      	b.n	8006894 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006882:	f7fe fc63 	bl	800514c <HAL_GetTick>
 8006886:	4602      	mov	r2, r0
 8006888:	693b      	ldr	r3, [r7, #16]
 800688a:	1ad3      	subs	r3, r2, r3
 800688c:	2b02      	cmp	r3, #2
 800688e:	d901      	bls.n	8006894 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8006890:	2303      	movs	r3, #3
 8006892:	e03f      	b.n	8006914 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006894:	4b22      	ldr	r3, [pc, #136]	; (8006920 <HAL_RCC_OscConfig+0x4e8>)
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800689c:	2b00      	cmp	r3, #0
 800689e:	d1f0      	bne.n	8006882 <HAL_RCC_OscConfig+0x44a>
 80068a0:	e037      	b.n	8006912 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	699b      	ldr	r3, [r3, #24]
 80068a6:	2b01      	cmp	r3, #1
 80068a8:	d101      	bne.n	80068ae <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80068aa:	2301      	movs	r3, #1
 80068ac:	e032      	b.n	8006914 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80068ae:	4b1c      	ldr	r3, [pc, #112]	; (8006920 <HAL_RCC_OscConfig+0x4e8>)
 80068b0:	685b      	ldr	r3, [r3, #4]
 80068b2:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	699b      	ldr	r3, [r3, #24]
 80068b8:	2b01      	cmp	r3, #1
 80068ba:	d028      	beq.n	800690e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80068c6:	429a      	cmp	r2, r3
 80068c8:	d121      	bne.n	800690e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80068d4:	429a      	cmp	r2, r3
 80068d6:	d11a      	bne.n	800690e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80068d8:	68fa      	ldr	r2, [r7, #12]
 80068da:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80068de:	4013      	ands	r3, r2
 80068e0:	687a      	ldr	r2, [r7, #4]
 80068e2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80068e4:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80068e6:	4293      	cmp	r3, r2
 80068e8:	d111      	bne.n	800690e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068f4:	085b      	lsrs	r3, r3, #1
 80068f6:	3b01      	subs	r3, #1
 80068f8:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80068fa:	429a      	cmp	r2, r3
 80068fc:	d107      	bne.n	800690e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006908:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800690a:	429a      	cmp	r2, r3
 800690c:	d001      	beq.n	8006912 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800690e:	2301      	movs	r3, #1
 8006910:	e000      	b.n	8006914 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8006912:	2300      	movs	r3, #0
}
 8006914:	4618      	mov	r0, r3
 8006916:	3718      	adds	r7, #24
 8006918:	46bd      	mov	sp, r7
 800691a:	bd80      	pop	{r7, pc}
 800691c:	40007000 	.word	0x40007000
 8006920:	40023800 	.word	0x40023800
 8006924:	42470060 	.word	0x42470060

08006928 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006928:	b580      	push	{r7, lr}
 800692a:	b084      	sub	sp, #16
 800692c:	af00      	add	r7, sp, #0
 800692e:	6078      	str	r0, [r7, #4]
 8006930:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	2b00      	cmp	r3, #0
 8006936:	d101      	bne.n	800693c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006938:	2301      	movs	r3, #1
 800693a:	e0cc      	b.n	8006ad6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800693c:	4b68      	ldr	r3, [pc, #416]	; (8006ae0 <HAL_RCC_ClockConfig+0x1b8>)
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	f003 0307 	and.w	r3, r3, #7
 8006944:	683a      	ldr	r2, [r7, #0]
 8006946:	429a      	cmp	r2, r3
 8006948:	d90c      	bls.n	8006964 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800694a:	4b65      	ldr	r3, [pc, #404]	; (8006ae0 <HAL_RCC_ClockConfig+0x1b8>)
 800694c:	683a      	ldr	r2, [r7, #0]
 800694e:	b2d2      	uxtb	r2, r2
 8006950:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006952:	4b63      	ldr	r3, [pc, #396]	; (8006ae0 <HAL_RCC_ClockConfig+0x1b8>)
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	f003 0307 	and.w	r3, r3, #7
 800695a:	683a      	ldr	r2, [r7, #0]
 800695c:	429a      	cmp	r2, r3
 800695e:	d001      	beq.n	8006964 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006960:	2301      	movs	r3, #1
 8006962:	e0b8      	b.n	8006ad6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	f003 0302 	and.w	r3, r3, #2
 800696c:	2b00      	cmp	r3, #0
 800696e:	d020      	beq.n	80069b2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	f003 0304 	and.w	r3, r3, #4
 8006978:	2b00      	cmp	r3, #0
 800697a:	d005      	beq.n	8006988 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800697c:	4b59      	ldr	r3, [pc, #356]	; (8006ae4 <HAL_RCC_ClockConfig+0x1bc>)
 800697e:	689b      	ldr	r3, [r3, #8]
 8006980:	4a58      	ldr	r2, [pc, #352]	; (8006ae4 <HAL_RCC_ClockConfig+0x1bc>)
 8006982:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006986:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	f003 0308 	and.w	r3, r3, #8
 8006990:	2b00      	cmp	r3, #0
 8006992:	d005      	beq.n	80069a0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006994:	4b53      	ldr	r3, [pc, #332]	; (8006ae4 <HAL_RCC_ClockConfig+0x1bc>)
 8006996:	689b      	ldr	r3, [r3, #8]
 8006998:	4a52      	ldr	r2, [pc, #328]	; (8006ae4 <HAL_RCC_ClockConfig+0x1bc>)
 800699a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800699e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80069a0:	4b50      	ldr	r3, [pc, #320]	; (8006ae4 <HAL_RCC_ClockConfig+0x1bc>)
 80069a2:	689b      	ldr	r3, [r3, #8]
 80069a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	689b      	ldr	r3, [r3, #8]
 80069ac:	494d      	ldr	r1, [pc, #308]	; (8006ae4 <HAL_RCC_ClockConfig+0x1bc>)
 80069ae:	4313      	orrs	r3, r2
 80069b0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	f003 0301 	and.w	r3, r3, #1
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d044      	beq.n	8006a48 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	685b      	ldr	r3, [r3, #4]
 80069c2:	2b01      	cmp	r3, #1
 80069c4:	d107      	bne.n	80069d6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80069c6:	4b47      	ldr	r3, [pc, #284]	; (8006ae4 <HAL_RCC_ClockConfig+0x1bc>)
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d119      	bne.n	8006a06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80069d2:	2301      	movs	r3, #1
 80069d4:	e07f      	b.n	8006ad6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	685b      	ldr	r3, [r3, #4]
 80069da:	2b02      	cmp	r3, #2
 80069dc:	d003      	beq.n	80069e6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80069e2:	2b03      	cmp	r3, #3
 80069e4:	d107      	bne.n	80069f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80069e6:	4b3f      	ldr	r3, [pc, #252]	; (8006ae4 <HAL_RCC_ClockConfig+0x1bc>)
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d109      	bne.n	8006a06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80069f2:	2301      	movs	r3, #1
 80069f4:	e06f      	b.n	8006ad6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80069f6:	4b3b      	ldr	r3, [pc, #236]	; (8006ae4 <HAL_RCC_ClockConfig+0x1bc>)
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	f003 0302 	and.w	r3, r3, #2
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d101      	bne.n	8006a06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006a02:	2301      	movs	r3, #1
 8006a04:	e067      	b.n	8006ad6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006a06:	4b37      	ldr	r3, [pc, #220]	; (8006ae4 <HAL_RCC_ClockConfig+0x1bc>)
 8006a08:	689b      	ldr	r3, [r3, #8]
 8006a0a:	f023 0203 	bic.w	r2, r3, #3
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	685b      	ldr	r3, [r3, #4]
 8006a12:	4934      	ldr	r1, [pc, #208]	; (8006ae4 <HAL_RCC_ClockConfig+0x1bc>)
 8006a14:	4313      	orrs	r3, r2
 8006a16:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006a18:	f7fe fb98 	bl	800514c <HAL_GetTick>
 8006a1c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006a1e:	e00a      	b.n	8006a36 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006a20:	f7fe fb94 	bl	800514c <HAL_GetTick>
 8006a24:	4602      	mov	r2, r0
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	1ad3      	subs	r3, r2, r3
 8006a2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a2e:	4293      	cmp	r3, r2
 8006a30:	d901      	bls.n	8006a36 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006a32:	2303      	movs	r3, #3
 8006a34:	e04f      	b.n	8006ad6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006a36:	4b2b      	ldr	r3, [pc, #172]	; (8006ae4 <HAL_RCC_ClockConfig+0x1bc>)
 8006a38:	689b      	ldr	r3, [r3, #8]
 8006a3a:	f003 020c 	and.w	r2, r3, #12
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	685b      	ldr	r3, [r3, #4]
 8006a42:	009b      	lsls	r3, r3, #2
 8006a44:	429a      	cmp	r2, r3
 8006a46:	d1eb      	bne.n	8006a20 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006a48:	4b25      	ldr	r3, [pc, #148]	; (8006ae0 <HAL_RCC_ClockConfig+0x1b8>)
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	f003 0307 	and.w	r3, r3, #7
 8006a50:	683a      	ldr	r2, [r7, #0]
 8006a52:	429a      	cmp	r2, r3
 8006a54:	d20c      	bcs.n	8006a70 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006a56:	4b22      	ldr	r3, [pc, #136]	; (8006ae0 <HAL_RCC_ClockConfig+0x1b8>)
 8006a58:	683a      	ldr	r2, [r7, #0]
 8006a5a:	b2d2      	uxtb	r2, r2
 8006a5c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006a5e:	4b20      	ldr	r3, [pc, #128]	; (8006ae0 <HAL_RCC_ClockConfig+0x1b8>)
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	f003 0307 	and.w	r3, r3, #7
 8006a66:	683a      	ldr	r2, [r7, #0]
 8006a68:	429a      	cmp	r2, r3
 8006a6a:	d001      	beq.n	8006a70 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006a6c:	2301      	movs	r3, #1
 8006a6e:	e032      	b.n	8006ad6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	f003 0304 	and.w	r3, r3, #4
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d008      	beq.n	8006a8e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006a7c:	4b19      	ldr	r3, [pc, #100]	; (8006ae4 <HAL_RCC_ClockConfig+0x1bc>)
 8006a7e:	689b      	ldr	r3, [r3, #8]
 8006a80:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	68db      	ldr	r3, [r3, #12]
 8006a88:	4916      	ldr	r1, [pc, #88]	; (8006ae4 <HAL_RCC_ClockConfig+0x1bc>)
 8006a8a:	4313      	orrs	r3, r2
 8006a8c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	f003 0308 	and.w	r3, r3, #8
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d009      	beq.n	8006aae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006a9a:	4b12      	ldr	r3, [pc, #72]	; (8006ae4 <HAL_RCC_ClockConfig+0x1bc>)
 8006a9c:	689b      	ldr	r3, [r3, #8]
 8006a9e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	691b      	ldr	r3, [r3, #16]
 8006aa6:	00db      	lsls	r3, r3, #3
 8006aa8:	490e      	ldr	r1, [pc, #56]	; (8006ae4 <HAL_RCC_ClockConfig+0x1bc>)
 8006aaa:	4313      	orrs	r3, r2
 8006aac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006aae:	f000 f821 	bl	8006af4 <HAL_RCC_GetSysClockFreq>
 8006ab2:	4602      	mov	r2, r0
 8006ab4:	4b0b      	ldr	r3, [pc, #44]	; (8006ae4 <HAL_RCC_ClockConfig+0x1bc>)
 8006ab6:	689b      	ldr	r3, [r3, #8]
 8006ab8:	091b      	lsrs	r3, r3, #4
 8006aba:	f003 030f 	and.w	r3, r3, #15
 8006abe:	490a      	ldr	r1, [pc, #40]	; (8006ae8 <HAL_RCC_ClockConfig+0x1c0>)
 8006ac0:	5ccb      	ldrb	r3, [r1, r3]
 8006ac2:	fa22 f303 	lsr.w	r3, r2, r3
 8006ac6:	4a09      	ldr	r2, [pc, #36]	; (8006aec <HAL_RCC_ClockConfig+0x1c4>)
 8006ac8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006aca:	4b09      	ldr	r3, [pc, #36]	; (8006af0 <HAL_RCC_ClockConfig+0x1c8>)
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	4618      	mov	r0, r3
 8006ad0:	f7fe faf8 	bl	80050c4 <HAL_InitTick>

  return HAL_OK;
 8006ad4:	2300      	movs	r3, #0
}
 8006ad6:	4618      	mov	r0, r3
 8006ad8:	3710      	adds	r7, #16
 8006ada:	46bd      	mov	sp, r7
 8006adc:	bd80      	pop	{r7, pc}
 8006ade:	bf00      	nop
 8006ae0:	40023c00 	.word	0x40023c00
 8006ae4:	40023800 	.word	0x40023800
 8006ae8:	08009bec 	.word	0x08009bec
 8006aec:	20000004 	.word	0x20000004
 8006af0:	20000008 	.word	0x20000008

08006af4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006af4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8006af8:	b084      	sub	sp, #16
 8006afa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006afc:	2300      	movs	r3, #0
 8006afe:	607b      	str	r3, [r7, #4]
 8006b00:	2300      	movs	r3, #0
 8006b02:	60fb      	str	r3, [r7, #12]
 8006b04:	2300      	movs	r3, #0
 8006b06:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8006b08:	2300      	movs	r3, #0
 8006b0a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006b0c:	4b67      	ldr	r3, [pc, #412]	; (8006cac <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006b0e:	689b      	ldr	r3, [r3, #8]
 8006b10:	f003 030c 	and.w	r3, r3, #12
 8006b14:	2b08      	cmp	r3, #8
 8006b16:	d00d      	beq.n	8006b34 <HAL_RCC_GetSysClockFreq+0x40>
 8006b18:	2b08      	cmp	r3, #8
 8006b1a:	f200 80bd 	bhi.w	8006c98 <HAL_RCC_GetSysClockFreq+0x1a4>
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d002      	beq.n	8006b28 <HAL_RCC_GetSysClockFreq+0x34>
 8006b22:	2b04      	cmp	r3, #4
 8006b24:	d003      	beq.n	8006b2e <HAL_RCC_GetSysClockFreq+0x3a>
 8006b26:	e0b7      	b.n	8006c98 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006b28:	4b61      	ldr	r3, [pc, #388]	; (8006cb0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8006b2a:	60bb      	str	r3, [r7, #8]
       break;
 8006b2c:	e0b7      	b.n	8006c9e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006b2e:	4b61      	ldr	r3, [pc, #388]	; (8006cb4 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8006b30:	60bb      	str	r3, [r7, #8]
      break;
 8006b32:	e0b4      	b.n	8006c9e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006b34:	4b5d      	ldr	r3, [pc, #372]	; (8006cac <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006b36:	685b      	ldr	r3, [r3, #4]
 8006b38:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006b3c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006b3e:	4b5b      	ldr	r3, [pc, #364]	; (8006cac <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006b40:	685b      	ldr	r3, [r3, #4]
 8006b42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d04d      	beq.n	8006be6 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006b4a:	4b58      	ldr	r3, [pc, #352]	; (8006cac <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006b4c:	685b      	ldr	r3, [r3, #4]
 8006b4e:	099b      	lsrs	r3, r3, #6
 8006b50:	461a      	mov	r2, r3
 8006b52:	f04f 0300 	mov.w	r3, #0
 8006b56:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006b5a:	f04f 0100 	mov.w	r1, #0
 8006b5e:	ea02 0800 	and.w	r8, r2, r0
 8006b62:	ea03 0901 	and.w	r9, r3, r1
 8006b66:	4640      	mov	r0, r8
 8006b68:	4649      	mov	r1, r9
 8006b6a:	f04f 0200 	mov.w	r2, #0
 8006b6e:	f04f 0300 	mov.w	r3, #0
 8006b72:	014b      	lsls	r3, r1, #5
 8006b74:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006b78:	0142      	lsls	r2, r0, #5
 8006b7a:	4610      	mov	r0, r2
 8006b7c:	4619      	mov	r1, r3
 8006b7e:	ebb0 0008 	subs.w	r0, r0, r8
 8006b82:	eb61 0109 	sbc.w	r1, r1, r9
 8006b86:	f04f 0200 	mov.w	r2, #0
 8006b8a:	f04f 0300 	mov.w	r3, #0
 8006b8e:	018b      	lsls	r3, r1, #6
 8006b90:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006b94:	0182      	lsls	r2, r0, #6
 8006b96:	1a12      	subs	r2, r2, r0
 8006b98:	eb63 0301 	sbc.w	r3, r3, r1
 8006b9c:	f04f 0000 	mov.w	r0, #0
 8006ba0:	f04f 0100 	mov.w	r1, #0
 8006ba4:	00d9      	lsls	r1, r3, #3
 8006ba6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006baa:	00d0      	lsls	r0, r2, #3
 8006bac:	4602      	mov	r2, r0
 8006bae:	460b      	mov	r3, r1
 8006bb0:	eb12 0208 	adds.w	r2, r2, r8
 8006bb4:	eb43 0309 	adc.w	r3, r3, r9
 8006bb8:	f04f 0000 	mov.w	r0, #0
 8006bbc:	f04f 0100 	mov.w	r1, #0
 8006bc0:	0259      	lsls	r1, r3, #9
 8006bc2:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8006bc6:	0250      	lsls	r0, r2, #9
 8006bc8:	4602      	mov	r2, r0
 8006bca:	460b      	mov	r3, r1
 8006bcc:	4610      	mov	r0, r2
 8006bce:	4619      	mov	r1, r3
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	461a      	mov	r2, r3
 8006bd4:	f04f 0300 	mov.w	r3, #0
 8006bd8:	f7f9 ff9c 	bl	8000b14 <__aeabi_uldivmod>
 8006bdc:	4602      	mov	r2, r0
 8006bde:	460b      	mov	r3, r1
 8006be0:	4613      	mov	r3, r2
 8006be2:	60fb      	str	r3, [r7, #12]
 8006be4:	e04a      	b.n	8006c7c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006be6:	4b31      	ldr	r3, [pc, #196]	; (8006cac <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006be8:	685b      	ldr	r3, [r3, #4]
 8006bea:	099b      	lsrs	r3, r3, #6
 8006bec:	461a      	mov	r2, r3
 8006bee:	f04f 0300 	mov.w	r3, #0
 8006bf2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006bf6:	f04f 0100 	mov.w	r1, #0
 8006bfa:	ea02 0400 	and.w	r4, r2, r0
 8006bfe:	ea03 0501 	and.w	r5, r3, r1
 8006c02:	4620      	mov	r0, r4
 8006c04:	4629      	mov	r1, r5
 8006c06:	f04f 0200 	mov.w	r2, #0
 8006c0a:	f04f 0300 	mov.w	r3, #0
 8006c0e:	014b      	lsls	r3, r1, #5
 8006c10:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006c14:	0142      	lsls	r2, r0, #5
 8006c16:	4610      	mov	r0, r2
 8006c18:	4619      	mov	r1, r3
 8006c1a:	1b00      	subs	r0, r0, r4
 8006c1c:	eb61 0105 	sbc.w	r1, r1, r5
 8006c20:	f04f 0200 	mov.w	r2, #0
 8006c24:	f04f 0300 	mov.w	r3, #0
 8006c28:	018b      	lsls	r3, r1, #6
 8006c2a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006c2e:	0182      	lsls	r2, r0, #6
 8006c30:	1a12      	subs	r2, r2, r0
 8006c32:	eb63 0301 	sbc.w	r3, r3, r1
 8006c36:	f04f 0000 	mov.w	r0, #0
 8006c3a:	f04f 0100 	mov.w	r1, #0
 8006c3e:	00d9      	lsls	r1, r3, #3
 8006c40:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006c44:	00d0      	lsls	r0, r2, #3
 8006c46:	4602      	mov	r2, r0
 8006c48:	460b      	mov	r3, r1
 8006c4a:	1912      	adds	r2, r2, r4
 8006c4c:	eb45 0303 	adc.w	r3, r5, r3
 8006c50:	f04f 0000 	mov.w	r0, #0
 8006c54:	f04f 0100 	mov.w	r1, #0
 8006c58:	0299      	lsls	r1, r3, #10
 8006c5a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8006c5e:	0290      	lsls	r0, r2, #10
 8006c60:	4602      	mov	r2, r0
 8006c62:	460b      	mov	r3, r1
 8006c64:	4610      	mov	r0, r2
 8006c66:	4619      	mov	r1, r3
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	461a      	mov	r2, r3
 8006c6c:	f04f 0300 	mov.w	r3, #0
 8006c70:	f7f9 ff50 	bl	8000b14 <__aeabi_uldivmod>
 8006c74:	4602      	mov	r2, r0
 8006c76:	460b      	mov	r3, r1
 8006c78:	4613      	mov	r3, r2
 8006c7a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006c7c:	4b0b      	ldr	r3, [pc, #44]	; (8006cac <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006c7e:	685b      	ldr	r3, [r3, #4]
 8006c80:	0c1b      	lsrs	r3, r3, #16
 8006c82:	f003 0303 	and.w	r3, r3, #3
 8006c86:	3301      	adds	r3, #1
 8006c88:	005b      	lsls	r3, r3, #1
 8006c8a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8006c8c:	68fa      	ldr	r2, [r7, #12]
 8006c8e:	683b      	ldr	r3, [r7, #0]
 8006c90:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c94:	60bb      	str	r3, [r7, #8]
      break;
 8006c96:	e002      	b.n	8006c9e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006c98:	4b05      	ldr	r3, [pc, #20]	; (8006cb0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8006c9a:	60bb      	str	r3, [r7, #8]
      break;
 8006c9c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006c9e:	68bb      	ldr	r3, [r7, #8]
}
 8006ca0:	4618      	mov	r0, r3
 8006ca2:	3710      	adds	r7, #16
 8006ca4:	46bd      	mov	sp, r7
 8006ca6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8006caa:	bf00      	nop
 8006cac:	40023800 	.word	0x40023800
 8006cb0:	00f42400 	.word	0x00f42400
 8006cb4:	007a1200 	.word	0x007a1200

08006cb8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006cb8:	b480      	push	{r7}
 8006cba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006cbc:	4b03      	ldr	r3, [pc, #12]	; (8006ccc <HAL_RCC_GetHCLKFreq+0x14>)
 8006cbe:	681b      	ldr	r3, [r3, #0]
}
 8006cc0:	4618      	mov	r0, r3
 8006cc2:	46bd      	mov	sp, r7
 8006cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc8:	4770      	bx	lr
 8006cca:	bf00      	nop
 8006ccc:	20000004 	.word	0x20000004

08006cd0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006cd0:	b580      	push	{r7, lr}
 8006cd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006cd4:	f7ff fff0 	bl	8006cb8 <HAL_RCC_GetHCLKFreq>
 8006cd8:	4602      	mov	r2, r0
 8006cda:	4b05      	ldr	r3, [pc, #20]	; (8006cf0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006cdc:	689b      	ldr	r3, [r3, #8]
 8006cde:	0a9b      	lsrs	r3, r3, #10
 8006ce0:	f003 0307 	and.w	r3, r3, #7
 8006ce4:	4903      	ldr	r1, [pc, #12]	; (8006cf4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006ce6:	5ccb      	ldrb	r3, [r1, r3]
 8006ce8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006cec:	4618      	mov	r0, r3
 8006cee:	bd80      	pop	{r7, pc}
 8006cf0:	40023800 	.word	0x40023800
 8006cf4:	08009bfc 	.word	0x08009bfc

08006cf8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006cf8:	b580      	push	{r7, lr}
 8006cfa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006cfc:	f7ff ffdc 	bl	8006cb8 <HAL_RCC_GetHCLKFreq>
 8006d00:	4602      	mov	r2, r0
 8006d02:	4b05      	ldr	r3, [pc, #20]	; (8006d18 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006d04:	689b      	ldr	r3, [r3, #8]
 8006d06:	0b5b      	lsrs	r3, r3, #13
 8006d08:	f003 0307 	and.w	r3, r3, #7
 8006d0c:	4903      	ldr	r1, [pc, #12]	; (8006d1c <HAL_RCC_GetPCLK2Freq+0x24>)
 8006d0e:	5ccb      	ldrb	r3, [r1, r3]
 8006d10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006d14:	4618      	mov	r0, r3
 8006d16:	bd80      	pop	{r7, pc}
 8006d18:	40023800 	.word	0x40023800
 8006d1c:	08009bfc 	.word	0x08009bfc

08006d20 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006d20:	b580      	push	{r7, lr}
 8006d22:	b082      	sub	sp, #8
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d101      	bne.n	8006d32 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006d2e:	2301      	movs	r3, #1
 8006d30:	e07b      	b.n	8006e2a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d108      	bne.n	8006d4c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	685b      	ldr	r3, [r3, #4]
 8006d3e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006d42:	d009      	beq.n	8006d58 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	2200      	movs	r2, #0
 8006d48:	61da      	str	r2, [r3, #28]
 8006d4a:	e005      	b.n	8006d58 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	2200      	movs	r2, #0
 8006d50:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	2200      	movs	r2, #0
 8006d56:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	2200      	movs	r2, #0
 8006d5c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006d64:	b2db      	uxtb	r3, r3
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d106      	bne.n	8006d78 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	2200      	movs	r2, #0
 8006d6e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006d72:	6878      	ldr	r0, [r7, #4]
 8006d74:	f7fd fc90 	bl	8004698 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	2202      	movs	r2, #2
 8006d7c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	681a      	ldr	r2, [r3, #0]
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006d8e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	685b      	ldr	r3, [r3, #4]
 8006d94:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	689b      	ldr	r3, [r3, #8]
 8006d9c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006da0:	431a      	orrs	r2, r3
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	68db      	ldr	r3, [r3, #12]
 8006da6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006daa:	431a      	orrs	r2, r3
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	691b      	ldr	r3, [r3, #16]
 8006db0:	f003 0302 	and.w	r3, r3, #2
 8006db4:	431a      	orrs	r2, r3
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	695b      	ldr	r3, [r3, #20]
 8006dba:	f003 0301 	and.w	r3, r3, #1
 8006dbe:	431a      	orrs	r2, r3
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	699b      	ldr	r3, [r3, #24]
 8006dc4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006dc8:	431a      	orrs	r2, r3
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	69db      	ldr	r3, [r3, #28]
 8006dce:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006dd2:	431a      	orrs	r2, r3
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	6a1b      	ldr	r3, [r3, #32]
 8006dd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ddc:	ea42 0103 	orr.w	r1, r2, r3
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006de4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	430a      	orrs	r2, r1
 8006dee:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	699b      	ldr	r3, [r3, #24]
 8006df4:	0c1b      	lsrs	r3, r3, #16
 8006df6:	f003 0104 	and.w	r1, r3, #4
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dfe:	f003 0210 	and.w	r2, r3, #16
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	430a      	orrs	r2, r1
 8006e08:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	69da      	ldr	r2, [r3, #28]
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006e18:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	2200      	movs	r2, #0
 8006e1e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	2201      	movs	r2, #1
 8006e24:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006e28:	2300      	movs	r3, #0
}
 8006e2a:	4618      	mov	r0, r3
 8006e2c:	3708      	adds	r7, #8
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	bd80      	pop	{r7, pc}

08006e32 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006e32:	b580      	push	{r7, lr}
 8006e34:	b088      	sub	sp, #32
 8006e36:	af00      	add	r7, sp, #0
 8006e38:	60f8      	str	r0, [r7, #12]
 8006e3a:	60b9      	str	r1, [r7, #8]
 8006e3c:	603b      	str	r3, [r7, #0]
 8006e3e:	4613      	mov	r3, r2
 8006e40:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006e42:	2300      	movs	r3, #0
 8006e44:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006e4c:	2b01      	cmp	r3, #1
 8006e4e:	d101      	bne.n	8006e54 <HAL_SPI_Transmit+0x22>
 8006e50:	2302      	movs	r3, #2
 8006e52:	e126      	b.n	80070a2 <HAL_SPI_Transmit+0x270>
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	2201      	movs	r2, #1
 8006e58:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006e5c:	f7fe f976 	bl	800514c <HAL_GetTick>
 8006e60:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006e62:	88fb      	ldrh	r3, [r7, #6]
 8006e64:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006e6c:	b2db      	uxtb	r3, r3
 8006e6e:	2b01      	cmp	r3, #1
 8006e70:	d002      	beq.n	8006e78 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006e72:	2302      	movs	r3, #2
 8006e74:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006e76:	e10b      	b.n	8007090 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8006e78:	68bb      	ldr	r3, [r7, #8]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d002      	beq.n	8006e84 <HAL_SPI_Transmit+0x52>
 8006e7e:	88fb      	ldrh	r3, [r7, #6]
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d102      	bne.n	8006e8a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006e84:	2301      	movs	r3, #1
 8006e86:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006e88:	e102      	b.n	8007090 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	2203      	movs	r2, #3
 8006e8e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	2200      	movs	r2, #0
 8006e96:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	68ba      	ldr	r2, [r7, #8]
 8006e9c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	88fa      	ldrh	r2, [r7, #6]
 8006ea2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	88fa      	ldrh	r2, [r7, #6]
 8006ea8:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	2200      	movs	r2, #0
 8006eae:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	2200      	movs	r2, #0
 8006eb4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	2200      	movs	r2, #0
 8006eba:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	2200      	movs	r2, #0
 8006ec0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	2200      	movs	r2, #0
 8006ec6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	689b      	ldr	r3, [r3, #8]
 8006ecc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ed0:	d10f      	bne.n	8006ef2 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	681a      	ldr	r2, [r3, #0]
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006ee0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	681a      	ldr	r2, [r3, #0]
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006ef0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006efc:	2b40      	cmp	r3, #64	; 0x40
 8006efe:	d007      	beq.n	8006f10 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	681a      	ldr	r2, [r3, #0]
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006f0e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	68db      	ldr	r3, [r3, #12]
 8006f14:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006f18:	d14b      	bne.n	8006fb2 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	685b      	ldr	r3, [r3, #4]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d002      	beq.n	8006f28 <HAL_SPI_Transmit+0xf6>
 8006f22:	8afb      	ldrh	r3, [r7, #22]
 8006f24:	2b01      	cmp	r3, #1
 8006f26:	d13e      	bne.n	8006fa6 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f2c:	881a      	ldrh	r2, [r3, #0]
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f38:	1c9a      	adds	r2, r3, #2
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006f42:	b29b      	uxth	r3, r3
 8006f44:	3b01      	subs	r3, #1
 8006f46:	b29a      	uxth	r2, r3
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006f4c:	e02b      	b.n	8006fa6 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	689b      	ldr	r3, [r3, #8]
 8006f54:	f003 0302 	and.w	r3, r3, #2
 8006f58:	2b02      	cmp	r3, #2
 8006f5a:	d112      	bne.n	8006f82 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f60:	881a      	ldrh	r2, [r3, #0]
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f6c:	1c9a      	adds	r2, r3, #2
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006f76:	b29b      	uxth	r3, r3
 8006f78:	3b01      	subs	r3, #1
 8006f7a:	b29a      	uxth	r2, r3
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	86da      	strh	r2, [r3, #54]	; 0x36
 8006f80:	e011      	b.n	8006fa6 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006f82:	f7fe f8e3 	bl	800514c <HAL_GetTick>
 8006f86:	4602      	mov	r2, r0
 8006f88:	69bb      	ldr	r3, [r7, #24]
 8006f8a:	1ad3      	subs	r3, r2, r3
 8006f8c:	683a      	ldr	r2, [r7, #0]
 8006f8e:	429a      	cmp	r2, r3
 8006f90:	d803      	bhi.n	8006f9a <HAL_SPI_Transmit+0x168>
 8006f92:	683b      	ldr	r3, [r7, #0]
 8006f94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f98:	d102      	bne.n	8006fa0 <HAL_SPI_Transmit+0x16e>
 8006f9a:	683b      	ldr	r3, [r7, #0]
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d102      	bne.n	8006fa6 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8006fa0:	2303      	movs	r3, #3
 8006fa2:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006fa4:	e074      	b.n	8007090 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006faa:	b29b      	uxth	r3, r3
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d1ce      	bne.n	8006f4e <HAL_SPI_Transmit+0x11c>
 8006fb0:	e04c      	b.n	800704c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	685b      	ldr	r3, [r3, #4]
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d002      	beq.n	8006fc0 <HAL_SPI_Transmit+0x18e>
 8006fba:	8afb      	ldrh	r3, [r7, #22]
 8006fbc:	2b01      	cmp	r3, #1
 8006fbe:	d140      	bne.n	8007042 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	330c      	adds	r3, #12
 8006fca:	7812      	ldrb	r2, [r2, #0]
 8006fcc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fd2:	1c5a      	adds	r2, r3, #1
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006fdc:	b29b      	uxth	r3, r3
 8006fde:	3b01      	subs	r3, #1
 8006fe0:	b29a      	uxth	r2, r3
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006fe6:	e02c      	b.n	8007042 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	689b      	ldr	r3, [r3, #8]
 8006fee:	f003 0302 	and.w	r3, r3, #2
 8006ff2:	2b02      	cmp	r3, #2
 8006ff4:	d113      	bne.n	800701e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	330c      	adds	r3, #12
 8007000:	7812      	ldrb	r2, [r2, #0]
 8007002:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007008:	1c5a      	adds	r2, r3, #1
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007012:	b29b      	uxth	r3, r3
 8007014:	3b01      	subs	r3, #1
 8007016:	b29a      	uxth	r2, r3
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	86da      	strh	r2, [r3, #54]	; 0x36
 800701c:	e011      	b.n	8007042 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800701e:	f7fe f895 	bl	800514c <HAL_GetTick>
 8007022:	4602      	mov	r2, r0
 8007024:	69bb      	ldr	r3, [r7, #24]
 8007026:	1ad3      	subs	r3, r2, r3
 8007028:	683a      	ldr	r2, [r7, #0]
 800702a:	429a      	cmp	r2, r3
 800702c:	d803      	bhi.n	8007036 <HAL_SPI_Transmit+0x204>
 800702e:	683b      	ldr	r3, [r7, #0]
 8007030:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007034:	d102      	bne.n	800703c <HAL_SPI_Transmit+0x20a>
 8007036:	683b      	ldr	r3, [r7, #0]
 8007038:	2b00      	cmp	r3, #0
 800703a:	d102      	bne.n	8007042 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800703c:	2303      	movs	r3, #3
 800703e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007040:	e026      	b.n	8007090 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007046:	b29b      	uxth	r3, r3
 8007048:	2b00      	cmp	r3, #0
 800704a:	d1cd      	bne.n	8006fe8 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800704c:	69ba      	ldr	r2, [r7, #24]
 800704e:	6839      	ldr	r1, [r7, #0]
 8007050:	68f8      	ldr	r0, [r7, #12]
 8007052:	f000 fbcb 	bl	80077ec <SPI_EndRxTxTransaction>
 8007056:	4603      	mov	r3, r0
 8007058:	2b00      	cmp	r3, #0
 800705a:	d002      	beq.n	8007062 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	2220      	movs	r2, #32
 8007060:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	689b      	ldr	r3, [r3, #8]
 8007066:	2b00      	cmp	r3, #0
 8007068:	d10a      	bne.n	8007080 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800706a:	2300      	movs	r3, #0
 800706c:	613b      	str	r3, [r7, #16]
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	68db      	ldr	r3, [r3, #12]
 8007074:	613b      	str	r3, [r7, #16]
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	689b      	ldr	r3, [r3, #8]
 800707c:	613b      	str	r3, [r7, #16]
 800707e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007084:	2b00      	cmp	r3, #0
 8007086:	d002      	beq.n	800708e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8007088:	2301      	movs	r3, #1
 800708a:	77fb      	strb	r3, [r7, #31]
 800708c:	e000      	b.n	8007090 <HAL_SPI_Transmit+0x25e>
  }

error:
 800708e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	2201      	movs	r2, #1
 8007094:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	2200      	movs	r2, #0
 800709c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80070a0:	7ffb      	ldrb	r3, [r7, #31]
}
 80070a2:	4618      	mov	r0, r3
 80070a4:	3720      	adds	r7, #32
 80070a6:	46bd      	mov	sp, r7
 80070a8:	bd80      	pop	{r7, pc}

080070aa <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80070aa:	b580      	push	{r7, lr}
 80070ac:	b088      	sub	sp, #32
 80070ae:	af02      	add	r7, sp, #8
 80070b0:	60f8      	str	r0, [r7, #12]
 80070b2:	60b9      	str	r1, [r7, #8]
 80070b4:	603b      	str	r3, [r7, #0]
 80070b6:	4613      	mov	r3, r2
 80070b8:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80070ba:	2300      	movs	r3, #0
 80070bc:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	685b      	ldr	r3, [r3, #4]
 80070c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80070c6:	d112      	bne.n	80070ee <HAL_SPI_Receive+0x44>
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	689b      	ldr	r3, [r3, #8]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d10e      	bne.n	80070ee <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	2204      	movs	r2, #4
 80070d4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80070d8:	88fa      	ldrh	r2, [r7, #6]
 80070da:	683b      	ldr	r3, [r7, #0]
 80070dc:	9300      	str	r3, [sp, #0]
 80070de:	4613      	mov	r3, r2
 80070e0:	68ba      	ldr	r2, [r7, #8]
 80070e2:	68b9      	ldr	r1, [r7, #8]
 80070e4:	68f8      	ldr	r0, [r7, #12]
 80070e6:	f000 f8f1 	bl	80072cc <HAL_SPI_TransmitReceive>
 80070ea:	4603      	mov	r3, r0
 80070ec:	e0ea      	b.n	80072c4 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80070f4:	2b01      	cmp	r3, #1
 80070f6:	d101      	bne.n	80070fc <HAL_SPI_Receive+0x52>
 80070f8:	2302      	movs	r3, #2
 80070fa:	e0e3      	b.n	80072c4 <HAL_SPI_Receive+0x21a>
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	2201      	movs	r2, #1
 8007100:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007104:	f7fe f822 	bl	800514c <HAL_GetTick>
 8007108:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007110:	b2db      	uxtb	r3, r3
 8007112:	2b01      	cmp	r3, #1
 8007114:	d002      	beq.n	800711c <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8007116:	2302      	movs	r3, #2
 8007118:	75fb      	strb	r3, [r7, #23]
    goto error;
 800711a:	e0ca      	b.n	80072b2 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 800711c:	68bb      	ldr	r3, [r7, #8]
 800711e:	2b00      	cmp	r3, #0
 8007120:	d002      	beq.n	8007128 <HAL_SPI_Receive+0x7e>
 8007122:	88fb      	ldrh	r3, [r7, #6]
 8007124:	2b00      	cmp	r3, #0
 8007126:	d102      	bne.n	800712e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8007128:	2301      	movs	r3, #1
 800712a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800712c:	e0c1      	b.n	80072b2 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	2204      	movs	r2, #4
 8007132:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	2200      	movs	r2, #0
 800713a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	68ba      	ldr	r2, [r7, #8]
 8007140:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	88fa      	ldrh	r2, [r7, #6]
 8007146:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	88fa      	ldrh	r2, [r7, #6]
 800714c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	2200      	movs	r2, #0
 8007152:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	2200      	movs	r2, #0
 8007158:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	2200      	movs	r2, #0
 800715e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	2200      	movs	r2, #0
 8007164:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	2200      	movs	r2, #0
 800716a:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	689b      	ldr	r3, [r3, #8]
 8007170:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007174:	d10f      	bne.n	8007196 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	681a      	ldr	r2, [r3, #0]
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007184:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	681a      	ldr	r2, [r3, #0]
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007194:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071a0:	2b40      	cmp	r3, #64	; 0x40
 80071a2:	d007      	beq.n	80071b4 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	681a      	ldr	r2, [r3, #0]
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80071b2:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	68db      	ldr	r3, [r3, #12]
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d162      	bne.n	8007282 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80071bc:	e02e      	b.n	800721c <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	689b      	ldr	r3, [r3, #8]
 80071c4:	f003 0301 	and.w	r3, r3, #1
 80071c8:	2b01      	cmp	r3, #1
 80071ca:	d115      	bne.n	80071f8 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	f103 020c 	add.w	r2, r3, #12
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071d8:	7812      	ldrb	r2, [r2, #0]
 80071da:	b2d2      	uxtb	r2, r2
 80071dc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071e2:	1c5a      	adds	r2, r3, #1
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80071ec:	b29b      	uxth	r3, r3
 80071ee:	3b01      	subs	r3, #1
 80071f0:	b29a      	uxth	r2, r3
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80071f6:	e011      	b.n	800721c <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80071f8:	f7fd ffa8 	bl	800514c <HAL_GetTick>
 80071fc:	4602      	mov	r2, r0
 80071fe:	693b      	ldr	r3, [r7, #16]
 8007200:	1ad3      	subs	r3, r2, r3
 8007202:	683a      	ldr	r2, [r7, #0]
 8007204:	429a      	cmp	r2, r3
 8007206:	d803      	bhi.n	8007210 <HAL_SPI_Receive+0x166>
 8007208:	683b      	ldr	r3, [r7, #0]
 800720a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800720e:	d102      	bne.n	8007216 <HAL_SPI_Receive+0x16c>
 8007210:	683b      	ldr	r3, [r7, #0]
 8007212:	2b00      	cmp	r3, #0
 8007214:	d102      	bne.n	800721c <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8007216:	2303      	movs	r3, #3
 8007218:	75fb      	strb	r3, [r7, #23]
          goto error;
 800721a:	e04a      	b.n	80072b2 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007220:	b29b      	uxth	r3, r3
 8007222:	2b00      	cmp	r3, #0
 8007224:	d1cb      	bne.n	80071be <HAL_SPI_Receive+0x114>
 8007226:	e031      	b.n	800728c <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	689b      	ldr	r3, [r3, #8]
 800722e:	f003 0301 	and.w	r3, r3, #1
 8007232:	2b01      	cmp	r3, #1
 8007234:	d113      	bne.n	800725e <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	68da      	ldr	r2, [r3, #12]
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007240:	b292      	uxth	r2, r2
 8007242:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007248:	1c9a      	adds	r2, r3, #2
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007252:	b29b      	uxth	r3, r3
 8007254:	3b01      	subs	r3, #1
 8007256:	b29a      	uxth	r2, r3
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800725c:	e011      	b.n	8007282 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800725e:	f7fd ff75 	bl	800514c <HAL_GetTick>
 8007262:	4602      	mov	r2, r0
 8007264:	693b      	ldr	r3, [r7, #16]
 8007266:	1ad3      	subs	r3, r2, r3
 8007268:	683a      	ldr	r2, [r7, #0]
 800726a:	429a      	cmp	r2, r3
 800726c:	d803      	bhi.n	8007276 <HAL_SPI_Receive+0x1cc>
 800726e:	683b      	ldr	r3, [r7, #0]
 8007270:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007274:	d102      	bne.n	800727c <HAL_SPI_Receive+0x1d2>
 8007276:	683b      	ldr	r3, [r7, #0]
 8007278:	2b00      	cmp	r3, #0
 800727a:	d102      	bne.n	8007282 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 800727c:	2303      	movs	r3, #3
 800727e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007280:	e017      	b.n	80072b2 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007286:	b29b      	uxth	r3, r3
 8007288:	2b00      	cmp	r3, #0
 800728a:	d1cd      	bne.n	8007228 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800728c:	693a      	ldr	r2, [r7, #16]
 800728e:	6839      	ldr	r1, [r7, #0]
 8007290:	68f8      	ldr	r0, [r7, #12]
 8007292:	f000 fa45 	bl	8007720 <SPI_EndRxTransaction>
 8007296:	4603      	mov	r3, r0
 8007298:	2b00      	cmp	r3, #0
 800729a:	d002      	beq.n	80072a2 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	2220      	movs	r2, #32
 80072a0:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d002      	beq.n	80072b0 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80072aa:	2301      	movs	r3, #1
 80072ac:	75fb      	strb	r3, [r7, #23]
 80072ae:	e000      	b.n	80072b2 <HAL_SPI_Receive+0x208>
  }

error :
 80072b0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	2201      	movs	r2, #1
 80072b6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	2200      	movs	r2, #0
 80072be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80072c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80072c4:	4618      	mov	r0, r3
 80072c6:	3718      	adds	r7, #24
 80072c8:	46bd      	mov	sp, r7
 80072ca:	bd80      	pop	{r7, pc}

080072cc <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80072cc:	b580      	push	{r7, lr}
 80072ce:	b08c      	sub	sp, #48	; 0x30
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	60f8      	str	r0, [r7, #12]
 80072d4:	60b9      	str	r1, [r7, #8]
 80072d6:	607a      	str	r2, [r7, #4]
 80072d8:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80072da:	2301      	movs	r3, #1
 80072dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80072de:	2300      	movs	r3, #0
 80072e0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80072ea:	2b01      	cmp	r3, #1
 80072ec:	d101      	bne.n	80072f2 <HAL_SPI_TransmitReceive+0x26>
 80072ee:	2302      	movs	r3, #2
 80072f0:	e18a      	b.n	8007608 <HAL_SPI_TransmitReceive+0x33c>
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	2201      	movs	r2, #1
 80072f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80072fa:	f7fd ff27 	bl	800514c <HAL_GetTick>
 80072fe:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007306:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	685b      	ldr	r3, [r3, #4]
 800730e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8007310:	887b      	ldrh	r3, [r7, #2]
 8007312:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007314:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007318:	2b01      	cmp	r3, #1
 800731a:	d00f      	beq.n	800733c <HAL_SPI_TransmitReceive+0x70>
 800731c:	69fb      	ldr	r3, [r7, #28]
 800731e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007322:	d107      	bne.n	8007334 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	689b      	ldr	r3, [r3, #8]
 8007328:	2b00      	cmp	r3, #0
 800732a:	d103      	bne.n	8007334 <HAL_SPI_TransmitReceive+0x68>
 800732c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007330:	2b04      	cmp	r3, #4
 8007332:	d003      	beq.n	800733c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8007334:	2302      	movs	r3, #2
 8007336:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800733a:	e15b      	b.n	80075f4 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800733c:	68bb      	ldr	r3, [r7, #8]
 800733e:	2b00      	cmp	r3, #0
 8007340:	d005      	beq.n	800734e <HAL_SPI_TransmitReceive+0x82>
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	2b00      	cmp	r3, #0
 8007346:	d002      	beq.n	800734e <HAL_SPI_TransmitReceive+0x82>
 8007348:	887b      	ldrh	r3, [r7, #2]
 800734a:	2b00      	cmp	r3, #0
 800734c:	d103      	bne.n	8007356 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800734e:	2301      	movs	r3, #1
 8007350:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007354:	e14e      	b.n	80075f4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800735c:	b2db      	uxtb	r3, r3
 800735e:	2b04      	cmp	r3, #4
 8007360:	d003      	beq.n	800736a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	2205      	movs	r2, #5
 8007366:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	2200      	movs	r2, #0
 800736e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	687a      	ldr	r2, [r7, #4]
 8007374:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	887a      	ldrh	r2, [r7, #2]
 800737a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	887a      	ldrh	r2, [r7, #2]
 8007380:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	68ba      	ldr	r2, [r7, #8]
 8007386:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	887a      	ldrh	r2, [r7, #2]
 800738c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	887a      	ldrh	r2, [r7, #2]
 8007392:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	2200      	movs	r2, #0
 8007398:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	2200      	movs	r2, #0
 800739e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073aa:	2b40      	cmp	r3, #64	; 0x40
 80073ac:	d007      	beq.n	80073be <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	681a      	ldr	r2, [r3, #0]
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80073bc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	68db      	ldr	r3, [r3, #12]
 80073c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80073c6:	d178      	bne.n	80074ba <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	685b      	ldr	r3, [r3, #4]
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d002      	beq.n	80073d6 <HAL_SPI_TransmitReceive+0x10a>
 80073d0:	8b7b      	ldrh	r3, [r7, #26]
 80073d2:	2b01      	cmp	r3, #1
 80073d4:	d166      	bne.n	80074a4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073da:	881a      	ldrh	r2, [r3, #0]
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073e6:	1c9a      	adds	r2, r3, #2
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80073f0:	b29b      	uxth	r3, r3
 80073f2:	3b01      	subs	r3, #1
 80073f4:	b29a      	uxth	r2, r3
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80073fa:	e053      	b.n	80074a4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	689b      	ldr	r3, [r3, #8]
 8007402:	f003 0302 	and.w	r3, r3, #2
 8007406:	2b02      	cmp	r3, #2
 8007408:	d11b      	bne.n	8007442 <HAL_SPI_TransmitReceive+0x176>
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800740e:	b29b      	uxth	r3, r3
 8007410:	2b00      	cmp	r3, #0
 8007412:	d016      	beq.n	8007442 <HAL_SPI_TransmitReceive+0x176>
 8007414:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007416:	2b01      	cmp	r3, #1
 8007418:	d113      	bne.n	8007442 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800741e:	881a      	ldrh	r2, [r3, #0]
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800742a:	1c9a      	adds	r2, r3, #2
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007434:	b29b      	uxth	r3, r3
 8007436:	3b01      	subs	r3, #1
 8007438:	b29a      	uxth	r2, r3
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800743e:	2300      	movs	r3, #0
 8007440:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	689b      	ldr	r3, [r3, #8]
 8007448:	f003 0301 	and.w	r3, r3, #1
 800744c:	2b01      	cmp	r3, #1
 800744e:	d119      	bne.n	8007484 <HAL_SPI_TransmitReceive+0x1b8>
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007454:	b29b      	uxth	r3, r3
 8007456:	2b00      	cmp	r3, #0
 8007458:	d014      	beq.n	8007484 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	68da      	ldr	r2, [r3, #12]
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007464:	b292      	uxth	r2, r2
 8007466:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800746c:	1c9a      	adds	r2, r3, #2
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007476:	b29b      	uxth	r3, r3
 8007478:	3b01      	subs	r3, #1
 800747a:	b29a      	uxth	r2, r3
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007480:	2301      	movs	r3, #1
 8007482:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007484:	f7fd fe62 	bl	800514c <HAL_GetTick>
 8007488:	4602      	mov	r2, r0
 800748a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800748c:	1ad3      	subs	r3, r2, r3
 800748e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007490:	429a      	cmp	r2, r3
 8007492:	d807      	bhi.n	80074a4 <HAL_SPI_TransmitReceive+0x1d8>
 8007494:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007496:	f1b3 3fff 	cmp.w	r3, #4294967295
 800749a:	d003      	beq.n	80074a4 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800749c:	2303      	movs	r3, #3
 800749e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80074a2:	e0a7      	b.n	80075f4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80074a8:	b29b      	uxth	r3, r3
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d1a6      	bne.n	80073fc <HAL_SPI_TransmitReceive+0x130>
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80074b2:	b29b      	uxth	r3, r3
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d1a1      	bne.n	80073fc <HAL_SPI_TransmitReceive+0x130>
 80074b8:	e07c      	b.n	80075b4 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	685b      	ldr	r3, [r3, #4]
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d002      	beq.n	80074c8 <HAL_SPI_TransmitReceive+0x1fc>
 80074c2:	8b7b      	ldrh	r3, [r7, #26]
 80074c4:	2b01      	cmp	r3, #1
 80074c6:	d16b      	bne.n	80075a0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	330c      	adds	r3, #12
 80074d2:	7812      	ldrb	r2, [r2, #0]
 80074d4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074da:	1c5a      	adds	r2, r3, #1
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80074e4:	b29b      	uxth	r3, r3
 80074e6:	3b01      	subs	r3, #1
 80074e8:	b29a      	uxth	r2, r3
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80074ee:	e057      	b.n	80075a0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	689b      	ldr	r3, [r3, #8]
 80074f6:	f003 0302 	and.w	r3, r3, #2
 80074fa:	2b02      	cmp	r3, #2
 80074fc:	d11c      	bne.n	8007538 <HAL_SPI_TransmitReceive+0x26c>
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007502:	b29b      	uxth	r3, r3
 8007504:	2b00      	cmp	r3, #0
 8007506:	d017      	beq.n	8007538 <HAL_SPI_TransmitReceive+0x26c>
 8007508:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800750a:	2b01      	cmp	r3, #1
 800750c:	d114      	bne.n	8007538 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	330c      	adds	r3, #12
 8007518:	7812      	ldrb	r2, [r2, #0]
 800751a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007520:	1c5a      	adds	r2, r3, #1
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800752a:	b29b      	uxth	r3, r3
 800752c:	3b01      	subs	r3, #1
 800752e:	b29a      	uxth	r2, r3
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007534:	2300      	movs	r3, #0
 8007536:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	689b      	ldr	r3, [r3, #8]
 800753e:	f003 0301 	and.w	r3, r3, #1
 8007542:	2b01      	cmp	r3, #1
 8007544:	d119      	bne.n	800757a <HAL_SPI_TransmitReceive+0x2ae>
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800754a:	b29b      	uxth	r3, r3
 800754c:	2b00      	cmp	r3, #0
 800754e:	d014      	beq.n	800757a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	68da      	ldr	r2, [r3, #12]
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800755a:	b2d2      	uxtb	r2, r2
 800755c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007562:	1c5a      	adds	r2, r3, #1
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800756c:	b29b      	uxth	r3, r3
 800756e:	3b01      	subs	r3, #1
 8007570:	b29a      	uxth	r2, r3
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007576:	2301      	movs	r3, #1
 8007578:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800757a:	f7fd fde7 	bl	800514c <HAL_GetTick>
 800757e:	4602      	mov	r2, r0
 8007580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007582:	1ad3      	subs	r3, r2, r3
 8007584:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007586:	429a      	cmp	r2, r3
 8007588:	d803      	bhi.n	8007592 <HAL_SPI_TransmitReceive+0x2c6>
 800758a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800758c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007590:	d102      	bne.n	8007598 <HAL_SPI_TransmitReceive+0x2cc>
 8007592:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007594:	2b00      	cmp	r3, #0
 8007596:	d103      	bne.n	80075a0 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8007598:	2303      	movs	r3, #3
 800759a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800759e:	e029      	b.n	80075f4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80075a4:	b29b      	uxth	r3, r3
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d1a2      	bne.n	80074f0 <HAL_SPI_TransmitReceive+0x224>
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80075ae:	b29b      	uxth	r3, r3
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d19d      	bne.n	80074f0 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80075b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80075b6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80075b8:	68f8      	ldr	r0, [r7, #12]
 80075ba:	f000 f917 	bl	80077ec <SPI_EndRxTxTransaction>
 80075be:	4603      	mov	r3, r0
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d006      	beq.n	80075d2 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80075c4:	2301      	movs	r3, #1
 80075c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	2220      	movs	r2, #32
 80075ce:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80075d0:	e010      	b.n	80075f4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	689b      	ldr	r3, [r3, #8]
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d10b      	bne.n	80075f2 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80075da:	2300      	movs	r3, #0
 80075dc:	617b      	str	r3, [r7, #20]
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	68db      	ldr	r3, [r3, #12]
 80075e4:	617b      	str	r3, [r7, #20]
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	689b      	ldr	r3, [r3, #8]
 80075ec:	617b      	str	r3, [r7, #20]
 80075ee:	697b      	ldr	r3, [r7, #20]
 80075f0:	e000      	b.n	80075f4 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80075f2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	2201      	movs	r2, #1
 80075f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	2200      	movs	r2, #0
 8007600:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007604:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8007608:	4618      	mov	r0, r3
 800760a:	3730      	adds	r7, #48	; 0x30
 800760c:	46bd      	mov	sp, r7
 800760e:	bd80      	pop	{r7, pc}

08007610 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007610:	b580      	push	{r7, lr}
 8007612:	b088      	sub	sp, #32
 8007614:	af00      	add	r7, sp, #0
 8007616:	60f8      	str	r0, [r7, #12]
 8007618:	60b9      	str	r1, [r7, #8]
 800761a:	603b      	str	r3, [r7, #0]
 800761c:	4613      	mov	r3, r2
 800761e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007620:	f7fd fd94 	bl	800514c <HAL_GetTick>
 8007624:	4602      	mov	r2, r0
 8007626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007628:	1a9b      	subs	r3, r3, r2
 800762a:	683a      	ldr	r2, [r7, #0]
 800762c:	4413      	add	r3, r2
 800762e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007630:	f7fd fd8c 	bl	800514c <HAL_GetTick>
 8007634:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007636:	4b39      	ldr	r3, [pc, #228]	; (800771c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	015b      	lsls	r3, r3, #5
 800763c:	0d1b      	lsrs	r3, r3, #20
 800763e:	69fa      	ldr	r2, [r7, #28]
 8007640:	fb02 f303 	mul.w	r3, r2, r3
 8007644:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007646:	e054      	b.n	80076f2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007648:	683b      	ldr	r3, [r7, #0]
 800764a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800764e:	d050      	beq.n	80076f2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007650:	f7fd fd7c 	bl	800514c <HAL_GetTick>
 8007654:	4602      	mov	r2, r0
 8007656:	69bb      	ldr	r3, [r7, #24]
 8007658:	1ad3      	subs	r3, r2, r3
 800765a:	69fa      	ldr	r2, [r7, #28]
 800765c:	429a      	cmp	r2, r3
 800765e:	d902      	bls.n	8007666 <SPI_WaitFlagStateUntilTimeout+0x56>
 8007660:	69fb      	ldr	r3, [r7, #28]
 8007662:	2b00      	cmp	r3, #0
 8007664:	d13d      	bne.n	80076e2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	685a      	ldr	r2, [r3, #4]
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007674:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	685b      	ldr	r3, [r3, #4]
 800767a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800767e:	d111      	bne.n	80076a4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	689b      	ldr	r3, [r3, #8]
 8007684:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007688:	d004      	beq.n	8007694 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	689b      	ldr	r3, [r3, #8]
 800768e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007692:	d107      	bne.n	80076a4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	681a      	ldr	r2, [r3, #0]
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80076a2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80076ac:	d10f      	bne.n	80076ce <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	681a      	ldr	r2, [r3, #0]
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80076bc:	601a      	str	r2, [r3, #0]
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	681a      	ldr	r2, [r3, #0]
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80076cc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	2201      	movs	r2, #1
 80076d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	2200      	movs	r2, #0
 80076da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80076de:	2303      	movs	r3, #3
 80076e0:	e017      	b.n	8007712 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80076e2:	697b      	ldr	r3, [r7, #20]
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d101      	bne.n	80076ec <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80076e8:	2300      	movs	r3, #0
 80076ea:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80076ec:	697b      	ldr	r3, [r7, #20]
 80076ee:	3b01      	subs	r3, #1
 80076f0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	689a      	ldr	r2, [r3, #8]
 80076f8:	68bb      	ldr	r3, [r7, #8]
 80076fa:	4013      	ands	r3, r2
 80076fc:	68ba      	ldr	r2, [r7, #8]
 80076fe:	429a      	cmp	r2, r3
 8007700:	bf0c      	ite	eq
 8007702:	2301      	moveq	r3, #1
 8007704:	2300      	movne	r3, #0
 8007706:	b2db      	uxtb	r3, r3
 8007708:	461a      	mov	r2, r3
 800770a:	79fb      	ldrb	r3, [r7, #7]
 800770c:	429a      	cmp	r2, r3
 800770e:	d19b      	bne.n	8007648 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007710:	2300      	movs	r3, #0
}
 8007712:	4618      	mov	r0, r3
 8007714:	3720      	adds	r7, #32
 8007716:	46bd      	mov	sp, r7
 8007718:	bd80      	pop	{r7, pc}
 800771a:	bf00      	nop
 800771c:	20000004 	.word	0x20000004

08007720 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007720:	b580      	push	{r7, lr}
 8007722:	b086      	sub	sp, #24
 8007724:	af02      	add	r7, sp, #8
 8007726:	60f8      	str	r0, [r7, #12]
 8007728:	60b9      	str	r1, [r7, #8]
 800772a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	685b      	ldr	r3, [r3, #4]
 8007730:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007734:	d111      	bne.n	800775a <SPI_EndRxTransaction+0x3a>
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	689b      	ldr	r3, [r3, #8]
 800773a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800773e:	d004      	beq.n	800774a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	689b      	ldr	r3, [r3, #8]
 8007744:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007748:	d107      	bne.n	800775a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	681a      	ldr	r2, [r3, #0]
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007758:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	685b      	ldr	r3, [r3, #4]
 800775e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007762:	d12a      	bne.n	80077ba <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	689b      	ldr	r3, [r3, #8]
 8007768:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800776c:	d012      	beq.n	8007794 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	9300      	str	r3, [sp, #0]
 8007772:	68bb      	ldr	r3, [r7, #8]
 8007774:	2200      	movs	r2, #0
 8007776:	2180      	movs	r1, #128	; 0x80
 8007778:	68f8      	ldr	r0, [r7, #12]
 800777a:	f7ff ff49 	bl	8007610 <SPI_WaitFlagStateUntilTimeout>
 800777e:	4603      	mov	r3, r0
 8007780:	2b00      	cmp	r3, #0
 8007782:	d02d      	beq.n	80077e0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007788:	f043 0220 	orr.w	r2, r3, #32
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007790:	2303      	movs	r3, #3
 8007792:	e026      	b.n	80077e2 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	9300      	str	r3, [sp, #0]
 8007798:	68bb      	ldr	r3, [r7, #8]
 800779a:	2200      	movs	r2, #0
 800779c:	2101      	movs	r1, #1
 800779e:	68f8      	ldr	r0, [r7, #12]
 80077a0:	f7ff ff36 	bl	8007610 <SPI_WaitFlagStateUntilTimeout>
 80077a4:	4603      	mov	r3, r0
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d01a      	beq.n	80077e0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077ae:	f043 0220 	orr.w	r2, r3, #32
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80077b6:	2303      	movs	r3, #3
 80077b8:	e013      	b.n	80077e2 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	9300      	str	r3, [sp, #0]
 80077be:	68bb      	ldr	r3, [r7, #8]
 80077c0:	2200      	movs	r2, #0
 80077c2:	2101      	movs	r1, #1
 80077c4:	68f8      	ldr	r0, [r7, #12]
 80077c6:	f7ff ff23 	bl	8007610 <SPI_WaitFlagStateUntilTimeout>
 80077ca:	4603      	mov	r3, r0
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d007      	beq.n	80077e0 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077d4:	f043 0220 	orr.w	r2, r3, #32
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80077dc:	2303      	movs	r3, #3
 80077de:	e000      	b.n	80077e2 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80077e0:	2300      	movs	r3, #0
}
 80077e2:	4618      	mov	r0, r3
 80077e4:	3710      	adds	r7, #16
 80077e6:	46bd      	mov	sp, r7
 80077e8:	bd80      	pop	{r7, pc}
	...

080077ec <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80077ec:	b580      	push	{r7, lr}
 80077ee:	b088      	sub	sp, #32
 80077f0:	af02      	add	r7, sp, #8
 80077f2:	60f8      	str	r0, [r7, #12]
 80077f4:	60b9      	str	r1, [r7, #8]
 80077f6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80077f8:	4b1b      	ldr	r3, [pc, #108]	; (8007868 <SPI_EndRxTxTransaction+0x7c>)
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	4a1b      	ldr	r2, [pc, #108]	; (800786c <SPI_EndRxTxTransaction+0x80>)
 80077fe:	fba2 2303 	umull	r2, r3, r2, r3
 8007802:	0d5b      	lsrs	r3, r3, #21
 8007804:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007808:	fb02 f303 	mul.w	r3, r2, r3
 800780c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	685b      	ldr	r3, [r3, #4]
 8007812:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007816:	d112      	bne.n	800783e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	9300      	str	r3, [sp, #0]
 800781c:	68bb      	ldr	r3, [r7, #8]
 800781e:	2200      	movs	r2, #0
 8007820:	2180      	movs	r1, #128	; 0x80
 8007822:	68f8      	ldr	r0, [r7, #12]
 8007824:	f7ff fef4 	bl	8007610 <SPI_WaitFlagStateUntilTimeout>
 8007828:	4603      	mov	r3, r0
 800782a:	2b00      	cmp	r3, #0
 800782c:	d016      	beq.n	800785c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007832:	f043 0220 	orr.w	r2, r3, #32
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800783a:	2303      	movs	r3, #3
 800783c:	e00f      	b.n	800785e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800783e:	697b      	ldr	r3, [r7, #20]
 8007840:	2b00      	cmp	r3, #0
 8007842:	d00a      	beq.n	800785a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8007844:	697b      	ldr	r3, [r7, #20]
 8007846:	3b01      	subs	r3, #1
 8007848:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	689b      	ldr	r3, [r3, #8]
 8007850:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007854:	2b80      	cmp	r3, #128	; 0x80
 8007856:	d0f2      	beq.n	800783e <SPI_EndRxTxTransaction+0x52>
 8007858:	e000      	b.n	800785c <SPI_EndRxTxTransaction+0x70>
        break;
 800785a:	bf00      	nop
  }

  return HAL_OK;
 800785c:	2300      	movs	r3, #0
}
 800785e:	4618      	mov	r0, r3
 8007860:	3718      	adds	r7, #24
 8007862:	46bd      	mov	sp, r7
 8007864:	bd80      	pop	{r7, pc}
 8007866:	bf00      	nop
 8007868:	20000004 	.word	0x20000004
 800786c:	165e9f81 	.word	0x165e9f81

08007870 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007870:	b580      	push	{r7, lr}
 8007872:	b082      	sub	sp, #8
 8007874:	af00      	add	r7, sp, #0
 8007876:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	2b00      	cmp	r3, #0
 800787c:	d101      	bne.n	8007882 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800787e:	2301      	movs	r3, #1
 8007880:	e041      	b.n	8007906 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007888:	b2db      	uxtb	r3, r3
 800788a:	2b00      	cmp	r3, #0
 800788c:	d106      	bne.n	800789c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	2200      	movs	r2, #0
 8007892:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007896:	6878      	ldr	r0, [r7, #4]
 8007898:	f7fd f936 	bl	8004b08 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	2202      	movs	r2, #2
 80078a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681a      	ldr	r2, [r3, #0]
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	3304      	adds	r3, #4
 80078ac:	4619      	mov	r1, r3
 80078ae:	4610      	mov	r0, r2
 80078b0:	f000 fa10 	bl	8007cd4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	2201      	movs	r2, #1
 80078b8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	2201      	movs	r2, #1
 80078c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	2201      	movs	r2, #1
 80078c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	2201      	movs	r2, #1
 80078d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	2201      	movs	r2, #1
 80078d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	2201      	movs	r2, #1
 80078e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	2201      	movs	r2, #1
 80078e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	2201      	movs	r2, #1
 80078f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	2201      	movs	r2, #1
 80078f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	2201      	movs	r2, #1
 8007900:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007904:	2300      	movs	r3, #0
}
 8007906:	4618      	mov	r0, r3
 8007908:	3708      	adds	r7, #8
 800790a:	46bd      	mov	sp, r7
 800790c:	bd80      	pop	{r7, pc}

0800790e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800790e:	b580      	push	{r7, lr}
 8007910:	b082      	sub	sp, #8
 8007912:	af00      	add	r7, sp, #0
 8007914:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	2b00      	cmp	r3, #0
 800791a:	d101      	bne.n	8007920 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800791c:	2301      	movs	r3, #1
 800791e:	e041      	b.n	80079a4 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007926:	b2db      	uxtb	r3, r3
 8007928:	2b00      	cmp	r3, #0
 800792a:	d106      	bne.n	800793a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	2200      	movs	r2, #0
 8007930:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007934:	6878      	ldr	r0, [r7, #4]
 8007936:	f000 f839 	bl	80079ac <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	2202      	movs	r2, #2
 800793e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681a      	ldr	r2, [r3, #0]
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	3304      	adds	r3, #4
 800794a:	4619      	mov	r1, r3
 800794c:	4610      	mov	r0, r2
 800794e:	f000 f9c1 	bl	8007cd4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	2201      	movs	r2, #1
 8007956:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	2201      	movs	r2, #1
 800795e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	2201      	movs	r2, #1
 8007966:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	2201      	movs	r2, #1
 800796e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	2201      	movs	r2, #1
 8007976:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	2201      	movs	r2, #1
 800797e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	2201      	movs	r2, #1
 8007986:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	2201      	movs	r2, #1
 800798e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	2201      	movs	r2, #1
 8007996:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	2201      	movs	r2, #1
 800799e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80079a2:	2300      	movs	r3, #0
}
 80079a4:	4618      	mov	r0, r3
 80079a6:	3708      	adds	r7, #8
 80079a8:	46bd      	mov	sp, r7
 80079aa:	bd80      	pop	{r7, pc}

080079ac <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80079ac:	b480      	push	{r7}
 80079ae:	b083      	sub	sp, #12
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80079b4:	bf00      	nop
 80079b6:	370c      	adds	r7, #12
 80079b8:	46bd      	mov	sp, r7
 80079ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079be:	4770      	bx	lr

080079c0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80079c0:	b580      	push	{r7, lr}
 80079c2:	b086      	sub	sp, #24
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	60f8      	str	r0, [r7, #12]
 80079c8:	60b9      	str	r1, [r7, #8]
 80079ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80079cc:	2300      	movs	r3, #0
 80079ce:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80079d6:	2b01      	cmp	r3, #1
 80079d8:	d101      	bne.n	80079de <HAL_TIM_PWM_ConfigChannel+0x1e>
 80079da:	2302      	movs	r3, #2
 80079dc:	e0ae      	b.n	8007b3c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	2201      	movs	r2, #1
 80079e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	2b0c      	cmp	r3, #12
 80079ea:	f200 809f 	bhi.w	8007b2c <HAL_TIM_PWM_ConfigChannel+0x16c>
 80079ee:	a201      	add	r2, pc, #4	; (adr r2, 80079f4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80079f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079f4:	08007a29 	.word	0x08007a29
 80079f8:	08007b2d 	.word	0x08007b2d
 80079fc:	08007b2d 	.word	0x08007b2d
 8007a00:	08007b2d 	.word	0x08007b2d
 8007a04:	08007a69 	.word	0x08007a69
 8007a08:	08007b2d 	.word	0x08007b2d
 8007a0c:	08007b2d 	.word	0x08007b2d
 8007a10:	08007b2d 	.word	0x08007b2d
 8007a14:	08007aab 	.word	0x08007aab
 8007a18:	08007b2d 	.word	0x08007b2d
 8007a1c:	08007b2d 	.word	0x08007b2d
 8007a20:	08007b2d 	.word	0x08007b2d
 8007a24:	08007aeb 	.word	0x08007aeb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	68b9      	ldr	r1, [r7, #8]
 8007a2e:	4618      	mov	r0, r3
 8007a30:	f000 f9f0 	bl	8007e14 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	699a      	ldr	r2, [r3, #24]
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	f042 0208 	orr.w	r2, r2, #8
 8007a42:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	699a      	ldr	r2, [r3, #24]
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	f022 0204 	bic.w	r2, r2, #4
 8007a52:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	6999      	ldr	r1, [r3, #24]
 8007a5a:	68bb      	ldr	r3, [r7, #8]
 8007a5c:	691a      	ldr	r2, [r3, #16]
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	430a      	orrs	r2, r1
 8007a64:	619a      	str	r2, [r3, #24]
      break;
 8007a66:	e064      	b.n	8007b32 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	68b9      	ldr	r1, [r7, #8]
 8007a6e:	4618      	mov	r0, r3
 8007a70:	f000 fa40 	bl	8007ef4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	699a      	ldr	r2, [r3, #24]
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007a82:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	699a      	ldr	r2, [r3, #24]
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007a92:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	6999      	ldr	r1, [r3, #24]
 8007a9a:	68bb      	ldr	r3, [r7, #8]
 8007a9c:	691b      	ldr	r3, [r3, #16]
 8007a9e:	021a      	lsls	r2, r3, #8
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	430a      	orrs	r2, r1
 8007aa6:	619a      	str	r2, [r3, #24]
      break;
 8007aa8:	e043      	b.n	8007b32 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	68b9      	ldr	r1, [r7, #8]
 8007ab0:	4618      	mov	r0, r3
 8007ab2:	f000 fa95 	bl	8007fe0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	69da      	ldr	r2, [r3, #28]
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	f042 0208 	orr.w	r2, r2, #8
 8007ac4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	69da      	ldr	r2, [r3, #28]
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	f022 0204 	bic.w	r2, r2, #4
 8007ad4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	69d9      	ldr	r1, [r3, #28]
 8007adc:	68bb      	ldr	r3, [r7, #8]
 8007ade:	691a      	ldr	r2, [r3, #16]
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	430a      	orrs	r2, r1
 8007ae6:	61da      	str	r2, [r3, #28]
      break;
 8007ae8:	e023      	b.n	8007b32 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	68b9      	ldr	r1, [r7, #8]
 8007af0:	4618      	mov	r0, r3
 8007af2:	f000 fae9 	bl	80080c8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	69da      	ldr	r2, [r3, #28]
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007b04:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	69da      	ldr	r2, [r3, #28]
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007b14:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	69d9      	ldr	r1, [r3, #28]
 8007b1c:	68bb      	ldr	r3, [r7, #8]
 8007b1e:	691b      	ldr	r3, [r3, #16]
 8007b20:	021a      	lsls	r2, r3, #8
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	430a      	orrs	r2, r1
 8007b28:	61da      	str	r2, [r3, #28]
      break;
 8007b2a:	e002      	b.n	8007b32 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007b2c:	2301      	movs	r3, #1
 8007b2e:	75fb      	strb	r3, [r7, #23]
      break;
 8007b30:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	2200      	movs	r2, #0
 8007b36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007b3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b3c:	4618      	mov	r0, r3
 8007b3e:	3718      	adds	r7, #24
 8007b40:	46bd      	mov	sp, r7
 8007b42:	bd80      	pop	{r7, pc}

08007b44 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007b44:	b580      	push	{r7, lr}
 8007b46:	b084      	sub	sp, #16
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	6078      	str	r0, [r7, #4]
 8007b4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007b4e:	2300      	movs	r3, #0
 8007b50:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007b58:	2b01      	cmp	r3, #1
 8007b5a:	d101      	bne.n	8007b60 <HAL_TIM_ConfigClockSource+0x1c>
 8007b5c:	2302      	movs	r3, #2
 8007b5e:	e0b4      	b.n	8007cca <HAL_TIM_ConfigClockSource+0x186>
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	2201      	movs	r2, #1
 8007b64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	2202      	movs	r2, #2
 8007b6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	689b      	ldr	r3, [r3, #8]
 8007b76:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007b78:	68bb      	ldr	r3, [r7, #8]
 8007b7a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007b7e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007b80:	68bb      	ldr	r3, [r7, #8]
 8007b82:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007b86:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	68ba      	ldr	r2, [r7, #8]
 8007b8e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007b90:	683b      	ldr	r3, [r7, #0]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007b98:	d03e      	beq.n	8007c18 <HAL_TIM_ConfigClockSource+0xd4>
 8007b9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007b9e:	f200 8087 	bhi.w	8007cb0 <HAL_TIM_ConfigClockSource+0x16c>
 8007ba2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ba6:	f000 8086 	beq.w	8007cb6 <HAL_TIM_ConfigClockSource+0x172>
 8007baa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007bae:	d87f      	bhi.n	8007cb0 <HAL_TIM_ConfigClockSource+0x16c>
 8007bb0:	2b70      	cmp	r3, #112	; 0x70
 8007bb2:	d01a      	beq.n	8007bea <HAL_TIM_ConfigClockSource+0xa6>
 8007bb4:	2b70      	cmp	r3, #112	; 0x70
 8007bb6:	d87b      	bhi.n	8007cb0 <HAL_TIM_ConfigClockSource+0x16c>
 8007bb8:	2b60      	cmp	r3, #96	; 0x60
 8007bba:	d050      	beq.n	8007c5e <HAL_TIM_ConfigClockSource+0x11a>
 8007bbc:	2b60      	cmp	r3, #96	; 0x60
 8007bbe:	d877      	bhi.n	8007cb0 <HAL_TIM_ConfigClockSource+0x16c>
 8007bc0:	2b50      	cmp	r3, #80	; 0x50
 8007bc2:	d03c      	beq.n	8007c3e <HAL_TIM_ConfigClockSource+0xfa>
 8007bc4:	2b50      	cmp	r3, #80	; 0x50
 8007bc6:	d873      	bhi.n	8007cb0 <HAL_TIM_ConfigClockSource+0x16c>
 8007bc8:	2b40      	cmp	r3, #64	; 0x40
 8007bca:	d058      	beq.n	8007c7e <HAL_TIM_ConfigClockSource+0x13a>
 8007bcc:	2b40      	cmp	r3, #64	; 0x40
 8007bce:	d86f      	bhi.n	8007cb0 <HAL_TIM_ConfigClockSource+0x16c>
 8007bd0:	2b30      	cmp	r3, #48	; 0x30
 8007bd2:	d064      	beq.n	8007c9e <HAL_TIM_ConfigClockSource+0x15a>
 8007bd4:	2b30      	cmp	r3, #48	; 0x30
 8007bd6:	d86b      	bhi.n	8007cb0 <HAL_TIM_ConfigClockSource+0x16c>
 8007bd8:	2b20      	cmp	r3, #32
 8007bda:	d060      	beq.n	8007c9e <HAL_TIM_ConfigClockSource+0x15a>
 8007bdc:	2b20      	cmp	r3, #32
 8007bde:	d867      	bhi.n	8007cb0 <HAL_TIM_ConfigClockSource+0x16c>
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d05c      	beq.n	8007c9e <HAL_TIM_ConfigClockSource+0x15a>
 8007be4:	2b10      	cmp	r3, #16
 8007be6:	d05a      	beq.n	8007c9e <HAL_TIM_ConfigClockSource+0x15a>
 8007be8:	e062      	b.n	8007cb0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	6818      	ldr	r0, [r3, #0]
 8007bee:	683b      	ldr	r3, [r7, #0]
 8007bf0:	6899      	ldr	r1, [r3, #8]
 8007bf2:	683b      	ldr	r3, [r7, #0]
 8007bf4:	685a      	ldr	r2, [r3, #4]
 8007bf6:	683b      	ldr	r3, [r7, #0]
 8007bf8:	68db      	ldr	r3, [r3, #12]
 8007bfa:	f000 fb35 	bl	8008268 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	689b      	ldr	r3, [r3, #8]
 8007c04:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007c06:	68bb      	ldr	r3, [r7, #8]
 8007c08:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007c0c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	68ba      	ldr	r2, [r7, #8]
 8007c14:	609a      	str	r2, [r3, #8]
      break;
 8007c16:	e04f      	b.n	8007cb8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	6818      	ldr	r0, [r3, #0]
 8007c1c:	683b      	ldr	r3, [r7, #0]
 8007c1e:	6899      	ldr	r1, [r3, #8]
 8007c20:	683b      	ldr	r3, [r7, #0]
 8007c22:	685a      	ldr	r2, [r3, #4]
 8007c24:	683b      	ldr	r3, [r7, #0]
 8007c26:	68db      	ldr	r3, [r3, #12]
 8007c28:	f000 fb1e 	bl	8008268 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	689a      	ldr	r2, [r3, #8]
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007c3a:	609a      	str	r2, [r3, #8]
      break;
 8007c3c:	e03c      	b.n	8007cb8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	6818      	ldr	r0, [r3, #0]
 8007c42:	683b      	ldr	r3, [r7, #0]
 8007c44:	6859      	ldr	r1, [r3, #4]
 8007c46:	683b      	ldr	r3, [r7, #0]
 8007c48:	68db      	ldr	r3, [r3, #12]
 8007c4a:	461a      	mov	r2, r3
 8007c4c:	f000 fa92 	bl	8008174 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	2150      	movs	r1, #80	; 0x50
 8007c56:	4618      	mov	r0, r3
 8007c58:	f000 faeb 	bl	8008232 <TIM_ITRx_SetConfig>
      break;
 8007c5c:	e02c      	b.n	8007cb8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	6818      	ldr	r0, [r3, #0]
 8007c62:	683b      	ldr	r3, [r7, #0]
 8007c64:	6859      	ldr	r1, [r3, #4]
 8007c66:	683b      	ldr	r3, [r7, #0]
 8007c68:	68db      	ldr	r3, [r3, #12]
 8007c6a:	461a      	mov	r2, r3
 8007c6c:	f000 fab1 	bl	80081d2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	2160      	movs	r1, #96	; 0x60
 8007c76:	4618      	mov	r0, r3
 8007c78:	f000 fadb 	bl	8008232 <TIM_ITRx_SetConfig>
      break;
 8007c7c:	e01c      	b.n	8007cb8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	6818      	ldr	r0, [r3, #0]
 8007c82:	683b      	ldr	r3, [r7, #0]
 8007c84:	6859      	ldr	r1, [r3, #4]
 8007c86:	683b      	ldr	r3, [r7, #0]
 8007c88:	68db      	ldr	r3, [r3, #12]
 8007c8a:	461a      	mov	r2, r3
 8007c8c:	f000 fa72 	bl	8008174 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	2140      	movs	r1, #64	; 0x40
 8007c96:	4618      	mov	r0, r3
 8007c98:	f000 facb 	bl	8008232 <TIM_ITRx_SetConfig>
      break;
 8007c9c:	e00c      	b.n	8007cb8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681a      	ldr	r2, [r3, #0]
 8007ca2:	683b      	ldr	r3, [r7, #0]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	4619      	mov	r1, r3
 8007ca8:	4610      	mov	r0, r2
 8007caa:	f000 fac2 	bl	8008232 <TIM_ITRx_SetConfig>
      break;
 8007cae:	e003      	b.n	8007cb8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007cb0:	2301      	movs	r3, #1
 8007cb2:	73fb      	strb	r3, [r7, #15]
      break;
 8007cb4:	e000      	b.n	8007cb8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007cb6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	2201      	movs	r2, #1
 8007cbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	2200      	movs	r2, #0
 8007cc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007cc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cca:	4618      	mov	r0, r3
 8007ccc:	3710      	adds	r7, #16
 8007cce:	46bd      	mov	sp, r7
 8007cd0:	bd80      	pop	{r7, pc}
	...

08007cd4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007cd4:	b480      	push	{r7}
 8007cd6:	b085      	sub	sp, #20
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	6078      	str	r0, [r7, #4]
 8007cdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	4a40      	ldr	r2, [pc, #256]	; (8007de8 <TIM_Base_SetConfig+0x114>)
 8007ce8:	4293      	cmp	r3, r2
 8007cea:	d013      	beq.n	8007d14 <TIM_Base_SetConfig+0x40>
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007cf2:	d00f      	beq.n	8007d14 <TIM_Base_SetConfig+0x40>
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	4a3d      	ldr	r2, [pc, #244]	; (8007dec <TIM_Base_SetConfig+0x118>)
 8007cf8:	4293      	cmp	r3, r2
 8007cfa:	d00b      	beq.n	8007d14 <TIM_Base_SetConfig+0x40>
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	4a3c      	ldr	r2, [pc, #240]	; (8007df0 <TIM_Base_SetConfig+0x11c>)
 8007d00:	4293      	cmp	r3, r2
 8007d02:	d007      	beq.n	8007d14 <TIM_Base_SetConfig+0x40>
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	4a3b      	ldr	r2, [pc, #236]	; (8007df4 <TIM_Base_SetConfig+0x120>)
 8007d08:	4293      	cmp	r3, r2
 8007d0a:	d003      	beq.n	8007d14 <TIM_Base_SetConfig+0x40>
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	4a3a      	ldr	r2, [pc, #232]	; (8007df8 <TIM_Base_SetConfig+0x124>)
 8007d10:	4293      	cmp	r3, r2
 8007d12:	d108      	bne.n	8007d26 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d1a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007d1c:	683b      	ldr	r3, [r7, #0]
 8007d1e:	685b      	ldr	r3, [r3, #4]
 8007d20:	68fa      	ldr	r2, [r7, #12]
 8007d22:	4313      	orrs	r3, r2
 8007d24:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	4a2f      	ldr	r2, [pc, #188]	; (8007de8 <TIM_Base_SetConfig+0x114>)
 8007d2a:	4293      	cmp	r3, r2
 8007d2c:	d02b      	beq.n	8007d86 <TIM_Base_SetConfig+0xb2>
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d34:	d027      	beq.n	8007d86 <TIM_Base_SetConfig+0xb2>
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	4a2c      	ldr	r2, [pc, #176]	; (8007dec <TIM_Base_SetConfig+0x118>)
 8007d3a:	4293      	cmp	r3, r2
 8007d3c:	d023      	beq.n	8007d86 <TIM_Base_SetConfig+0xb2>
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	4a2b      	ldr	r2, [pc, #172]	; (8007df0 <TIM_Base_SetConfig+0x11c>)
 8007d42:	4293      	cmp	r3, r2
 8007d44:	d01f      	beq.n	8007d86 <TIM_Base_SetConfig+0xb2>
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	4a2a      	ldr	r2, [pc, #168]	; (8007df4 <TIM_Base_SetConfig+0x120>)
 8007d4a:	4293      	cmp	r3, r2
 8007d4c:	d01b      	beq.n	8007d86 <TIM_Base_SetConfig+0xb2>
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	4a29      	ldr	r2, [pc, #164]	; (8007df8 <TIM_Base_SetConfig+0x124>)
 8007d52:	4293      	cmp	r3, r2
 8007d54:	d017      	beq.n	8007d86 <TIM_Base_SetConfig+0xb2>
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	4a28      	ldr	r2, [pc, #160]	; (8007dfc <TIM_Base_SetConfig+0x128>)
 8007d5a:	4293      	cmp	r3, r2
 8007d5c:	d013      	beq.n	8007d86 <TIM_Base_SetConfig+0xb2>
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	4a27      	ldr	r2, [pc, #156]	; (8007e00 <TIM_Base_SetConfig+0x12c>)
 8007d62:	4293      	cmp	r3, r2
 8007d64:	d00f      	beq.n	8007d86 <TIM_Base_SetConfig+0xb2>
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	4a26      	ldr	r2, [pc, #152]	; (8007e04 <TIM_Base_SetConfig+0x130>)
 8007d6a:	4293      	cmp	r3, r2
 8007d6c:	d00b      	beq.n	8007d86 <TIM_Base_SetConfig+0xb2>
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	4a25      	ldr	r2, [pc, #148]	; (8007e08 <TIM_Base_SetConfig+0x134>)
 8007d72:	4293      	cmp	r3, r2
 8007d74:	d007      	beq.n	8007d86 <TIM_Base_SetConfig+0xb2>
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	4a24      	ldr	r2, [pc, #144]	; (8007e0c <TIM_Base_SetConfig+0x138>)
 8007d7a:	4293      	cmp	r3, r2
 8007d7c:	d003      	beq.n	8007d86 <TIM_Base_SetConfig+0xb2>
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	4a23      	ldr	r2, [pc, #140]	; (8007e10 <TIM_Base_SetConfig+0x13c>)
 8007d82:	4293      	cmp	r3, r2
 8007d84:	d108      	bne.n	8007d98 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007d8c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007d8e:	683b      	ldr	r3, [r7, #0]
 8007d90:	68db      	ldr	r3, [r3, #12]
 8007d92:	68fa      	ldr	r2, [r7, #12]
 8007d94:	4313      	orrs	r3, r2
 8007d96:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007d9e:	683b      	ldr	r3, [r7, #0]
 8007da0:	695b      	ldr	r3, [r3, #20]
 8007da2:	4313      	orrs	r3, r2
 8007da4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	68fa      	ldr	r2, [r7, #12]
 8007daa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007dac:	683b      	ldr	r3, [r7, #0]
 8007dae:	689a      	ldr	r2, [r3, #8]
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007db4:	683b      	ldr	r3, [r7, #0]
 8007db6:	681a      	ldr	r2, [r3, #0]
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	4a0a      	ldr	r2, [pc, #40]	; (8007de8 <TIM_Base_SetConfig+0x114>)
 8007dc0:	4293      	cmp	r3, r2
 8007dc2:	d003      	beq.n	8007dcc <TIM_Base_SetConfig+0xf8>
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	4a0c      	ldr	r2, [pc, #48]	; (8007df8 <TIM_Base_SetConfig+0x124>)
 8007dc8:	4293      	cmp	r3, r2
 8007dca:	d103      	bne.n	8007dd4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007dcc:	683b      	ldr	r3, [r7, #0]
 8007dce:	691a      	ldr	r2, [r3, #16]
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	2201      	movs	r2, #1
 8007dd8:	615a      	str	r2, [r3, #20]
}
 8007dda:	bf00      	nop
 8007ddc:	3714      	adds	r7, #20
 8007dde:	46bd      	mov	sp, r7
 8007de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de4:	4770      	bx	lr
 8007de6:	bf00      	nop
 8007de8:	40010000 	.word	0x40010000
 8007dec:	40000400 	.word	0x40000400
 8007df0:	40000800 	.word	0x40000800
 8007df4:	40000c00 	.word	0x40000c00
 8007df8:	40010400 	.word	0x40010400
 8007dfc:	40014000 	.word	0x40014000
 8007e00:	40014400 	.word	0x40014400
 8007e04:	40014800 	.word	0x40014800
 8007e08:	40001800 	.word	0x40001800
 8007e0c:	40001c00 	.word	0x40001c00
 8007e10:	40002000 	.word	0x40002000

08007e14 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007e14:	b480      	push	{r7}
 8007e16:	b087      	sub	sp, #28
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	6078      	str	r0, [r7, #4]
 8007e1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	6a1b      	ldr	r3, [r3, #32]
 8007e22:	f023 0201 	bic.w	r2, r3, #1
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	6a1b      	ldr	r3, [r3, #32]
 8007e2e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	685b      	ldr	r3, [r3, #4]
 8007e34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	699b      	ldr	r3, [r3, #24]
 8007e3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	f023 0303 	bic.w	r3, r3, #3
 8007e4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007e4c:	683b      	ldr	r3, [r7, #0]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	68fa      	ldr	r2, [r7, #12]
 8007e52:	4313      	orrs	r3, r2
 8007e54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007e56:	697b      	ldr	r3, [r7, #20]
 8007e58:	f023 0302 	bic.w	r3, r3, #2
 8007e5c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007e5e:	683b      	ldr	r3, [r7, #0]
 8007e60:	689b      	ldr	r3, [r3, #8]
 8007e62:	697a      	ldr	r2, [r7, #20]
 8007e64:	4313      	orrs	r3, r2
 8007e66:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	4a20      	ldr	r2, [pc, #128]	; (8007eec <TIM_OC1_SetConfig+0xd8>)
 8007e6c:	4293      	cmp	r3, r2
 8007e6e:	d003      	beq.n	8007e78 <TIM_OC1_SetConfig+0x64>
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	4a1f      	ldr	r2, [pc, #124]	; (8007ef0 <TIM_OC1_SetConfig+0xdc>)
 8007e74:	4293      	cmp	r3, r2
 8007e76:	d10c      	bne.n	8007e92 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007e78:	697b      	ldr	r3, [r7, #20]
 8007e7a:	f023 0308 	bic.w	r3, r3, #8
 8007e7e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007e80:	683b      	ldr	r3, [r7, #0]
 8007e82:	68db      	ldr	r3, [r3, #12]
 8007e84:	697a      	ldr	r2, [r7, #20]
 8007e86:	4313      	orrs	r3, r2
 8007e88:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007e8a:	697b      	ldr	r3, [r7, #20]
 8007e8c:	f023 0304 	bic.w	r3, r3, #4
 8007e90:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	4a15      	ldr	r2, [pc, #84]	; (8007eec <TIM_OC1_SetConfig+0xd8>)
 8007e96:	4293      	cmp	r3, r2
 8007e98:	d003      	beq.n	8007ea2 <TIM_OC1_SetConfig+0x8e>
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	4a14      	ldr	r2, [pc, #80]	; (8007ef0 <TIM_OC1_SetConfig+0xdc>)
 8007e9e:	4293      	cmp	r3, r2
 8007ea0:	d111      	bne.n	8007ec6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007ea2:	693b      	ldr	r3, [r7, #16]
 8007ea4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007ea8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007eaa:	693b      	ldr	r3, [r7, #16]
 8007eac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007eb0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007eb2:	683b      	ldr	r3, [r7, #0]
 8007eb4:	695b      	ldr	r3, [r3, #20]
 8007eb6:	693a      	ldr	r2, [r7, #16]
 8007eb8:	4313      	orrs	r3, r2
 8007eba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007ebc:	683b      	ldr	r3, [r7, #0]
 8007ebe:	699b      	ldr	r3, [r3, #24]
 8007ec0:	693a      	ldr	r2, [r7, #16]
 8007ec2:	4313      	orrs	r3, r2
 8007ec4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	693a      	ldr	r2, [r7, #16]
 8007eca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	68fa      	ldr	r2, [r7, #12]
 8007ed0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007ed2:	683b      	ldr	r3, [r7, #0]
 8007ed4:	685a      	ldr	r2, [r3, #4]
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	697a      	ldr	r2, [r7, #20]
 8007ede:	621a      	str	r2, [r3, #32]
}
 8007ee0:	bf00      	nop
 8007ee2:	371c      	adds	r7, #28
 8007ee4:	46bd      	mov	sp, r7
 8007ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eea:	4770      	bx	lr
 8007eec:	40010000 	.word	0x40010000
 8007ef0:	40010400 	.word	0x40010400

08007ef4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007ef4:	b480      	push	{r7}
 8007ef6:	b087      	sub	sp, #28
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	6078      	str	r0, [r7, #4]
 8007efc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	6a1b      	ldr	r3, [r3, #32]
 8007f02:	f023 0210 	bic.w	r2, r3, #16
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	6a1b      	ldr	r3, [r3, #32]
 8007f0e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	685b      	ldr	r3, [r3, #4]
 8007f14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	699b      	ldr	r3, [r3, #24]
 8007f1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007f22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007f2a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007f2c:	683b      	ldr	r3, [r7, #0]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	021b      	lsls	r3, r3, #8
 8007f32:	68fa      	ldr	r2, [r7, #12]
 8007f34:	4313      	orrs	r3, r2
 8007f36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007f38:	697b      	ldr	r3, [r7, #20]
 8007f3a:	f023 0320 	bic.w	r3, r3, #32
 8007f3e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007f40:	683b      	ldr	r3, [r7, #0]
 8007f42:	689b      	ldr	r3, [r3, #8]
 8007f44:	011b      	lsls	r3, r3, #4
 8007f46:	697a      	ldr	r2, [r7, #20]
 8007f48:	4313      	orrs	r3, r2
 8007f4a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	4a22      	ldr	r2, [pc, #136]	; (8007fd8 <TIM_OC2_SetConfig+0xe4>)
 8007f50:	4293      	cmp	r3, r2
 8007f52:	d003      	beq.n	8007f5c <TIM_OC2_SetConfig+0x68>
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	4a21      	ldr	r2, [pc, #132]	; (8007fdc <TIM_OC2_SetConfig+0xe8>)
 8007f58:	4293      	cmp	r3, r2
 8007f5a:	d10d      	bne.n	8007f78 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007f5c:	697b      	ldr	r3, [r7, #20]
 8007f5e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007f62:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007f64:	683b      	ldr	r3, [r7, #0]
 8007f66:	68db      	ldr	r3, [r3, #12]
 8007f68:	011b      	lsls	r3, r3, #4
 8007f6a:	697a      	ldr	r2, [r7, #20]
 8007f6c:	4313      	orrs	r3, r2
 8007f6e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007f70:	697b      	ldr	r3, [r7, #20]
 8007f72:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007f76:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	4a17      	ldr	r2, [pc, #92]	; (8007fd8 <TIM_OC2_SetConfig+0xe4>)
 8007f7c:	4293      	cmp	r3, r2
 8007f7e:	d003      	beq.n	8007f88 <TIM_OC2_SetConfig+0x94>
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	4a16      	ldr	r2, [pc, #88]	; (8007fdc <TIM_OC2_SetConfig+0xe8>)
 8007f84:	4293      	cmp	r3, r2
 8007f86:	d113      	bne.n	8007fb0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007f88:	693b      	ldr	r3, [r7, #16]
 8007f8a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007f8e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007f90:	693b      	ldr	r3, [r7, #16]
 8007f92:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007f96:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007f98:	683b      	ldr	r3, [r7, #0]
 8007f9a:	695b      	ldr	r3, [r3, #20]
 8007f9c:	009b      	lsls	r3, r3, #2
 8007f9e:	693a      	ldr	r2, [r7, #16]
 8007fa0:	4313      	orrs	r3, r2
 8007fa2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007fa4:	683b      	ldr	r3, [r7, #0]
 8007fa6:	699b      	ldr	r3, [r3, #24]
 8007fa8:	009b      	lsls	r3, r3, #2
 8007faa:	693a      	ldr	r2, [r7, #16]
 8007fac:	4313      	orrs	r3, r2
 8007fae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	693a      	ldr	r2, [r7, #16]
 8007fb4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	68fa      	ldr	r2, [r7, #12]
 8007fba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007fbc:	683b      	ldr	r3, [r7, #0]
 8007fbe:	685a      	ldr	r2, [r3, #4]
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	697a      	ldr	r2, [r7, #20]
 8007fc8:	621a      	str	r2, [r3, #32]
}
 8007fca:	bf00      	nop
 8007fcc:	371c      	adds	r7, #28
 8007fce:	46bd      	mov	sp, r7
 8007fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd4:	4770      	bx	lr
 8007fd6:	bf00      	nop
 8007fd8:	40010000 	.word	0x40010000
 8007fdc:	40010400 	.word	0x40010400

08007fe0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007fe0:	b480      	push	{r7}
 8007fe2:	b087      	sub	sp, #28
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	6078      	str	r0, [r7, #4]
 8007fe8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	6a1b      	ldr	r3, [r3, #32]
 8007fee:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	6a1b      	ldr	r3, [r3, #32]
 8007ffa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	685b      	ldr	r3, [r3, #4]
 8008000:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	69db      	ldr	r3, [r3, #28]
 8008006:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800800e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	f023 0303 	bic.w	r3, r3, #3
 8008016:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008018:	683b      	ldr	r3, [r7, #0]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	68fa      	ldr	r2, [r7, #12]
 800801e:	4313      	orrs	r3, r2
 8008020:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008022:	697b      	ldr	r3, [r7, #20]
 8008024:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008028:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800802a:	683b      	ldr	r3, [r7, #0]
 800802c:	689b      	ldr	r3, [r3, #8]
 800802e:	021b      	lsls	r3, r3, #8
 8008030:	697a      	ldr	r2, [r7, #20]
 8008032:	4313      	orrs	r3, r2
 8008034:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	4a21      	ldr	r2, [pc, #132]	; (80080c0 <TIM_OC3_SetConfig+0xe0>)
 800803a:	4293      	cmp	r3, r2
 800803c:	d003      	beq.n	8008046 <TIM_OC3_SetConfig+0x66>
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	4a20      	ldr	r2, [pc, #128]	; (80080c4 <TIM_OC3_SetConfig+0xe4>)
 8008042:	4293      	cmp	r3, r2
 8008044:	d10d      	bne.n	8008062 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008046:	697b      	ldr	r3, [r7, #20]
 8008048:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800804c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800804e:	683b      	ldr	r3, [r7, #0]
 8008050:	68db      	ldr	r3, [r3, #12]
 8008052:	021b      	lsls	r3, r3, #8
 8008054:	697a      	ldr	r2, [r7, #20]
 8008056:	4313      	orrs	r3, r2
 8008058:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800805a:	697b      	ldr	r3, [r7, #20]
 800805c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008060:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	4a16      	ldr	r2, [pc, #88]	; (80080c0 <TIM_OC3_SetConfig+0xe0>)
 8008066:	4293      	cmp	r3, r2
 8008068:	d003      	beq.n	8008072 <TIM_OC3_SetConfig+0x92>
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	4a15      	ldr	r2, [pc, #84]	; (80080c4 <TIM_OC3_SetConfig+0xe4>)
 800806e:	4293      	cmp	r3, r2
 8008070:	d113      	bne.n	800809a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008072:	693b      	ldr	r3, [r7, #16]
 8008074:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008078:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800807a:	693b      	ldr	r3, [r7, #16]
 800807c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008080:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008082:	683b      	ldr	r3, [r7, #0]
 8008084:	695b      	ldr	r3, [r3, #20]
 8008086:	011b      	lsls	r3, r3, #4
 8008088:	693a      	ldr	r2, [r7, #16]
 800808a:	4313      	orrs	r3, r2
 800808c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800808e:	683b      	ldr	r3, [r7, #0]
 8008090:	699b      	ldr	r3, [r3, #24]
 8008092:	011b      	lsls	r3, r3, #4
 8008094:	693a      	ldr	r2, [r7, #16]
 8008096:	4313      	orrs	r3, r2
 8008098:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	693a      	ldr	r2, [r7, #16]
 800809e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	68fa      	ldr	r2, [r7, #12]
 80080a4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80080a6:	683b      	ldr	r3, [r7, #0]
 80080a8:	685a      	ldr	r2, [r3, #4]
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	697a      	ldr	r2, [r7, #20]
 80080b2:	621a      	str	r2, [r3, #32]
}
 80080b4:	bf00      	nop
 80080b6:	371c      	adds	r7, #28
 80080b8:	46bd      	mov	sp, r7
 80080ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080be:	4770      	bx	lr
 80080c0:	40010000 	.word	0x40010000
 80080c4:	40010400 	.word	0x40010400

080080c8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80080c8:	b480      	push	{r7}
 80080ca:	b087      	sub	sp, #28
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	6078      	str	r0, [r7, #4]
 80080d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	6a1b      	ldr	r3, [r3, #32]
 80080d6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	6a1b      	ldr	r3, [r3, #32]
 80080e2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	685b      	ldr	r3, [r3, #4]
 80080e8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	69db      	ldr	r3, [r3, #28]
 80080ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80080f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80080fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008100:	683b      	ldr	r3, [r7, #0]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	021b      	lsls	r3, r3, #8
 8008106:	68fa      	ldr	r2, [r7, #12]
 8008108:	4313      	orrs	r3, r2
 800810a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800810c:	693b      	ldr	r3, [r7, #16]
 800810e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008112:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008114:	683b      	ldr	r3, [r7, #0]
 8008116:	689b      	ldr	r3, [r3, #8]
 8008118:	031b      	lsls	r3, r3, #12
 800811a:	693a      	ldr	r2, [r7, #16]
 800811c:	4313      	orrs	r3, r2
 800811e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	4a12      	ldr	r2, [pc, #72]	; (800816c <TIM_OC4_SetConfig+0xa4>)
 8008124:	4293      	cmp	r3, r2
 8008126:	d003      	beq.n	8008130 <TIM_OC4_SetConfig+0x68>
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	4a11      	ldr	r2, [pc, #68]	; (8008170 <TIM_OC4_SetConfig+0xa8>)
 800812c:	4293      	cmp	r3, r2
 800812e:	d109      	bne.n	8008144 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008130:	697b      	ldr	r3, [r7, #20]
 8008132:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008136:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008138:	683b      	ldr	r3, [r7, #0]
 800813a:	695b      	ldr	r3, [r3, #20]
 800813c:	019b      	lsls	r3, r3, #6
 800813e:	697a      	ldr	r2, [r7, #20]
 8008140:	4313      	orrs	r3, r2
 8008142:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	697a      	ldr	r2, [r7, #20]
 8008148:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	68fa      	ldr	r2, [r7, #12]
 800814e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008150:	683b      	ldr	r3, [r7, #0]
 8008152:	685a      	ldr	r2, [r3, #4]
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	693a      	ldr	r2, [r7, #16]
 800815c:	621a      	str	r2, [r3, #32]
}
 800815e:	bf00      	nop
 8008160:	371c      	adds	r7, #28
 8008162:	46bd      	mov	sp, r7
 8008164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008168:	4770      	bx	lr
 800816a:	bf00      	nop
 800816c:	40010000 	.word	0x40010000
 8008170:	40010400 	.word	0x40010400

08008174 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008174:	b480      	push	{r7}
 8008176:	b087      	sub	sp, #28
 8008178:	af00      	add	r7, sp, #0
 800817a:	60f8      	str	r0, [r7, #12]
 800817c:	60b9      	str	r1, [r7, #8]
 800817e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	6a1b      	ldr	r3, [r3, #32]
 8008184:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	6a1b      	ldr	r3, [r3, #32]
 800818a:	f023 0201 	bic.w	r2, r3, #1
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	699b      	ldr	r3, [r3, #24]
 8008196:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008198:	693b      	ldr	r3, [r7, #16]
 800819a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800819e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	011b      	lsls	r3, r3, #4
 80081a4:	693a      	ldr	r2, [r7, #16]
 80081a6:	4313      	orrs	r3, r2
 80081a8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80081aa:	697b      	ldr	r3, [r7, #20]
 80081ac:	f023 030a 	bic.w	r3, r3, #10
 80081b0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80081b2:	697a      	ldr	r2, [r7, #20]
 80081b4:	68bb      	ldr	r3, [r7, #8]
 80081b6:	4313      	orrs	r3, r2
 80081b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	693a      	ldr	r2, [r7, #16]
 80081be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	697a      	ldr	r2, [r7, #20]
 80081c4:	621a      	str	r2, [r3, #32]
}
 80081c6:	bf00      	nop
 80081c8:	371c      	adds	r7, #28
 80081ca:	46bd      	mov	sp, r7
 80081cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d0:	4770      	bx	lr

080081d2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80081d2:	b480      	push	{r7}
 80081d4:	b087      	sub	sp, #28
 80081d6:	af00      	add	r7, sp, #0
 80081d8:	60f8      	str	r0, [r7, #12]
 80081da:	60b9      	str	r1, [r7, #8]
 80081dc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	6a1b      	ldr	r3, [r3, #32]
 80081e2:	f023 0210 	bic.w	r2, r3, #16
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	699b      	ldr	r3, [r3, #24]
 80081ee:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	6a1b      	ldr	r3, [r3, #32]
 80081f4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80081f6:	697b      	ldr	r3, [r7, #20]
 80081f8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80081fc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	031b      	lsls	r3, r3, #12
 8008202:	697a      	ldr	r2, [r7, #20]
 8008204:	4313      	orrs	r3, r2
 8008206:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008208:	693b      	ldr	r3, [r7, #16]
 800820a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800820e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008210:	68bb      	ldr	r3, [r7, #8]
 8008212:	011b      	lsls	r3, r3, #4
 8008214:	693a      	ldr	r2, [r7, #16]
 8008216:	4313      	orrs	r3, r2
 8008218:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	697a      	ldr	r2, [r7, #20]
 800821e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	693a      	ldr	r2, [r7, #16]
 8008224:	621a      	str	r2, [r3, #32]
}
 8008226:	bf00      	nop
 8008228:	371c      	adds	r7, #28
 800822a:	46bd      	mov	sp, r7
 800822c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008230:	4770      	bx	lr

08008232 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008232:	b480      	push	{r7}
 8008234:	b085      	sub	sp, #20
 8008236:	af00      	add	r7, sp, #0
 8008238:	6078      	str	r0, [r7, #4]
 800823a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	689b      	ldr	r3, [r3, #8]
 8008240:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008248:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800824a:	683a      	ldr	r2, [r7, #0]
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	4313      	orrs	r3, r2
 8008250:	f043 0307 	orr.w	r3, r3, #7
 8008254:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	68fa      	ldr	r2, [r7, #12]
 800825a:	609a      	str	r2, [r3, #8]
}
 800825c:	bf00      	nop
 800825e:	3714      	adds	r7, #20
 8008260:	46bd      	mov	sp, r7
 8008262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008266:	4770      	bx	lr

08008268 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008268:	b480      	push	{r7}
 800826a:	b087      	sub	sp, #28
 800826c:	af00      	add	r7, sp, #0
 800826e:	60f8      	str	r0, [r7, #12]
 8008270:	60b9      	str	r1, [r7, #8]
 8008272:	607a      	str	r2, [r7, #4]
 8008274:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	689b      	ldr	r3, [r3, #8]
 800827a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800827c:	697b      	ldr	r3, [r7, #20]
 800827e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008282:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008284:	683b      	ldr	r3, [r7, #0]
 8008286:	021a      	lsls	r2, r3, #8
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	431a      	orrs	r2, r3
 800828c:	68bb      	ldr	r3, [r7, #8]
 800828e:	4313      	orrs	r3, r2
 8008290:	697a      	ldr	r2, [r7, #20]
 8008292:	4313      	orrs	r3, r2
 8008294:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	697a      	ldr	r2, [r7, #20]
 800829a:	609a      	str	r2, [r3, #8]
}
 800829c:	bf00      	nop
 800829e:	371c      	adds	r7, #28
 80082a0:	46bd      	mov	sp, r7
 80082a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a6:	4770      	bx	lr

080082a8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80082a8:	b480      	push	{r7}
 80082aa:	b085      	sub	sp, #20
 80082ac:	af00      	add	r7, sp, #0
 80082ae:	6078      	str	r0, [r7, #4]
 80082b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80082b8:	2b01      	cmp	r3, #1
 80082ba:	d101      	bne.n	80082c0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80082bc:	2302      	movs	r3, #2
 80082be:	e05a      	b.n	8008376 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	2201      	movs	r2, #1
 80082c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	2202      	movs	r2, #2
 80082cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	685b      	ldr	r3, [r3, #4]
 80082d6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	689b      	ldr	r3, [r3, #8]
 80082de:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80082e6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80082e8:	683b      	ldr	r3, [r7, #0]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	68fa      	ldr	r2, [r7, #12]
 80082ee:	4313      	orrs	r3, r2
 80082f0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	68fa      	ldr	r2, [r7, #12]
 80082f8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	4a21      	ldr	r2, [pc, #132]	; (8008384 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008300:	4293      	cmp	r3, r2
 8008302:	d022      	beq.n	800834a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800830c:	d01d      	beq.n	800834a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	4a1d      	ldr	r2, [pc, #116]	; (8008388 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008314:	4293      	cmp	r3, r2
 8008316:	d018      	beq.n	800834a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	4a1b      	ldr	r2, [pc, #108]	; (800838c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800831e:	4293      	cmp	r3, r2
 8008320:	d013      	beq.n	800834a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	4a1a      	ldr	r2, [pc, #104]	; (8008390 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008328:	4293      	cmp	r3, r2
 800832a:	d00e      	beq.n	800834a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	4a18      	ldr	r2, [pc, #96]	; (8008394 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008332:	4293      	cmp	r3, r2
 8008334:	d009      	beq.n	800834a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	4a17      	ldr	r2, [pc, #92]	; (8008398 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800833c:	4293      	cmp	r3, r2
 800833e:	d004      	beq.n	800834a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	4a15      	ldr	r2, [pc, #84]	; (800839c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008346:	4293      	cmp	r3, r2
 8008348:	d10c      	bne.n	8008364 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800834a:	68bb      	ldr	r3, [r7, #8]
 800834c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008350:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008352:	683b      	ldr	r3, [r7, #0]
 8008354:	685b      	ldr	r3, [r3, #4]
 8008356:	68ba      	ldr	r2, [r7, #8]
 8008358:	4313      	orrs	r3, r2
 800835a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	68ba      	ldr	r2, [r7, #8]
 8008362:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	2201      	movs	r2, #1
 8008368:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	2200      	movs	r2, #0
 8008370:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008374:	2300      	movs	r3, #0
}
 8008376:	4618      	mov	r0, r3
 8008378:	3714      	adds	r7, #20
 800837a:	46bd      	mov	sp, r7
 800837c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008380:	4770      	bx	lr
 8008382:	bf00      	nop
 8008384:	40010000 	.word	0x40010000
 8008388:	40000400 	.word	0x40000400
 800838c:	40000800 	.word	0x40000800
 8008390:	40000c00 	.word	0x40000c00
 8008394:	40010400 	.word	0x40010400
 8008398:	40014000 	.word	0x40014000
 800839c:	40001800 	.word	0x40001800

080083a0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80083a0:	b580      	push	{r7, lr}
 80083a2:	b082      	sub	sp, #8
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d101      	bne.n	80083b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80083ae:	2301      	movs	r3, #1
 80083b0:	e03f      	b.n	8008432 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80083b8:	b2db      	uxtb	r3, r3
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d106      	bne.n	80083cc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	2200      	movs	r2, #0
 80083c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80083c6:	6878      	ldr	r0, [r7, #4]
 80083c8:	f7fc fcd4 	bl	8004d74 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	2224      	movs	r2, #36	; 0x24
 80083d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	68da      	ldr	r2, [r3, #12]
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80083e2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80083e4:	6878      	ldr	r0, [r7, #4]
 80083e6:	f000 ff49 	bl	800927c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	691a      	ldr	r2, [r3, #16]
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80083f8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	695a      	ldr	r2, [r3, #20]
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008408:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	68da      	ldr	r2, [r3, #12]
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008418:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	2200      	movs	r2, #0
 800841e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	2220      	movs	r2, #32
 8008424:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	2220      	movs	r2, #32
 800842c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008430:	2300      	movs	r3, #0
}
 8008432:	4618      	mov	r0, r3
 8008434:	3708      	adds	r7, #8
 8008436:	46bd      	mov	sp, r7
 8008438:	bd80      	pop	{r7, pc}
	...

0800843c <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800843c:	b580      	push	{r7, lr}
 800843e:	b08c      	sub	sp, #48	; 0x30
 8008440:	af00      	add	r7, sp, #0
 8008442:	60f8      	str	r0, [r7, #12]
 8008444:	60b9      	str	r1, [r7, #8]
 8008446:	4613      	mov	r3, r2
 8008448:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008450:	b2db      	uxtb	r3, r3
 8008452:	2b20      	cmp	r3, #32
 8008454:	d165      	bne.n	8008522 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8008456:	68bb      	ldr	r3, [r7, #8]
 8008458:	2b00      	cmp	r3, #0
 800845a:	d002      	beq.n	8008462 <HAL_UART_Transmit_DMA+0x26>
 800845c:	88fb      	ldrh	r3, [r7, #6]
 800845e:	2b00      	cmp	r3, #0
 8008460:	d101      	bne.n	8008466 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8008462:	2301      	movs	r3, #1
 8008464:	e05e      	b.n	8008524 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800846c:	2b01      	cmp	r3, #1
 800846e:	d101      	bne.n	8008474 <HAL_UART_Transmit_DMA+0x38>
 8008470:	2302      	movs	r3, #2
 8008472:	e057      	b.n	8008524 <HAL_UART_Transmit_DMA+0xe8>
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	2201      	movs	r2, #1
 8008478:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800847c:	68ba      	ldr	r2, [r7, #8]
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	88fa      	ldrh	r2, [r7, #6]
 8008486:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	88fa      	ldrh	r2, [r7, #6]
 800848c:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	2200      	movs	r2, #0
 8008492:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	2221      	movs	r2, #33	; 0x21
 8008498:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80084a0:	4a22      	ldr	r2, [pc, #136]	; (800852c <HAL_UART_Transmit_DMA+0xf0>)
 80084a2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80084a8:	4a21      	ldr	r2, [pc, #132]	; (8008530 <HAL_UART_Transmit_DMA+0xf4>)
 80084aa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80084b0:	4a20      	ldr	r2, [pc, #128]	; (8008534 <HAL_UART_Transmit_DMA+0xf8>)
 80084b2:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80084b8:	2200      	movs	r2, #0
 80084ba:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 80084bc:	f107 0308 	add.w	r3, r7, #8
 80084c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80084c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084c8:	6819      	ldr	r1, [r3, #0]
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	3304      	adds	r3, #4
 80084d0:	461a      	mov	r2, r3
 80084d2:	88fb      	ldrh	r3, [r7, #6]
 80084d4:	f7fd fa8c 	bl	80059f0 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80084e0:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	2200      	movs	r2, #0
 80084e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	3314      	adds	r3, #20
 80084f0:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084f2:	69bb      	ldr	r3, [r7, #24]
 80084f4:	e853 3f00 	ldrex	r3, [r3]
 80084f8:	617b      	str	r3, [r7, #20]
   return(result);
 80084fa:	697b      	ldr	r3, [r7, #20]
 80084fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008500:	62bb      	str	r3, [r7, #40]	; 0x28
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	3314      	adds	r3, #20
 8008508:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800850a:	627a      	str	r2, [r7, #36]	; 0x24
 800850c:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800850e:	6a39      	ldr	r1, [r7, #32]
 8008510:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008512:	e841 2300 	strex	r3, r2, [r1]
 8008516:	61fb      	str	r3, [r7, #28]
   return(result);
 8008518:	69fb      	ldr	r3, [r7, #28]
 800851a:	2b00      	cmp	r3, #0
 800851c:	d1e5      	bne.n	80084ea <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 800851e:	2300      	movs	r3, #0
 8008520:	e000      	b.n	8008524 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8008522:	2302      	movs	r3, #2
  }
}
 8008524:	4618      	mov	r0, r3
 8008526:	3730      	adds	r7, #48	; 0x30
 8008528:	46bd      	mov	sp, r7
 800852a:	bd80      	pop	{r7, pc}
 800852c:	08008b1d 	.word	0x08008b1d
 8008530:	08008bb7 	.word	0x08008bb7
 8008534:	08008d2f 	.word	0x08008d2f

08008538 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008538:	b580      	push	{r7, lr}
 800853a:	b084      	sub	sp, #16
 800853c:	af00      	add	r7, sp, #0
 800853e:	60f8      	str	r0, [r7, #12]
 8008540:	60b9      	str	r1, [r7, #8]
 8008542:	4613      	mov	r3, r2
 8008544:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800854c:	b2db      	uxtb	r3, r3
 800854e:	2b20      	cmp	r3, #32
 8008550:	d11d      	bne.n	800858e <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8008552:	68bb      	ldr	r3, [r7, #8]
 8008554:	2b00      	cmp	r3, #0
 8008556:	d002      	beq.n	800855e <HAL_UART_Receive_DMA+0x26>
 8008558:	88fb      	ldrh	r3, [r7, #6]
 800855a:	2b00      	cmp	r3, #0
 800855c:	d101      	bne.n	8008562 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800855e:	2301      	movs	r3, #1
 8008560:	e016      	b.n	8008590 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008568:	2b01      	cmp	r3, #1
 800856a:	d101      	bne.n	8008570 <HAL_UART_Receive_DMA+0x38>
 800856c:	2302      	movs	r3, #2
 800856e:	e00f      	b.n	8008590 <HAL_UART_Receive_DMA+0x58>
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	2201      	movs	r2, #1
 8008574:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	2200      	movs	r2, #0
 800857c:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800857e:	88fb      	ldrh	r3, [r7, #6]
 8008580:	461a      	mov	r2, r3
 8008582:	68b9      	ldr	r1, [r7, #8]
 8008584:	68f8      	ldr	r0, [r7, #12]
 8008586:	f000 fc1d 	bl	8008dc4 <UART_Start_Receive_DMA>
 800858a:	4603      	mov	r3, r0
 800858c:	e000      	b.n	8008590 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 800858e:	2302      	movs	r3, #2
  }
}
 8008590:	4618      	mov	r0, r3
 8008592:	3710      	adds	r7, #16
 8008594:	46bd      	mov	sp, r7
 8008596:	bd80      	pop	{r7, pc}

08008598 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008598:	b580      	push	{r7, lr}
 800859a:	b0ba      	sub	sp, #232	; 0xe8
 800859c:	af00      	add	r7, sp, #0
 800859e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	68db      	ldr	r3, [r3, #12]
 80085b0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	695b      	ldr	r3, [r3, #20]
 80085ba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80085be:	2300      	movs	r3, #0
 80085c0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80085c4:	2300      	movs	r3, #0
 80085c6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80085ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80085ce:	f003 030f 	and.w	r3, r3, #15
 80085d2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80085d6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d10f      	bne.n	80085fe <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80085de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80085e2:	f003 0320 	and.w	r3, r3, #32
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d009      	beq.n	80085fe <HAL_UART_IRQHandler+0x66>
 80085ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80085ee:	f003 0320 	and.w	r3, r3, #32
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d003      	beq.n	80085fe <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80085f6:	6878      	ldr	r0, [r7, #4]
 80085f8:	f000 fd85 	bl	8009106 <UART_Receive_IT>
      return;
 80085fc:	e256      	b.n	8008aac <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80085fe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008602:	2b00      	cmp	r3, #0
 8008604:	f000 80de 	beq.w	80087c4 <HAL_UART_IRQHandler+0x22c>
 8008608:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800860c:	f003 0301 	and.w	r3, r3, #1
 8008610:	2b00      	cmp	r3, #0
 8008612:	d106      	bne.n	8008622 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008614:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008618:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800861c:	2b00      	cmp	r3, #0
 800861e:	f000 80d1 	beq.w	80087c4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008622:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008626:	f003 0301 	and.w	r3, r3, #1
 800862a:	2b00      	cmp	r3, #0
 800862c:	d00b      	beq.n	8008646 <HAL_UART_IRQHandler+0xae>
 800862e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008632:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008636:	2b00      	cmp	r3, #0
 8008638:	d005      	beq.n	8008646 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800863e:	f043 0201 	orr.w	r2, r3, #1
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008646:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800864a:	f003 0304 	and.w	r3, r3, #4
 800864e:	2b00      	cmp	r3, #0
 8008650:	d00b      	beq.n	800866a <HAL_UART_IRQHandler+0xd2>
 8008652:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008656:	f003 0301 	and.w	r3, r3, #1
 800865a:	2b00      	cmp	r3, #0
 800865c:	d005      	beq.n	800866a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008662:	f043 0202 	orr.w	r2, r3, #2
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800866a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800866e:	f003 0302 	and.w	r3, r3, #2
 8008672:	2b00      	cmp	r3, #0
 8008674:	d00b      	beq.n	800868e <HAL_UART_IRQHandler+0xf6>
 8008676:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800867a:	f003 0301 	and.w	r3, r3, #1
 800867e:	2b00      	cmp	r3, #0
 8008680:	d005      	beq.n	800868e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008686:	f043 0204 	orr.w	r2, r3, #4
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800868e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008692:	f003 0308 	and.w	r3, r3, #8
 8008696:	2b00      	cmp	r3, #0
 8008698:	d011      	beq.n	80086be <HAL_UART_IRQHandler+0x126>
 800869a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800869e:	f003 0320 	and.w	r3, r3, #32
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d105      	bne.n	80086b2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80086a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80086aa:	f003 0301 	and.w	r3, r3, #1
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d005      	beq.n	80086be <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086b6:	f043 0208 	orr.w	r2, r3, #8
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	f000 81ed 	beq.w	8008aa2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80086c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80086cc:	f003 0320 	and.w	r3, r3, #32
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d008      	beq.n	80086e6 <HAL_UART_IRQHandler+0x14e>
 80086d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80086d8:	f003 0320 	and.w	r3, r3, #32
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d002      	beq.n	80086e6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80086e0:	6878      	ldr	r0, [r7, #4]
 80086e2:	f000 fd10 	bl	8009106 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	695b      	ldr	r3, [r3, #20]
 80086ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086f0:	2b40      	cmp	r3, #64	; 0x40
 80086f2:	bf0c      	ite	eq
 80086f4:	2301      	moveq	r3, #1
 80086f6:	2300      	movne	r3, #0
 80086f8:	b2db      	uxtb	r3, r3
 80086fa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008702:	f003 0308 	and.w	r3, r3, #8
 8008706:	2b00      	cmp	r3, #0
 8008708:	d103      	bne.n	8008712 <HAL_UART_IRQHandler+0x17a>
 800870a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800870e:	2b00      	cmp	r3, #0
 8008710:	d04f      	beq.n	80087b2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008712:	6878      	ldr	r0, [r7, #4]
 8008714:	f000 fc18 	bl	8008f48 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	695b      	ldr	r3, [r3, #20]
 800871e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008722:	2b40      	cmp	r3, #64	; 0x40
 8008724:	d141      	bne.n	80087aa <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	3314      	adds	r3, #20
 800872c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008730:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008734:	e853 3f00 	ldrex	r3, [r3]
 8008738:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800873c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008740:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008744:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	3314      	adds	r3, #20
 800874e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008752:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008756:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800875a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800875e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008762:	e841 2300 	strex	r3, r2, [r1]
 8008766:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800876a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800876e:	2b00      	cmp	r3, #0
 8008770:	d1d9      	bne.n	8008726 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008776:	2b00      	cmp	r3, #0
 8008778:	d013      	beq.n	80087a2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800877e:	4a7d      	ldr	r2, [pc, #500]	; (8008974 <HAL_UART_IRQHandler+0x3dc>)
 8008780:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008786:	4618      	mov	r0, r3
 8008788:	f7fd f9fa 	bl	8005b80 <HAL_DMA_Abort_IT>
 800878c:	4603      	mov	r3, r0
 800878e:	2b00      	cmp	r3, #0
 8008790:	d016      	beq.n	80087c0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008796:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008798:	687a      	ldr	r2, [r7, #4]
 800879a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800879c:	4610      	mov	r0, r2
 800879e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80087a0:	e00e      	b.n	80087c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80087a2:	6878      	ldr	r0, [r7, #4]
 80087a4:	f000 f9a4 	bl	8008af0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80087a8:	e00a      	b.n	80087c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80087aa:	6878      	ldr	r0, [r7, #4]
 80087ac:	f000 f9a0 	bl	8008af0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80087b0:	e006      	b.n	80087c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80087b2:	6878      	ldr	r0, [r7, #4]
 80087b4:	f000 f99c 	bl	8008af0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	2200      	movs	r2, #0
 80087bc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80087be:	e170      	b.n	8008aa2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80087c0:	bf00      	nop
    return;
 80087c2:	e16e      	b.n	8008aa2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087c8:	2b01      	cmp	r3, #1
 80087ca:	f040 814a 	bne.w	8008a62 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80087ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80087d2:	f003 0310 	and.w	r3, r3, #16
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	f000 8143 	beq.w	8008a62 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80087dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80087e0:	f003 0310 	and.w	r3, r3, #16
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	f000 813c 	beq.w	8008a62 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80087ea:	2300      	movs	r3, #0
 80087ec:	60bb      	str	r3, [r7, #8]
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	60bb      	str	r3, [r7, #8]
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	685b      	ldr	r3, [r3, #4]
 80087fc:	60bb      	str	r3, [r7, #8]
 80087fe:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	695b      	ldr	r3, [r3, #20]
 8008806:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800880a:	2b40      	cmp	r3, #64	; 0x40
 800880c:	f040 80b4 	bne.w	8008978 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	685b      	ldr	r3, [r3, #4]
 8008818:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800881c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008820:	2b00      	cmp	r3, #0
 8008822:	f000 8140 	beq.w	8008aa6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800882a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800882e:	429a      	cmp	r2, r3
 8008830:	f080 8139 	bcs.w	8008aa6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800883a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008840:	69db      	ldr	r3, [r3, #28]
 8008842:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008846:	f000 8088 	beq.w	800895a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	330c      	adds	r3, #12
 8008850:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008854:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008858:	e853 3f00 	ldrex	r3, [r3]
 800885c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008860:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008864:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008868:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	330c      	adds	r3, #12
 8008872:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8008876:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800887a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800887e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008882:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008886:	e841 2300 	strex	r3, r2, [r1]
 800888a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800888e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008892:	2b00      	cmp	r3, #0
 8008894:	d1d9      	bne.n	800884a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	3314      	adds	r3, #20
 800889c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800889e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80088a0:	e853 3f00 	ldrex	r3, [r3]
 80088a4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80088a6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80088a8:	f023 0301 	bic.w	r3, r3, #1
 80088ac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	3314      	adds	r3, #20
 80088b6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80088ba:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80088be:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088c0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80088c2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80088c6:	e841 2300 	strex	r3, r2, [r1]
 80088ca:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80088cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d1e1      	bne.n	8008896 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	3314      	adds	r3, #20
 80088d8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088da:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80088dc:	e853 3f00 	ldrex	r3, [r3]
 80088e0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80088e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80088e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80088e8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	3314      	adds	r3, #20
 80088f2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80088f6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80088f8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088fa:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80088fc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80088fe:	e841 2300 	strex	r3, r2, [r1]
 8008902:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008904:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008906:	2b00      	cmp	r3, #0
 8008908:	d1e3      	bne.n	80088d2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	2220      	movs	r2, #32
 800890e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	2200      	movs	r2, #0
 8008916:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	330c      	adds	r3, #12
 800891e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008920:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008922:	e853 3f00 	ldrex	r3, [r3]
 8008926:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008928:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800892a:	f023 0310 	bic.w	r3, r3, #16
 800892e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	330c      	adds	r3, #12
 8008938:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800893c:	65ba      	str	r2, [r7, #88]	; 0x58
 800893e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008940:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008942:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008944:	e841 2300 	strex	r3, r2, [r1]
 8008948:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800894a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800894c:	2b00      	cmp	r3, #0
 800894e:	d1e3      	bne.n	8008918 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008954:	4618      	mov	r0, r3
 8008956:	f7fd f8a3 	bl	8005aa0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008962:	b29b      	uxth	r3, r3
 8008964:	1ad3      	subs	r3, r2, r3
 8008966:	b29b      	uxth	r3, r3
 8008968:	4619      	mov	r1, r3
 800896a:	6878      	ldr	r0, [r7, #4]
 800896c:	f000 f8ca 	bl	8008b04 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008970:	e099      	b.n	8008aa6 <HAL_UART_IRQHandler+0x50e>
 8008972:	bf00      	nop
 8008974:	0800900f 	.word	0x0800900f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008980:	b29b      	uxth	r3, r3
 8008982:	1ad3      	subs	r3, r2, r3
 8008984:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800898c:	b29b      	uxth	r3, r3
 800898e:	2b00      	cmp	r3, #0
 8008990:	f000 808b 	beq.w	8008aaa <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8008994:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008998:	2b00      	cmp	r3, #0
 800899a:	f000 8086 	beq.w	8008aaa <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	330c      	adds	r3, #12
 80089a4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089a8:	e853 3f00 	ldrex	r3, [r3]
 80089ac:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80089ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089b0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80089b4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	330c      	adds	r3, #12
 80089be:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80089c2:	647a      	str	r2, [r7, #68]	; 0x44
 80089c4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089c6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80089c8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80089ca:	e841 2300 	strex	r3, r2, [r1]
 80089ce:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80089d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d1e3      	bne.n	800899e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	3314      	adds	r3, #20
 80089dc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089e0:	e853 3f00 	ldrex	r3, [r3]
 80089e4:	623b      	str	r3, [r7, #32]
   return(result);
 80089e6:	6a3b      	ldr	r3, [r7, #32]
 80089e8:	f023 0301 	bic.w	r3, r3, #1
 80089ec:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	3314      	adds	r3, #20
 80089f6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80089fa:	633a      	str	r2, [r7, #48]	; 0x30
 80089fc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089fe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008a00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008a02:	e841 2300 	strex	r3, r2, [r1]
 8008a06:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008a08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d1e3      	bne.n	80089d6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	2220      	movs	r2, #32
 8008a12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	2200      	movs	r2, #0
 8008a1a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	330c      	adds	r3, #12
 8008a22:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a24:	693b      	ldr	r3, [r7, #16]
 8008a26:	e853 3f00 	ldrex	r3, [r3]
 8008a2a:	60fb      	str	r3, [r7, #12]
   return(result);
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	f023 0310 	bic.w	r3, r3, #16
 8008a32:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	330c      	adds	r3, #12
 8008a3c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8008a40:	61fa      	str	r2, [r7, #28]
 8008a42:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a44:	69b9      	ldr	r1, [r7, #24]
 8008a46:	69fa      	ldr	r2, [r7, #28]
 8008a48:	e841 2300 	strex	r3, r2, [r1]
 8008a4c:	617b      	str	r3, [r7, #20]
   return(result);
 8008a4e:	697b      	ldr	r3, [r7, #20]
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d1e3      	bne.n	8008a1c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008a54:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008a58:	4619      	mov	r1, r3
 8008a5a:	6878      	ldr	r0, [r7, #4]
 8008a5c:	f000 f852 	bl	8008b04 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008a60:	e023      	b.n	8008aaa <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008a62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d009      	beq.n	8008a82 <HAL_UART_IRQHandler+0x4ea>
 8008a6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008a72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d003      	beq.n	8008a82 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8008a7a:	6878      	ldr	r0, [r7, #4]
 8008a7c:	f000 fadb 	bl	8009036 <UART_Transmit_IT>
    return;
 8008a80:	e014      	b.n	8008aac <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008a82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d00e      	beq.n	8008aac <HAL_UART_IRQHandler+0x514>
 8008a8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008a92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d008      	beq.n	8008aac <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8008a9a:	6878      	ldr	r0, [r7, #4]
 8008a9c:	f000 fb1b 	bl	80090d6 <UART_EndTransmit_IT>
    return;
 8008aa0:	e004      	b.n	8008aac <HAL_UART_IRQHandler+0x514>
    return;
 8008aa2:	bf00      	nop
 8008aa4:	e002      	b.n	8008aac <HAL_UART_IRQHandler+0x514>
      return;
 8008aa6:	bf00      	nop
 8008aa8:	e000      	b.n	8008aac <HAL_UART_IRQHandler+0x514>
      return;
 8008aaa:	bf00      	nop
  }
}
 8008aac:	37e8      	adds	r7, #232	; 0xe8
 8008aae:	46bd      	mov	sp, r7
 8008ab0:	bd80      	pop	{r7, pc}
 8008ab2:	bf00      	nop

08008ab4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008ab4:	b480      	push	{r7}
 8008ab6:	b083      	sub	sp, #12
 8008ab8:	af00      	add	r7, sp, #0
 8008aba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008abc:	bf00      	nop
 8008abe:	370c      	adds	r7, #12
 8008ac0:	46bd      	mov	sp, r7
 8008ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac6:	4770      	bx	lr

08008ac8 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008ac8:	b480      	push	{r7}
 8008aca:	b083      	sub	sp, #12
 8008acc:	af00      	add	r7, sp, #0
 8008ace:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8008ad0:	bf00      	nop
 8008ad2:	370c      	adds	r7, #12
 8008ad4:	46bd      	mov	sp, r7
 8008ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ada:	4770      	bx	lr

08008adc <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008adc:	b480      	push	{r7}
 8008ade:	b083      	sub	sp, #12
 8008ae0:	af00      	add	r7, sp, #0
 8008ae2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8008ae4:	bf00      	nop
 8008ae6:	370c      	adds	r7, #12
 8008ae8:	46bd      	mov	sp, r7
 8008aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aee:	4770      	bx	lr

08008af0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008af0:	b480      	push	{r7}
 8008af2:	b083      	sub	sp, #12
 8008af4:	af00      	add	r7, sp, #0
 8008af6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008af8:	bf00      	nop
 8008afa:	370c      	adds	r7, #12
 8008afc:	46bd      	mov	sp, r7
 8008afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b02:	4770      	bx	lr

08008b04 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008b04:	b480      	push	{r7}
 8008b06:	b083      	sub	sp, #12
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	6078      	str	r0, [r7, #4]
 8008b0c:	460b      	mov	r3, r1
 8008b0e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008b10:	bf00      	nop
 8008b12:	370c      	adds	r7, #12
 8008b14:	46bd      	mov	sp, r7
 8008b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b1a:	4770      	bx	lr

08008b1c <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008b1c:	b580      	push	{r7, lr}
 8008b1e:	b090      	sub	sp, #64	; 0x40
 8008b20:	af00      	add	r7, sp, #0
 8008b22:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b28:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d137      	bne.n	8008ba8 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8008b38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b3a:	2200      	movs	r2, #0
 8008b3c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008b3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	3314      	adds	r3, #20
 8008b44:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b48:	e853 3f00 	ldrex	r3, [r3]
 8008b4c:	623b      	str	r3, [r7, #32]
   return(result);
 8008b4e:	6a3b      	ldr	r3, [r7, #32]
 8008b50:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008b54:	63bb      	str	r3, [r7, #56]	; 0x38
 8008b56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	3314      	adds	r3, #20
 8008b5c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008b5e:	633a      	str	r2, [r7, #48]	; 0x30
 8008b60:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b62:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008b64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008b66:	e841 2300 	strex	r3, r2, [r1]
 8008b6a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008b6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d1e5      	bne.n	8008b3e <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008b72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	330c      	adds	r3, #12
 8008b78:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b7a:	693b      	ldr	r3, [r7, #16]
 8008b7c:	e853 3f00 	ldrex	r3, [r3]
 8008b80:	60fb      	str	r3, [r7, #12]
   return(result);
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008b88:	637b      	str	r3, [r7, #52]	; 0x34
 8008b8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	330c      	adds	r3, #12
 8008b90:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008b92:	61fa      	str	r2, [r7, #28]
 8008b94:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b96:	69b9      	ldr	r1, [r7, #24]
 8008b98:	69fa      	ldr	r2, [r7, #28]
 8008b9a:	e841 2300 	strex	r3, r2, [r1]
 8008b9e:	617b      	str	r3, [r7, #20]
   return(result);
 8008ba0:	697b      	ldr	r3, [r7, #20]
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d1e5      	bne.n	8008b72 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008ba6:	e002      	b.n	8008bae <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8008ba8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8008baa:	f7ff ff83 	bl	8008ab4 <HAL_UART_TxCpltCallback>
}
 8008bae:	bf00      	nop
 8008bb0:	3740      	adds	r7, #64	; 0x40
 8008bb2:	46bd      	mov	sp, r7
 8008bb4:	bd80      	pop	{r7, pc}

08008bb6 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008bb6:	b580      	push	{r7, lr}
 8008bb8:	b084      	sub	sp, #16
 8008bba:	af00      	add	r7, sp, #0
 8008bbc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bc2:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8008bc4:	68f8      	ldr	r0, [r7, #12]
 8008bc6:	f7ff ff7f 	bl	8008ac8 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008bca:	bf00      	nop
 8008bcc:	3710      	adds	r7, #16
 8008bce:	46bd      	mov	sp, r7
 8008bd0:	bd80      	pop	{r7, pc}

08008bd2 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008bd2:	b580      	push	{r7, lr}
 8008bd4:	b09c      	sub	sp, #112	; 0x70
 8008bd6:	af00      	add	r7, sp, #0
 8008bd8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bde:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d172      	bne.n	8008cd4 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8008bee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008bf0:	2200      	movs	r2, #0
 8008bf2:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008bf4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	330c      	adds	r3, #12
 8008bfa:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bfc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008bfe:	e853 3f00 	ldrex	r3, [r3]
 8008c02:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008c04:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008c06:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008c0a:	66bb      	str	r3, [r7, #104]	; 0x68
 8008c0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	330c      	adds	r3, #12
 8008c12:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008c14:	65ba      	str	r2, [r7, #88]	; 0x58
 8008c16:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c18:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008c1a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008c1c:	e841 2300 	strex	r3, r2, [r1]
 8008c20:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008c22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d1e5      	bne.n	8008bf4 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	3314      	adds	r3, #20
 8008c2e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c32:	e853 3f00 	ldrex	r3, [r3]
 8008c36:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008c38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c3a:	f023 0301 	bic.w	r3, r3, #1
 8008c3e:	667b      	str	r3, [r7, #100]	; 0x64
 8008c40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	3314      	adds	r3, #20
 8008c46:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008c48:	647a      	str	r2, [r7, #68]	; 0x44
 8008c4a:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c4c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008c4e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008c50:	e841 2300 	strex	r3, r2, [r1]
 8008c54:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008c56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d1e5      	bne.n	8008c28 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008c5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	3314      	adds	r3, #20
 8008c62:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c66:	e853 3f00 	ldrex	r3, [r3]
 8008c6a:	623b      	str	r3, [r7, #32]
   return(result);
 8008c6c:	6a3b      	ldr	r3, [r7, #32]
 8008c6e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008c72:	663b      	str	r3, [r7, #96]	; 0x60
 8008c74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	3314      	adds	r3, #20
 8008c7a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008c7c:	633a      	str	r2, [r7, #48]	; 0x30
 8008c7e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c80:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008c82:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008c84:	e841 2300 	strex	r3, r2, [r1]
 8008c88:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008c8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d1e5      	bne.n	8008c5c <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008c90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008c92:	2220      	movs	r2, #32
 8008c94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008c98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008c9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c9c:	2b01      	cmp	r3, #1
 8008c9e:	d119      	bne.n	8008cd4 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008ca0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	330c      	adds	r3, #12
 8008ca6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ca8:	693b      	ldr	r3, [r7, #16]
 8008caa:	e853 3f00 	ldrex	r3, [r3]
 8008cae:	60fb      	str	r3, [r7, #12]
   return(result);
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	f023 0310 	bic.w	r3, r3, #16
 8008cb6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008cb8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	330c      	adds	r3, #12
 8008cbe:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008cc0:	61fa      	str	r2, [r7, #28]
 8008cc2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cc4:	69b9      	ldr	r1, [r7, #24]
 8008cc6:	69fa      	ldr	r2, [r7, #28]
 8008cc8:	e841 2300 	strex	r3, r2, [r1]
 8008ccc:	617b      	str	r3, [r7, #20]
   return(result);
 8008cce:	697b      	ldr	r3, [r7, #20]
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d1e5      	bne.n	8008ca0 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008cd4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008cd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cd8:	2b01      	cmp	r3, #1
 8008cda:	d106      	bne.n	8008cea <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008cdc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008cde:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008ce0:	4619      	mov	r1, r3
 8008ce2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8008ce4:	f7ff ff0e 	bl	8008b04 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008ce8:	e002      	b.n	8008cf0 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8008cea:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8008cec:	f7fa f976 	bl	8002fdc <HAL_UART_RxCpltCallback>
}
 8008cf0:	bf00      	nop
 8008cf2:	3770      	adds	r7, #112	; 0x70
 8008cf4:	46bd      	mov	sp, r7
 8008cf6:	bd80      	pop	{r7, pc}

08008cf8 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008cf8:	b580      	push	{r7, lr}
 8008cfa:	b084      	sub	sp, #16
 8008cfc:	af00      	add	r7, sp, #0
 8008cfe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d04:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d0a:	2b01      	cmp	r3, #1
 8008d0c:	d108      	bne.n	8008d20 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008d12:	085b      	lsrs	r3, r3, #1
 8008d14:	b29b      	uxth	r3, r3
 8008d16:	4619      	mov	r1, r3
 8008d18:	68f8      	ldr	r0, [r7, #12]
 8008d1a:	f7ff fef3 	bl	8008b04 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008d1e:	e002      	b.n	8008d26 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8008d20:	68f8      	ldr	r0, [r7, #12]
 8008d22:	f7ff fedb 	bl	8008adc <HAL_UART_RxHalfCpltCallback>
}
 8008d26:	bf00      	nop
 8008d28:	3710      	adds	r7, #16
 8008d2a:	46bd      	mov	sp, r7
 8008d2c:	bd80      	pop	{r7, pc}

08008d2e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008d2e:	b580      	push	{r7, lr}
 8008d30:	b084      	sub	sp, #16
 8008d32:	af00      	add	r7, sp, #0
 8008d34:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8008d36:	2300      	movs	r3, #0
 8008d38:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d3e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8008d40:	68bb      	ldr	r3, [r7, #8]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	695b      	ldr	r3, [r3, #20]
 8008d46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d4a:	2b80      	cmp	r3, #128	; 0x80
 8008d4c:	bf0c      	ite	eq
 8008d4e:	2301      	moveq	r3, #1
 8008d50:	2300      	movne	r3, #0
 8008d52:	b2db      	uxtb	r3, r3
 8008d54:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8008d56:	68bb      	ldr	r3, [r7, #8]
 8008d58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008d5c:	b2db      	uxtb	r3, r3
 8008d5e:	2b21      	cmp	r3, #33	; 0x21
 8008d60:	d108      	bne.n	8008d74 <UART_DMAError+0x46>
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d005      	beq.n	8008d74 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8008d68:	68bb      	ldr	r3, [r7, #8]
 8008d6a:	2200      	movs	r2, #0
 8008d6c:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8008d6e:	68b8      	ldr	r0, [r7, #8]
 8008d70:	f000 f8c2 	bl	8008ef8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008d74:	68bb      	ldr	r3, [r7, #8]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	695b      	ldr	r3, [r3, #20]
 8008d7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d7e:	2b40      	cmp	r3, #64	; 0x40
 8008d80:	bf0c      	ite	eq
 8008d82:	2301      	moveq	r3, #1
 8008d84:	2300      	movne	r3, #0
 8008d86:	b2db      	uxtb	r3, r3
 8008d88:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8008d8a:	68bb      	ldr	r3, [r7, #8]
 8008d8c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008d90:	b2db      	uxtb	r3, r3
 8008d92:	2b22      	cmp	r3, #34	; 0x22
 8008d94:	d108      	bne.n	8008da8 <UART_DMAError+0x7a>
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d005      	beq.n	8008da8 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8008d9c:	68bb      	ldr	r3, [r7, #8]
 8008d9e:	2200      	movs	r2, #0
 8008da0:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8008da2:	68b8      	ldr	r0, [r7, #8]
 8008da4:	f000 f8d0 	bl	8008f48 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008da8:	68bb      	ldr	r3, [r7, #8]
 8008daa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dac:	f043 0210 	orr.w	r2, r3, #16
 8008db0:	68bb      	ldr	r3, [r7, #8]
 8008db2:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008db4:	68b8      	ldr	r0, [r7, #8]
 8008db6:	f7ff fe9b 	bl	8008af0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008dba:	bf00      	nop
 8008dbc:	3710      	adds	r7, #16
 8008dbe:	46bd      	mov	sp, r7
 8008dc0:	bd80      	pop	{r7, pc}
	...

08008dc4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008dc4:	b580      	push	{r7, lr}
 8008dc6:	b098      	sub	sp, #96	; 0x60
 8008dc8:	af00      	add	r7, sp, #0
 8008dca:	60f8      	str	r0, [r7, #12]
 8008dcc:	60b9      	str	r1, [r7, #8]
 8008dce:	4613      	mov	r3, r2
 8008dd0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8008dd2:	68ba      	ldr	r2, [r7, #8]
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	88fa      	ldrh	r2, [r7, #6]
 8008ddc:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	2200      	movs	r2, #0
 8008de2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	2222      	movs	r2, #34	; 0x22
 8008de8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008df0:	4a3e      	ldr	r2, [pc, #248]	; (8008eec <UART_Start_Receive_DMA+0x128>)
 8008df2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008df8:	4a3d      	ldr	r2, [pc, #244]	; (8008ef0 <UART_Start_Receive_DMA+0x12c>)
 8008dfa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e00:	4a3c      	ldr	r2, [pc, #240]	; (8008ef4 <UART_Start_Receive_DMA+0x130>)
 8008e02:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e08:	2200      	movs	r2, #0
 8008e0a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8008e0c:	f107 0308 	add.w	r3, r7, #8
 8008e10:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	3304      	adds	r3, #4
 8008e1c:	4619      	mov	r1, r3
 8008e1e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008e20:	681a      	ldr	r2, [r3, #0]
 8008e22:	88fb      	ldrh	r3, [r7, #6]
 8008e24:	f7fc fde4 	bl	80059f0 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8008e28:	2300      	movs	r3, #0
 8008e2a:	613b      	str	r3, [r7, #16]
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	613b      	str	r3, [r7, #16]
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	685b      	ldr	r3, [r3, #4]
 8008e3a:	613b      	str	r3, [r7, #16]
 8008e3c:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	2200      	movs	r2, #0
 8008e42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	330c      	adds	r3, #12
 8008e4c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008e50:	e853 3f00 	ldrex	r3, [r3]
 8008e54:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008e56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008e5c:	65bb      	str	r3, [r7, #88]	; 0x58
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	330c      	adds	r3, #12
 8008e64:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008e66:	64fa      	str	r2, [r7, #76]	; 0x4c
 8008e68:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e6a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8008e6c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008e6e:	e841 2300 	strex	r3, r2, [r1]
 8008e72:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8008e74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d1e5      	bne.n	8008e46 <UART_Start_Receive_DMA+0x82>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	3314      	adds	r3, #20
 8008e80:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e84:	e853 3f00 	ldrex	r3, [r3]
 8008e88:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008e8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e8c:	f043 0301 	orr.w	r3, r3, #1
 8008e90:	657b      	str	r3, [r7, #84]	; 0x54
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	3314      	adds	r3, #20
 8008e98:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008e9a:	63ba      	str	r2, [r7, #56]	; 0x38
 8008e9c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e9e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008ea0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008ea2:	e841 2300 	strex	r3, r2, [r1]
 8008ea6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008ea8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d1e5      	bne.n	8008e7a <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	3314      	adds	r3, #20
 8008eb4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008eb6:	69bb      	ldr	r3, [r7, #24]
 8008eb8:	e853 3f00 	ldrex	r3, [r3]
 8008ebc:	617b      	str	r3, [r7, #20]
   return(result);
 8008ebe:	697b      	ldr	r3, [r7, #20]
 8008ec0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008ec4:	653b      	str	r3, [r7, #80]	; 0x50
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	3314      	adds	r3, #20
 8008ecc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008ece:	627a      	str	r2, [r7, #36]	; 0x24
 8008ed0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ed2:	6a39      	ldr	r1, [r7, #32]
 8008ed4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ed6:	e841 2300 	strex	r3, r2, [r1]
 8008eda:	61fb      	str	r3, [r7, #28]
   return(result);
 8008edc:	69fb      	ldr	r3, [r7, #28]
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d1e5      	bne.n	8008eae <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8008ee2:	2300      	movs	r3, #0
}
 8008ee4:	4618      	mov	r0, r3
 8008ee6:	3760      	adds	r7, #96	; 0x60
 8008ee8:	46bd      	mov	sp, r7
 8008eea:	bd80      	pop	{r7, pc}
 8008eec:	08008bd3 	.word	0x08008bd3
 8008ef0:	08008cf9 	.word	0x08008cf9
 8008ef4:	08008d2f 	.word	0x08008d2f

08008ef8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008ef8:	b480      	push	{r7}
 8008efa:	b089      	sub	sp, #36	; 0x24
 8008efc:	af00      	add	r7, sp, #0
 8008efe:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	330c      	adds	r3, #12
 8008f06:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	e853 3f00 	ldrex	r3, [r3]
 8008f0e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008f10:	68bb      	ldr	r3, [r7, #8]
 8008f12:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008f16:	61fb      	str	r3, [r7, #28]
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	330c      	adds	r3, #12
 8008f1e:	69fa      	ldr	r2, [r7, #28]
 8008f20:	61ba      	str	r2, [r7, #24]
 8008f22:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f24:	6979      	ldr	r1, [r7, #20]
 8008f26:	69ba      	ldr	r2, [r7, #24]
 8008f28:	e841 2300 	strex	r3, r2, [r1]
 8008f2c:	613b      	str	r3, [r7, #16]
   return(result);
 8008f2e:	693b      	ldr	r3, [r7, #16]
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d1e5      	bne.n	8008f00 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	2220      	movs	r2, #32
 8008f38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8008f3c:	bf00      	nop
 8008f3e:	3724      	adds	r7, #36	; 0x24
 8008f40:	46bd      	mov	sp, r7
 8008f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f46:	4770      	bx	lr

08008f48 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008f48:	b480      	push	{r7}
 8008f4a:	b095      	sub	sp, #84	; 0x54
 8008f4c:	af00      	add	r7, sp, #0
 8008f4e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	330c      	adds	r3, #12
 8008f56:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f5a:	e853 3f00 	ldrex	r3, [r3]
 8008f5e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008f60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f62:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008f66:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	330c      	adds	r3, #12
 8008f6e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008f70:	643a      	str	r2, [r7, #64]	; 0x40
 8008f72:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f74:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008f76:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008f78:	e841 2300 	strex	r3, r2, [r1]
 8008f7c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008f7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d1e5      	bne.n	8008f50 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	3314      	adds	r3, #20
 8008f8a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f8c:	6a3b      	ldr	r3, [r7, #32]
 8008f8e:	e853 3f00 	ldrex	r3, [r3]
 8008f92:	61fb      	str	r3, [r7, #28]
   return(result);
 8008f94:	69fb      	ldr	r3, [r7, #28]
 8008f96:	f023 0301 	bic.w	r3, r3, #1
 8008f9a:	64bb      	str	r3, [r7, #72]	; 0x48
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	3314      	adds	r3, #20
 8008fa2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008fa4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008fa6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fa8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008faa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008fac:	e841 2300 	strex	r3, r2, [r1]
 8008fb0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d1e5      	bne.n	8008f84 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fbc:	2b01      	cmp	r3, #1
 8008fbe:	d119      	bne.n	8008ff4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	330c      	adds	r3, #12
 8008fc6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	e853 3f00 	ldrex	r3, [r3]
 8008fce:	60bb      	str	r3, [r7, #8]
   return(result);
 8008fd0:	68bb      	ldr	r3, [r7, #8]
 8008fd2:	f023 0310 	bic.w	r3, r3, #16
 8008fd6:	647b      	str	r3, [r7, #68]	; 0x44
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	330c      	adds	r3, #12
 8008fde:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008fe0:	61ba      	str	r2, [r7, #24]
 8008fe2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fe4:	6979      	ldr	r1, [r7, #20]
 8008fe6:	69ba      	ldr	r2, [r7, #24]
 8008fe8:	e841 2300 	strex	r3, r2, [r1]
 8008fec:	613b      	str	r3, [r7, #16]
   return(result);
 8008fee:	693b      	ldr	r3, [r7, #16]
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d1e5      	bne.n	8008fc0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	2220      	movs	r2, #32
 8008ff8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	2200      	movs	r2, #0
 8009000:	631a      	str	r2, [r3, #48]	; 0x30
}
 8009002:	bf00      	nop
 8009004:	3754      	adds	r7, #84	; 0x54
 8009006:	46bd      	mov	sp, r7
 8009008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800900c:	4770      	bx	lr

0800900e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800900e:	b580      	push	{r7, lr}
 8009010:	b084      	sub	sp, #16
 8009012:	af00      	add	r7, sp, #0
 8009014:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800901a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	2200      	movs	r2, #0
 8009020:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	2200      	movs	r2, #0
 8009026:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009028:	68f8      	ldr	r0, [r7, #12]
 800902a:	f7ff fd61 	bl	8008af0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800902e:	bf00      	nop
 8009030:	3710      	adds	r7, #16
 8009032:	46bd      	mov	sp, r7
 8009034:	bd80      	pop	{r7, pc}

08009036 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8009036:	b480      	push	{r7}
 8009038:	b085      	sub	sp, #20
 800903a:	af00      	add	r7, sp, #0
 800903c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009044:	b2db      	uxtb	r3, r3
 8009046:	2b21      	cmp	r3, #33	; 0x21
 8009048:	d13e      	bne.n	80090c8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	689b      	ldr	r3, [r3, #8]
 800904e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009052:	d114      	bne.n	800907e <UART_Transmit_IT+0x48>
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	691b      	ldr	r3, [r3, #16]
 8009058:	2b00      	cmp	r3, #0
 800905a:	d110      	bne.n	800907e <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	6a1b      	ldr	r3, [r3, #32]
 8009060:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	881b      	ldrh	r3, [r3, #0]
 8009066:	461a      	mov	r2, r3
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009070:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	6a1b      	ldr	r3, [r3, #32]
 8009076:	1c9a      	adds	r2, r3, #2
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	621a      	str	r2, [r3, #32]
 800907c:	e008      	b.n	8009090 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	6a1b      	ldr	r3, [r3, #32]
 8009082:	1c59      	adds	r1, r3, #1
 8009084:	687a      	ldr	r2, [r7, #4]
 8009086:	6211      	str	r1, [r2, #32]
 8009088:	781a      	ldrb	r2, [r3, #0]
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009094:	b29b      	uxth	r3, r3
 8009096:	3b01      	subs	r3, #1
 8009098:	b29b      	uxth	r3, r3
 800909a:	687a      	ldr	r2, [r7, #4]
 800909c:	4619      	mov	r1, r3
 800909e:	84d1      	strh	r1, [r2, #38]	; 0x26
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d10f      	bne.n	80090c4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	68da      	ldr	r2, [r3, #12]
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80090b2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	68da      	ldr	r2, [r3, #12]
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80090c2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80090c4:	2300      	movs	r3, #0
 80090c6:	e000      	b.n	80090ca <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80090c8:	2302      	movs	r3, #2
  }
}
 80090ca:	4618      	mov	r0, r3
 80090cc:	3714      	adds	r7, #20
 80090ce:	46bd      	mov	sp, r7
 80090d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d4:	4770      	bx	lr

080090d6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80090d6:	b580      	push	{r7, lr}
 80090d8:	b082      	sub	sp, #8
 80090da:	af00      	add	r7, sp, #0
 80090dc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	68da      	ldr	r2, [r3, #12]
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80090ec:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	2220      	movs	r2, #32
 80090f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80090f6:	6878      	ldr	r0, [r7, #4]
 80090f8:	f7ff fcdc 	bl	8008ab4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80090fc:	2300      	movs	r3, #0
}
 80090fe:	4618      	mov	r0, r3
 8009100:	3708      	adds	r7, #8
 8009102:	46bd      	mov	sp, r7
 8009104:	bd80      	pop	{r7, pc}

08009106 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009106:	b580      	push	{r7, lr}
 8009108:	b08c      	sub	sp, #48	; 0x30
 800910a:	af00      	add	r7, sp, #0
 800910c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009114:	b2db      	uxtb	r3, r3
 8009116:	2b22      	cmp	r3, #34	; 0x22
 8009118:	f040 80ab 	bne.w	8009272 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	689b      	ldr	r3, [r3, #8]
 8009120:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009124:	d117      	bne.n	8009156 <UART_Receive_IT+0x50>
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	691b      	ldr	r3, [r3, #16]
 800912a:	2b00      	cmp	r3, #0
 800912c:	d113      	bne.n	8009156 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800912e:	2300      	movs	r3, #0
 8009130:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009136:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	685b      	ldr	r3, [r3, #4]
 800913e:	b29b      	uxth	r3, r3
 8009140:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009144:	b29a      	uxth	r2, r3
 8009146:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009148:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800914e:	1c9a      	adds	r2, r3, #2
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	629a      	str	r2, [r3, #40]	; 0x28
 8009154:	e026      	b.n	80091a4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800915a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800915c:	2300      	movs	r3, #0
 800915e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	689b      	ldr	r3, [r3, #8]
 8009164:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009168:	d007      	beq.n	800917a <UART_Receive_IT+0x74>
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	689b      	ldr	r3, [r3, #8]
 800916e:	2b00      	cmp	r3, #0
 8009170:	d10a      	bne.n	8009188 <UART_Receive_IT+0x82>
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	691b      	ldr	r3, [r3, #16]
 8009176:	2b00      	cmp	r3, #0
 8009178:	d106      	bne.n	8009188 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	685b      	ldr	r3, [r3, #4]
 8009180:	b2da      	uxtb	r2, r3
 8009182:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009184:	701a      	strb	r2, [r3, #0]
 8009186:	e008      	b.n	800919a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	685b      	ldr	r3, [r3, #4]
 800918e:	b2db      	uxtb	r3, r3
 8009190:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009194:	b2da      	uxtb	r2, r3
 8009196:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009198:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800919e:	1c5a      	adds	r2, r3, #1
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80091a8:	b29b      	uxth	r3, r3
 80091aa:	3b01      	subs	r3, #1
 80091ac:	b29b      	uxth	r3, r3
 80091ae:	687a      	ldr	r2, [r7, #4]
 80091b0:	4619      	mov	r1, r3
 80091b2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d15a      	bne.n	800926e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	68da      	ldr	r2, [r3, #12]
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	f022 0220 	bic.w	r2, r2, #32
 80091c6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	68da      	ldr	r2, [r3, #12]
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80091d6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	695a      	ldr	r2, [r3, #20]
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	f022 0201 	bic.w	r2, r2, #1
 80091e6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	2220      	movs	r2, #32
 80091ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091f4:	2b01      	cmp	r3, #1
 80091f6:	d135      	bne.n	8009264 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	2200      	movs	r2, #0
 80091fc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	330c      	adds	r3, #12
 8009204:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009206:	697b      	ldr	r3, [r7, #20]
 8009208:	e853 3f00 	ldrex	r3, [r3]
 800920c:	613b      	str	r3, [r7, #16]
   return(result);
 800920e:	693b      	ldr	r3, [r7, #16]
 8009210:	f023 0310 	bic.w	r3, r3, #16
 8009214:	627b      	str	r3, [r7, #36]	; 0x24
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	330c      	adds	r3, #12
 800921c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800921e:	623a      	str	r2, [r7, #32]
 8009220:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009222:	69f9      	ldr	r1, [r7, #28]
 8009224:	6a3a      	ldr	r2, [r7, #32]
 8009226:	e841 2300 	strex	r3, r2, [r1]
 800922a:	61bb      	str	r3, [r7, #24]
   return(result);
 800922c:	69bb      	ldr	r3, [r7, #24]
 800922e:	2b00      	cmp	r3, #0
 8009230:	d1e5      	bne.n	80091fe <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	f003 0310 	and.w	r3, r3, #16
 800923c:	2b10      	cmp	r3, #16
 800923e:	d10a      	bne.n	8009256 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009240:	2300      	movs	r3, #0
 8009242:	60fb      	str	r3, [r7, #12]
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	60fb      	str	r3, [r7, #12]
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	685b      	ldr	r3, [r3, #4]
 8009252:	60fb      	str	r3, [r7, #12]
 8009254:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800925a:	4619      	mov	r1, r3
 800925c:	6878      	ldr	r0, [r7, #4]
 800925e:	f7ff fc51 	bl	8008b04 <HAL_UARTEx_RxEventCallback>
 8009262:	e002      	b.n	800926a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009264:	6878      	ldr	r0, [r7, #4]
 8009266:	f7f9 feb9 	bl	8002fdc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800926a:	2300      	movs	r3, #0
 800926c:	e002      	b.n	8009274 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800926e:	2300      	movs	r3, #0
 8009270:	e000      	b.n	8009274 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8009272:	2302      	movs	r3, #2
  }
}
 8009274:	4618      	mov	r0, r3
 8009276:	3730      	adds	r7, #48	; 0x30
 8009278:	46bd      	mov	sp, r7
 800927a:	bd80      	pop	{r7, pc}

0800927c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800927c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009280:	b09f      	sub	sp, #124	; 0x7c
 8009282:	af00      	add	r7, sp, #0
 8009284:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009286:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	691b      	ldr	r3, [r3, #16]
 800928c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8009290:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009292:	68d9      	ldr	r1, [r3, #12]
 8009294:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009296:	681a      	ldr	r2, [r3, #0]
 8009298:	ea40 0301 	orr.w	r3, r0, r1
 800929c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800929e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80092a0:	689a      	ldr	r2, [r3, #8]
 80092a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80092a4:	691b      	ldr	r3, [r3, #16]
 80092a6:	431a      	orrs	r2, r3
 80092a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80092aa:	695b      	ldr	r3, [r3, #20]
 80092ac:	431a      	orrs	r2, r3
 80092ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80092b0:	69db      	ldr	r3, [r3, #28]
 80092b2:	4313      	orrs	r3, r2
 80092b4:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80092b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	68db      	ldr	r3, [r3, #12]
 80092bc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80092c0:	f021 010c 	bic.w	r1, r1, #12
 80092c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80092c6:	681a      	ldr	r2, [r3, #0]
 80092c8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80092ca:	430b      	orrs	r3, r1
 80092cc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80092ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	695b      	ldr	r3, [r3, #20]
 80092d4:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80092d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80092da:	6999      	ldr	r1, [r3, #24]
 80092dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80092de:	681a      	ldr	r2, [r3, #0]
 80092e0:	ea40 0301 	orr.w	r3, r0, r1
 80092e4:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80092e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80092e8:	681a      	ldr	r2, [r3, #0]
 80092ea:	4bc5      	ldr	r3, [pc, #788]	; (8009600 <UART_SetConfig+0x384>)
 80092ec:	429a      	cmp	r2, r3
 80092ee:	d004      	beq.n	80092fa <UART_SetConfig+0x7e>
 80092f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80092f2:	681a      	ldr	r2, [r3, #0]
 80092f4:	4bc3      	ldr	r3, [pc, #780]	; (8009604 <UART_SetConfig+0x388>)
 80092f6:	429a      	cmp	r2, r3
 80092f8:	d103      	bne.n	8009302 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80092fa:	f7fd fcfd 	bl	8006cf8 <HAL_RCC_GetPCLK2Freq>
 80092fe:	6778      	str	r0, [r7, #116]	; 0x74
 8009300:	e002      	b.n	8009308 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009302:	f7fd fce5 	bl	8006cd0 <HAL_RCC_GetPCLK1Freq>
 8009306:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009308:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800930a:	69db      	ldr	r3, [r3, #28]
 800930c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009310:	f040 80b6 	bne.w	8009480 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009314:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009316:	461c      	mov	r4, r3
 8009318:	f04f 0500 	mov.w	r5, #0
 800931c:	4622      	mov	r2, r4
 800931e:	462b      	mov	r3, r5
 8009320:	1891      	adds	r1, r2, r2
 8009322:	6439      	str	r1, [r7, #64]	; 0x40
 8009324:	415b      	adcs	r3, r3
 8009326:	647b      	str	r3, [r7, #68]	; 0x44
 8009328:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800932c:	1912      	adds	r2, r2, r4
 800932e:	eb45 0303 	adc.w	r3, r5, r3
 8009332:	f04f 0000 	mov.w	r0, #0
 8009336:	f04f 0100 	mov.w	r1, #0
 800933a:	00d9      	lsls	r1, r3, #3
 800933c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009340:	00d0      	lsls	r0, r2, #3
 8009342:	4602      	mov	r2, r0
 8009344:	460b      	mov	r3, r1
 8009346:	1911      	adds	r1, r2, r4
 8009348:	6639      	str	r1, [r7, #96]	; 0x60
 800934a:	416b      	adcs	r3, r5
 800934c:	667b      	str	r3, [r7, #100]	; 0x64
 800934e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009350:	685b      	ldr	r3, [r3, #4]
 8009352:	461a      	mov	r2, r3
 8009354:	f04f 0300 	mov.w	r3, #0
 8009358:	1891      	adds	r1, r2, r2
 800935a:	63b9      	str	r1, [r7, #56]	; 0x38
 800935c:	415b      	adcs	r3, r3
 800935e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009360:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009364:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8009368:	f7f7 fbd4 	bl	8000b14 <__aeabi_uldivmod>
 800936c:	4602      	mov	r2, r0
 800936e:	460b      	mov	r3, r1
 8009370:	4ba5      	ldr	r3, [pc, #660]	; (8009608 <UART_SetConfig+0x38c>)
 8009372:	fba3 2302 	umull	r2, r3, r3, r2
 8009376:	095b      	lsrs	r3, r3, #5
 8009378:	011e      	lsls	r6, r3, #4
 800937a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800937c:	461c      	mov	r4, r3
 800937e:	f04f 0500 	mov.w	r5, #0
 8009382:	4622      	mov	r2, r4
 8009384:	462b      	mov	r3, r5
 8009386:	1891      	adds	r1, r2, r2
 8009388:	6339      	str	r1, [r7, #48]	; 0x30
 800938a:	415b      	adcs	r3, r3
 800938c:	637b      	str	r3, [r7, #52]	; 0x34
 800938e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8009392:	1912      	adds	r2, r2, r4
 8009394:	eb45 0303 	adc.w	r3, r5, r3
 8009398:	f04f 0000 	mov.w	r0, #0
 800939c:	f04f 0100 	mov.w	r1, #0
 80093a0:	00d9      	lsls	r1, r3, #3
 80093a2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80093a6:	00d0      	lsls	r0, r2, #3
 80093a8:	4602      	mov	r2, r0
 80093aa:	460b      	mov	r3, r1
 80093ac:	1911      	adds	r1, r2, r4
 80093ae:	65b9      	str	r1, [r7, #88]	; 0x58
 80093b0:	416b      	adcs	r3, r5
 80093b2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80093b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80093b6:	685b      	ldr	r3, [r3, #4]
 80093b8:	461a      	mov	r2, r3
 80093ba:	f04f 0300 	mov.w	r3, #0
 80093be:	1891      	adds	r1, r2, r2
 80093c0:	62b9      	str	r1, [r7, #40]	; 0x28
 80093c2:	415b      	adcs	r3, r3
 80093c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80093c6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80093ca:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80093ce:	f7f7 fba1 	bl	8000b14 <__aeabi_uldivmod>
 80093d2:	4602      	mov	r2, r0
 80093d4:	460b      	mov	r3, r1
 80093d6:	4b8c      	ldr	r3, [pc, #560]	; (8009608 <UART_SetConfig+0x38c>)
 80093d8:	fba3 1302 	umull	r1, r3, r3, r2
 80093dc:	095b      	lsrs	r3, r3, #5
 80093de:	2164      	movs	r1, #100	; 0x64
 80093e0:	fb01 f303 	mul.w	r3, r1, r3
 80093e4:	1ad3      	subs	r3, r2, r3
 80093e6:	00db      	lsls	r3, r3, #3
 80093e8:	3332      	adds	r3, #50	; 0x32
 80093ea:	4a87      	ldr	r2, [pc, #540]	; (8009608 <UART_SetConfig+0x38c>)
 80093ec:	fba2 2303 	umull	r2, r3, r2, r3
 80093f0:	095b      	lsrs	r3, r3, #5
 80093f2:	005b      	lsls	r3, r3, #1
 80093f4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80093f8:	441e      	add	r6, r3
 80093fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80093fc:	4618      	mov	r0, r3
 80093fe:	f04f 0100 	mov.w	r1, #0
 8009402:	4602      	mov	r2, r0
 8009404:	460b      	mov	r3, r1
 8009406:	1894      	adds	r4, r2, r2
 8009408:	623c      	str	r4, [r7, #32]
 800940a:	415b      	adcs	r3, r3
 800940c:	627b      	str	r3, [r7, #36]	; 0x24
 800940e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009412:	1812      	adds	r2, r2, r0
 8009414:	eb41 0303 	adc.w	r3, r1, r3
 8009418:	f04f 0400 	mov.w	r4, #0
 800941c:	f04f 0500 	mov.w	r5, #0
 8009420:	00dd      	lsls	r5, r3, #3
 8009422:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8009426:	00d4      	lsls	r4, r2, #3
 8009428:	4622      	mov	r2, r4
 800942a:	462b      	mov	r3, r5
 800942c:	1814      	adds	r4, r2, r0
 800942e:	653c      	str	r4, [r7, #80]	; 0x50
 8009430:	414b      	adcs	r3, r1
 8009432:	657b      	str	r3, [r7, #84]	; 0x54
 8009434:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009436:	685b      	ldr	r3, [r3, #4]
 8009438:	461a      	mov	r2, r3
 800943a:	f04f 0300 	mov.w	r3, #0
 800943e:	1891      	adds	r1, r2, r2
 8009440:	61b9      	str	r1, [r7, #24]
 8009442:	415b      	adcs	r3, r3
 8009444:	61fb      	str	r3, [r7, #28]
 8009446:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800944a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800944e:	f7f7 fb61 	bl	8000b14 <__aeabi_uldivmod>
 8009452:	4602      	mov	r2, r0
 8009454:	460b      	mov	r3, r1
 8009456:	4b6c      	ldr	r3, [pc, #432]	; (8009608 <UART_SetConfig+0x38c>)
 8009458:	fba3 1302 	umull	r1, r3, r3, r2
 800945c:	095b      	lsrs	r3, r3, #5
 800945e:	2164      	movs	r1, #100	; 0x64
 8009460:	fb01 f303 	mul.w	r3, r1, r3
 8009464:	1ad3      	subs	r3, r2, r3
 8009466:	00db      	lsls	r3, r3, #3
 8009468:	3332      	adds	r3, #50	; 0x32
 800946a:	4a67      	ldr	r2, [pc, #412]	; (8009608 <UART_SetConfig+0x38c>)
 800946c:	fba2 2303 	umull	r2, r3, r2, r3
 8009470:	095b      	lsrs	r3, r3, #5
 8009472:	f003 0207 	and.w	r2, r3, #7
 8009476:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	4432      	add	r2, r6
 800947c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800947e:	e0b9      	b.n	80095f4 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009480:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009482:	461c      	mov	r4, r3
 8009484:	f04f 0500 	mov.w	r5, #0
 8009488:	4622      	mov	r2, r4
 800948a:	462b      	mov	r3, r5
 800948c:	1891      	adds	r1, r2, r2
 800948e:	6139      	str	r1, [r7, #16]
 8009490:	415b      	adcs	r3, r3
 8009492:	617b      	str	r3, [r7, #20]
 8009494:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8009498:	1912      	adds	r2, r2, r4
 800949a:	eb45 0303 	adc.w	r3, r5, r3
 800949e:	f04f 0000 	mov.w	r0, #0
 80094a2:	f04f 0100 	mov.w	r1, #0
 80094a6:	00d9      	lsls	r1, r3, #3
 80094a8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80094ac:	00d0      	lsls	r0, r2, #3
 80094ae:	4602      	mov	r2, r0
 80094b0:	460b      	mov	r3, r1
 80094b2:	eb12 0804 	adds.w	r8, r2, r4
 80094b6:	eb43 0905 	adc.w	r9, r3, r5
 80094ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80094bc:	685b      	ldr	r3, [r3, #4]
 80094be:	4618      	mov	r0, r3
 80094c0:	f04f 0100 	mov.w	r1, #0
 80094c4:	f04f 0200 	mov.w	r2, #0
 80094c8:	f04f 0300 	mov.w	r3, #0
 80094cc:	008b      	lsls	r3, r1, #2
 80094ce:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80094d2:	0082      	lsls	r2, r0, #2
 80094d4:	4640      	mov	r0, r8
 80094d6:	4649      	mov	r1, r9
 80094d8:	f7f7 fb1c 	bl	8000b14 <__aeabi_uldivmod>
 80094dc:	4602      	mov	r2, r0
 80094de:	460b      	mov	r3, r1
 80094e0:	4b49      	ldr	r3, [pc, #292]	; (8009608 <UART_SetConfig+0x38c>)
 80094e2:	fba3 2302 	umull	r2, r3, r3, r2
 80094e6:	095b      	lsrs	r3, r3, #5
 80094e8:	011e      	lsls	r6, r3, #4
 80094ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80094ec:	4618      	mov	r0, r3
 80094ee:	f04f 0100 	mov.w	r1, #0
 80094f2:	4602      	mov	r2, r0
 80094f4:	460b      	mov	r3, r1
 80094f6:	1894      	adds	r4, r2, r2
 80094f8:	60bc      	str	r4, [r7, #8]
 80094fa:	415b      	adcs	r3, r3
 80094fc:	60fb      	str	r3, [r7, #12]
 80094fe:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009502:	1812      	adds	r2, r2, r0
 8009504:	eb41 0303 	adc.w	r3, r1, r3
 8009508:	f04f 0400 	mov.w	r4, #0
 800950c:	f04f 0500 	mov.w	r5, #0
 8009510:	00dd      	lsls	r5, r3, #3
 8009512:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8009516:	00d4      	lsls	r4, r2, #3
 8009518:	4622      	mov	r2, r4
 800951a:	462b      	mov	r3, r5
 800951c:	1814      	adds	r4, r2, r0
 800951e:	64bc      	str	r4, [r7, #72]	; 0x48
 8009520:	414b      	adcs	r3, r1
 8009522:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009524:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009526:	685b      	ldr	r3, [r3, #4]
 8009528:	4618      	mov	r0, r3
 800952a:	f04f 0100 	mov.w	r1, #0
 800952e:	f04f 0200 	mov.w	r2, #0
 8009532:	f04f 0300 	mov.w	r3, #0
 8009536:	008b      	lsls	r3, r1, #2
 8009538:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800953c:	0082      	lsls	r2, r0, #2
 800953e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8009542:	f7f7 fae7 	bl	8000b14 <__aeabi_uldivmod>
 8009546:	4602      	mov	r2, r0
 8009548:	460b      	mov	r3, r1
 800954a:	4b2f      	ldr	r3, [pc, #188]	; (8009608 <UART_SetConfig+0x38c>)
 800954c:	fba3 1302 	umull	r1, r3, r3, r2
 8009550:	095b      	lsrs	r3, r3, #5
 8009552:	2164      	movs	r1, #100	; 0x64
 8009554:	fb01 f303 	mul.w	r3, r1, r3
 8009558:	1ad3      	subs	r3, r2, r3
 800955a:	011b      	lsls	r3, r3, #4
 800955c:	3332      	adds	r3, #50	; 0x32
 800955e:	4a2a      	ldr	r2, [pc, #168]	; (8009608 <UART_SetConfig+0x38c>)
 8009560:	fba2 2303 	umull	r2, r3, r2, r3
 8009564:	095b      	lsrs	r3, r3, #5
 8009566:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800956a:	441e      	add	r6, r3
 800956c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800956e:	4618      	mov	r0, r3
 8009570:	f04f 0100 	mov.w	r1, #0
 8009574:	4602      	mov	r2, r0
 8009576:	460b      	mov	r3, r1
 8009578:	1894      	adds	r4, r2, r2
 800957a:	603c      	str	r4, [r7, #0]
 800957c:	415b      	adcs	r3, r3
 800957e:	607b      	str	r3, [r7, #4]
 8009580:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009584:	1812      	adds	r2, r2, r0
 8009586:	eb41 0303 	adc.w	r3, r1, r3
 800958a:	f04f 0400 	mov.w	r4, #0
 800958e:	f04f 0500 	mov.w	r5, #0
 8009592:	00dd      	lsls	r5, r3, #3
 8009594:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8009598:	00d4      	lsls	r4, r2, #3
 800959a:	4622      	mov	r2, r4
 800959c:	462b      	mov	r3, r5
 800959e:	eb12 0a00 	adds.w	sl, r2, r0
 80095a2:	eb43 0b01 	adc.w	fp, r3, r1
 80095a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80095a8:	685b      	ldr	r3, [r3, #4]
 80095aa:	4618      	mov	r0, r3
 80095ac:	f04f 0100 	mov.w	r1, #0
 80095b0:	f04f 0200 	mov.w	r2, #0
 80095b4:	f04f 0300 	mov.w	r3, #0
 80095b8:	008b      	lsls	r3, r1, #2
 80095ba:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80095be:	0082      	lsls	r2, r0, #2
 80095c0:	4650      	mov	r0, sl
 80095c2:	4659      	mov	r1, fp
 80095c4:	f7f7 faa6 	bl	8000b14 <__aeabi_uldivmod>
 80095c8:	4602      	mov	r2, r0
 80095ca:	460b      	mov	r3, r1
 80095cc:	4b0e      	ldr	r3, [pc, #56]	; (8009608 <UART_SetConfig+0x38c>)
 80095ce:	fba3 1302 	umull	r1, r3, r3, r2
 80095d2:	095b      	lsrs	r3, r3, #5
 80095d4:	2164      	movs	r1, #100	; 0x64
 80095d6:	fb01 f303 	mul.w	r3, r1, r3
 80095da:	1ad3      	subs	r3, r2, r3
 80095dc:	011b      	lsls	r3, r3, #4
 80095de:	3332      	adds	r3, #50	; 0x32
 80095e0:	4a09      	ldr	r2, [pc, #36]	; (8009608 <UART_SetConfig+0x38c>)
 80095e2:	fba2 2303 	umull	r2, r3, r2, r3
 80095e6:	095b      	lsrs	r3, r3, #5
 80095e8:	f003 020f 	and.w	r2, r3, #15
 80095ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	4432      	add	r2, r6
 80095f2:	609a      	str	r2, [r3, #8]
}
 80095f4:	bf00      	nop
 80095f6:	377c      	adds	r7, #124	; 0x7c
 80095f8:	46bd      	mov	sp, r7
 80095fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095fe:	bf00      	nop
 8009600:	40011000 	.word	0x40011000
 8009604:	40011400 	.word	0x40011400
 8009608:	51eb851f 	.word	0x51eb851f

0800960c <asinf>:
 800960c:	b508      	push	{r3, lr}
 800960e:	ed2d 8b02 	vpush	{d8}
 8009612:	eeb0 8a40 	vmov.f32	s16, s0
 8009616:	f000 f82d 	bl	8009674 <__ieee754_asinf>
 800961a:	4b13      	ldr	r3, [pc, #76]	; (8009668 <asinf+0x5c>)
 800961c:	f993 3000 	ldrsb.w	r3, [r3]
 8009620:	3301      	adds	r3, #1
 8009622:	eef0 8a40 	vmov.f32	s17, s0
 8009626:	d01a      	beq.n	800965e <asinf+0x52>
 8009628:	eeb4 8a48 	vcmp.f32	s16, s16
 800962c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009630:	d615      	bvs.n	800965e <asinf+0x52>
 8009632:	eeb0 0a48 	vmov.f32	s0, s16
 8009636:	f000 fa7b 	bl	8009b30 <fabsf>
 800963a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800963e:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8009642:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009646:	dd0a      	ble.n	800965e <asinf+0x52>
 8009648:	f000 fa80 	bl	8009b4c <__errno>
 800964c:	ecbd 8b02 	vpop	{d8}
 8009650:	2321      	movs	r3, #33	; 0x21
 8009652:	6003      	str	r3, [r0, #0]
 8009654:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8009658:	4804      	ldr	r0, [pc, #16]	; (800966c <asinf+0x60>)
 800965a:	f000 ba71 	b.w	8009b40 <nanf>
 800965e:	eeb0 0a68 	vmov.f32	s0, s17
 8009662:	ecbd 8b02 	vpop	{d8}
 8009666:	bd08      	pop	{r3, pc}
 8009668:	2000000d 	.word	0x2000000d
 800966c:	08009c0c 	.word	0x08009c0c

08009670 <atan2f>:
 8009670:	f000 b8e6 	b.w	8009840 <__ieee754_atan2f>

08009674 <__ieee754_asinf>:
 8009674:	b538      	push	{r3, r4, r5, lr}
 8009676:	ee10 5a10 	vmov	r5, s0
 800967a:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800967e:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8009682:	ed2d 8b04 	vpush	{d8-d9}
 8009686:	d10c      	bne.n	80096a2 <__ieee754_asinf+0x2e>
 8009688:	eddf 7a5d 	vldr	s15, [pc, #372]	; 8009800 <__ieee754_asinf+0x18c>
 800968c:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 8009804 <__ieee754_asinf+0x190>
 8009690:	ee60 7a27 	vmul.f32	s15, s0, s15
 8009694:	eee0 7a07 	vfma.f32	s15, s0, s14
 8009698:	eeb0 0a67 	vmov.f32	s0, s15
 800969c:	ecbd 8b04 	vpop	{d8-d9}
 80096a0:	bd38      	pop	{r3, r4, r5, pc}
 80096a2:	dd04      	ble.n	80096ae <__ieee754_asinf+0x3a>
 80096a4:	ee70 7a40 	vsub.f32	s15, s0, s0
 80096a8:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 80096ac:	e7f6      	b.n	800969c <__ieee754_asinf+0x28>
 80096ae:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 80096b2:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 80096b6:	da0b      	bge.n	80096d0 <__ieee754_asinf+0x5c>
 80096b8:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 80096bc:	da52      	bge.n	8009764 <__ieee754_asinf+0xf0>
 80096be:	eddf 7a52 	vldr	s15, [pc, #328]	; 8009808 <__ieee754_asinf+0x194>
 80096c2:	ee70 7a27 	vadd.f32	s15, s0, s15
 80096c6:	eef4 7ae8 	vcmpe.f32	s15, s17
 80096ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80096ce:	dce5      	bgt.n	800969c <__ieee754_asinf+0x28>
 80096d0:	f000 fa2e 	bl	8009b30 <fabsf>
 80096d4:	ee38 0ac0 	vsub.f32	s0, s17, s0
 80096d8:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 80096dc:	ee20 8a08 	vmul.f32	s16, s0, s16
 80096e0:	eddf 7a4a 	vldr	s15, [pc, #296]	; 800980c <__ieee754_asinf+0x198>
 80096e4:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8009810 <__ieee754_asinf+0x19c>
 80096e8:	ed9f 9a4a 	vldr	s18, [pc, #296]	; 8009814 <__ieee754_asinf+0x1a0>
 80096ec:	eea8 7a27 	vfma.f32	s14, s16, s15
 80096f0:	eddf 7a49 	vldr	s15, [pc, #292]	; 8009818 <__ieee754_asinf+0x1a4>
 80096f4:	eee7 7a08 	vfma.f32	s15, s14, s16
 80096f8:	ed9f 7a48 	vldr	s14, [pc, #288]	; 800981c <__ieee754_asinf+0x1a8>
 80096fc:	eea7 7a88 	vfma.f32	s14, s15, s16
 8009700:	eddf 7a47 	vldr	s15, [pc, #284]	; 8009820 <__ieee754_asinf+0x1ac>
 8009704:	eee7 7a08 	vfma.f32	s15, s14, s16
 8009708:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8009824 <__ieee754_asinf+0x1b0>
 800970c:	eea7 9a88 	vfma.f32	s18, s15, s16
 8009710:	eddf 7a45 	vldr	s15, [pc, #276]	; 8009828 <__ieee754_asinf+0x1b4>
 8009714:	eee8 7a07 	vfma.f32	s15, s16, s14
 8009718:	ed9f 7a44 	vldr	s14, [pc, #272]	; 800982c <__ieee754_asinf+0x1b8>
 800971c:	eea7 7a88 	vfma.f32	s14, s15, s16
 8009720:	eddf 7a43 	vldr	s15, [pc, #268]	; 8009830 <__ieee754_asinf+0x1bc>
 8009724:	eee7 7a08 	vfma.f32	s15, s14, s16
 8009728:	eeb0 0a48 	vmov.f32	s0, s16
 800972c:	eee7 8a88 	vfma.f32	s17, s15, s16
 8009730:	f000 f926 	bl	8009980 <__ieee754_sqrtf>
 8009734:	4b3f      	ldr	r3, [pc, #252]	; (8009834 <__ieee754_asinf+0x1c0>)
 8009736:	ee29 9a08 	vmul.f32	s18, s18, s16
 800973a:	429c      	cmp	r4, r3
 800973c:	ee89 6a28 	vdiv.f32	s12, s18, s17
 8009740:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8009744:	dd3d      	ble.n	80097c2 <__ieee754_asinf+0x14e>
 8009746:	eea0 0a06 	vfma.f32	s0, s0, s12
 800974a:	eddf 7a3b 	vldr	s15, [pc, #236]	; 8009838 <__ieee754_asinf+0x1c4>
 800974e:	eee0 7a26 	vfma.f32	s15, s0, s13
 8009752:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 8009804 <__ieee754_asinf+0x190>
 8009756:	ee30 0a67 	vsub.f32	s0, s0, s15
 800975a:	2d00      	cmp	r5, #0
 800975c:	bfd8      	it	le
 800975e:	eeb1 0a40 	vnegle.f32	s0, s0
 8009762:	e79b      	b.n	800969c <__ieee754_asinf+0x28>
 8009764:	ee60 7a00 	vmul.f32	s15, s0, s0
 8009768:	eddf 6a28 	vldr	s13, [pc, #160]	; 800980c <__ieee754_asinf+0x198>
 800976c:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8009810 <__ieee754_asinf+0x19c>
 8009770:	ed9f 6a2c 	vldr	s12, [pc, #176]	; 8009824 <__ieee754_asinf+0x1b0>
 8009774:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8009778:	eddf 6a27 	vldr	s13, [pc, #156]	; 8009818 <__ieee754_asinf+0x1a4>
 800977c:	eee7 6a27 	vfma.f32	s13, s14, s15
 8009780:	ed9f 7a26 	vldr	s14, [pc, #152]	; 800981c <__ieee754_asinf+0x1a8>
 8009784:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8009788:	eddf 6a25 	vldr	s13, [pc, #148]	; 8009820 <__ieee754_asinf+0x1ac>
 800978c:	eee7 6a27 	vfma.f32	s13, s14, s15
 8009790:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8009814 <__ieee754_asinf+0x1a0>
 8009794:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8009798:	eddf 6a23 	vldr	s13, [pc, #140]	; 8009828 <__ieee754_asinf+0x1b4>
 800979c:	eee7 6a86 	vfma.f32	s13, s15, s12
 80097a0:	ed9f 6a22 	vldr	s12, [pc, #136]	; 800982c <__ieee754_asinf+0x1b8>
 80097a4:	eea6 6aa7 	vfma.f32	s12, s13, s15
 80097a8:	eddf 6a21 	vldr	s13, [pc, #132]	; 8009830 <__ieee754_asinf+0x1bc>
 80097ac:	eee6 6a27 	vfma.f32	s13, s12, s15
 80097b0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80097b4:	eee6 8aa7 	vfma.f32	s17, s13, s15
 80097b8:	eec7 7a28 	vdiv.f32	s15, s14, s17
 80097bc:	eea0 0a27 	vfma.f32	s0, s0, s15
 80097c0:	e76c      	b.n	800969c <__ieee754_asinf+0x28>
 80097c2:	ee10 3a10 	vmov	r3, s0
 80097c6:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80097ca:	f023 030f 	bic.w	r3, r3, #15
 80097ce:	ee07 3a10 	vmov	s14, r3
 80097d2:	eea7 8a47 	vfms.f32	s16, s14, s14
 80097d6:	ee70 7a07 	vadd.f32	s15, s0, s14
 80097da:	ee30 0a00 	vadd.f32	s0, s0, s0
 80097de:	eec8 5a27 	vdiv.f32	s11, s16, s15
 80097e2:	eddf 7a07 	vldr	s15, [pc, #28]	; 8009800 <__ieee754_asinf+0x18c>
 80097e6:	eee5 7ae6 	vfms.f32	s15, s11, s13
 80097ea:	eed0 7a06 	vfnms.f32	s15, s0, s12
 80097ee:	ed9f 0a13 	vldr	s0, [pc, #76]	; 800983c <__ieee754_asinf+0x1c8>
 80097f2:	eeb0 6a40 	vmov.f32	s12, s0
 80097f6:	eea7 6a66 	vfms.f32	s12, s14, s13
 80097fa:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80097fe:	e7aa      	b.n	8009756 <__ieee754_asinf+0xe2>
 8009800:	b33bbd2e 	.word	0xb33bbd2e
 8009804:	3fc90fdb 	.word	0x3fc90fdb
 8009808:	7149f2ca 	.word	0x7149f2ca
 800980c:	3811ef08 	.word	0x3811ef08
 8009810:	3a4f7f04 	.word	0x3a4f7f04
 8009814:	3e2aaaab 	.word	0x3e2aaaab
 8009818:	bd241146 	.word	0xbd241146
 800981c:	3e4e0aa8 	.word	0x3e4e0aa8
 8009820:	bea6b090 	.word	0xbea6b090
 8009824:	3d9dc62e 	.word	0x3d9dc62e
 8009828:	bf303361 	.word	0xbf303361
 800982c:	4001572d 	.word	0x4001572d
 8009830:	c019d139 	.word	0xc019d139
 8009834:	3f799999 	.word	0x3f799999
 8009838:	333bbd2e 	.word	0x333bbd2e
 800983c:	3f490fdb 	.word	0x3f490fdb

08009840 <__ieee754_atan2f>:
 8009840:	ee10 2a90 	vmov	r2, s1
 8009844:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8009848:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800984c:	b510      	push	{r4, lr}
 800984e:	eef0 7a40 	vmov.f32	s15, s0
 8009852:	dc06      	bgt.n	8009862 <__ieee754_atan2f+0x22>
 8009854:	ee10 0a10 	vmov	r0, s0
 8009858:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800985c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8009860:	dd04      	ble.n	800986c <__ieee754_atan2f+0x2c>
 8009862:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8009866:	eeb0 0a67 	vmov.f32	s0, s15
 800986a:	bd10      	pop	{r4, pc}
 800986c:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 8009870:	d103      	bne.n	800987a <__ieee754_atan2f+0x3a>
 8009872:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009876:	f000 b887 	b.w	8009988 <atanf>
 800987a:	1794      	asrs	r4, r2, #30
 800987c:	f004 0402 	and.w	r4, r4, #2
 8009880:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8009884:	b943      	cbnz	r3, 8009898 <__ieee754_atan2f+0x58>
 8009886:	2c02      	cmp	r4, #2
 8009888:	d05e      	beq.n	8009948 <__ieee754_atan2f+0x108>
 800988a:	ed9f 7a34 	vldr	s14, [pc, #208]	; 800995c <__ieee754_atan2f+0x11c>
 800988e:	2c03      	cmp	r4, #3
 8009890:	bf08      	it	eq
 8009892:	eef0 7a47 	vmoveq.f32	s15, s14
 8009896:	e7e6      	b.n	8009866 <__ieee754_atan2f+0x26>
 8009898:	b941      	cbnz	r1, 80098ac <__ieee754_atan2f+0x6c>
 800989a:	eddf 7a31 	vldr	s15, [pc, #196]	; 8009960 <__ieee754_atan2f+0x120>
 800989e:	ed9f 0a31 	vldr	s0, [pc, #196]	; 8009964 <__ieee754_atan2f+0x124>
 80098a2:	2800      	cmp	r0, #0
 80098a4:	bfb8      	it	lt
 80098a6:	eef0 7a40 	vmovlt.f32	s15, s0
 80098aa:	e7dc      	b.n	8009866 <__ieee754_atan2f+0x26>
 80098ac:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80098b0:	d110      	bne.n	80098d4 <__ieee754_atan2f+0x94>
 80098b2:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80098b6:	f104 34ff 	add.w	r4, r4, #4294967295
 80098ba:	d107      	bne.n	80098cc <__ieee754_atan2f+0x8c>
 80098bc:	2c02      	cmp	r4, #2
 80098be:	d846      	bhi.n	800994e <__ieee754_atan2f+0x10e>
 80098c0:	4b29      	ldr	r3, [pc, #164]	; (8009968 <__ieee754_atan2f+0x128>)
 80098c2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80098c6:	edd4 7a00 	vldr	s15, [r4]
 80098ca:	e7cc      	b.n	8009866 <__ieee754_atan2f+0x26>
 80098cc:	2c02      	cmp	r4, #2
 80098ce:	d841      	bhi.n	8009954 <__ieee754_atan2f+0x114>
 80098d0:	4b26      	ldr	r3, [pc, #152]	; (800996c <__ieee754_atan2f+0x12c>)
 80098d2:	e7f6      	b.n	80098c2 <__ieee754_atan2f+0x82>
 80098d4:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80098d8:	d0df      	beq.n	800989a <__ieee754_atan2f+0x5a>
 80098da:	1a5b      	subs	r3, r3, r1
 80098dc:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 80098e0:	ea4f 51e3 	mov.w	r1, r3, asr #23
 80098e4:	da1a      	bge.n	800991c <__ieee754_atan2f+0xdc>
 80098e6:	2a00      	cmp	r2, #0
 80098e8:	da01      	bge.n	80098ee <__ieee754_atan2f+0xae>
 80098ea:	313c      	adds	r1, #60	; 0x3c
 80098ec:	db19      	blt.n	8009922 <__ieee754_atan2f+0xe2>
 80098ee:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 80098f2:	f000 f91d 	bl	8009b30 <fabsf>
 80098f6:	f000 f847 	bl	8009988 <atanf>
 80098fa:	eef0 7a40 	vmov.f32	s15, s0
 80098fe:	2c01      	cmp	r4, #1
 8009900:	d012      	beq.n	8009928 <__ieee754_atan2f+0xe8>
 8009902:	2c02      	cmp	r4, #2
 8009904:	d017      	beq.n	8009936 <__ieee754_atan2f+0xf6>
 8009906:	2c00      	cmp	r4, #0
 8009908:	d0ad      	beq.n	8009866 <__ieee754_atan2f+0x26>
 800990a:	ed9f 0a19 	vldr	s0, [pc, #100]	; 8009970 <__ieee754_atan2f+0x130>
 800990e:	ee77 7a80 	vadd.f32	s15, s15, s0
 8009912:	ed9f 0a18 	vldr	s0, [pc, #96]	; 8009974 <__ieee754_atan2f+0x134>
 8009916:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800991a:	e7a4      	b.n	8009866 <__ieee754_atan2f+0x26>
 800991c:	eddf 7a10 	vldr	s15, [pc, #64]	; 8009960 <__ieee754_atan2f+0x120>
 8009920:	e7ed      	b.n	80098fe <__ieee754_atan2f+0xbe>
 8009922:	eddf 7a15 	vldr	s15, [pc, #84]	; 8009978 <__ieee754_atan2f+0x138>
 8009926:	e7ea      	b.n	80098fe <__ieee754_atan2f+0xbe>
 8009928:	ee17 3a90 	vmov	r3, s15
 800992c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8009930:	ee07 3a90 	vmov	s15, r3
 8009934:	e797      	b.n	8009866 <__ieee754_atan2f+0x26>
 8009936:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8009970 <__ieee754_atan2f+0x130>
 800993a:	ee77 7a80 	vadd.f32	s15, s15, s0
 800993e:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 8009974 <__ieee754_atan2f+0x134>
 8009942:	ee70 7a67 	vsub.f32	s15, s0, s15
 8009946:	e78e      	b.n	8009866 <__ieee754_atan2f+0x26>
 8009948:	eddf 7a0a 	vldr	s15, [pc, #40]	; 8009974 <__ieee754_atan2f+0x134>
 800994c:	e78b      	b.n	8009866 <__ieee754_atan2f+0x26>
 800994e:	eddf 7a0b 	vldr	s15, [pc, #44]	; 800997c <__ieee754_atan2f+0x13c>
 8009952:	e788      	b.n	8009866 <__ieee754_atan2f+0x26>
 8009954:	eddf 7a08 	vldr	s15, [pc, #32]	; 8009978 <__ieee754_atan2f+0x138>
 8009958:	e785      	b.n	8009866 <__ieee754_atan2f+0x26>
 800995a:	bf00      	nop
 800995c:	c0490fdb 	.word	0xc0490fdb
 8009960:	3fc90fdb 	.word	0x3fc90fdb
 8009964:	bfc90fdb 	.word	0xbfc90fdb
 8009968:	08009c10 	.word	0x08009c10
 800996c:	08009c1c 	.word	0x08009c1c
 8009970:	33bbbd2e 	.word	0x33bbbd2e
 8009974:	40490fdb 	.word	0x40490fdb
 8009978:	00000000 	.word	0x00000000
 800997c:	3f490fdb 	.word	0x3f490fdb

08009980 <__ieee754_sqrtf>:
 8009980:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8009984:	4770      	bx	lr
	...

08009988 <atanf>:
 8009988:	b538      	push	{r3, r4, r5, lr}
 800998a:	ee10 5a10 	vmov	r5, s0
 800998e:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8009992:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 8009996:	eef0 7a40 	vmov.f32	s15, s0
 800999a:	db10      	blt.n	80099be <atanf+0x36>
 800999c:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 80099a0:	dd04      	ble.n	80099ac <atanf+0x24>
 80099a2:	ee70 7a00 	vadd.f32	s15, s0, s0
 80099a6:	eeb0 0a67 	vmov.f32	s0, s15
 80099aa:	bd38      	pop	{r3, r4, r5, pc}
 80099ac:	eddf 7a4d 	vldr	s15, [pc, #308]	; 8009ae4 <atanf+0x15c>
 80099b0:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 8009ae8 <atanf+0x160>
 80099b4:	2d00      	cmp	r5, #0
 80099b6:	bfd8      	it	le
 80099b8:	eef0 7a40 	vmovle.f32	s15, s0
 80099bc:	e7f3      	b.n	80099a6 <atanf+0x1e>
 80099be:	4b4b      	ldr	r3, [pc, #300]	; (8009aec <atanf+0x164>)
 80099c0:	429c      	cmp	r4, r3
 80099c2:	dc10      	bgt.n	80099e6 <atanf+0x5e>
 80099c4:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 80099c8:	da0a      	bge.n	80099e0 <atanf+0x58>
 80099ca:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8009af0 <atanf+0x168>
 80099ce:	ee30 7a07 	vadd.f32	s14, s0, s14
 80099d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80099d6:	eeb4 7ae6 	vcmpe.f32	s14, s13
 80099da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80099de:	dce2      	bgt.n	80099a6 <atanf+0x1e>
 80099e0:	f04f 33ff 	mov.w	r3, #4294967295
 80099e4:	e013      	b.n	8009a0e <atanf+0x86>
 80099e6:	f000 f8a3 	bl	8009b30 <fabsf>
 80099ea:	4b42      	ldr	r3, [pc, #264]	; (8009af4 <atanf+0x16c>)
 80099ec:	429c      	cmp	r4, r3
 80099ee:	dc4f      	bgt.n	8009a90 <atanf+0x108>
 80099f0:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 80099f4:	429c      	cmp	r4, r3
 80099f6:	dc41      	bgt.n	8009a7c <atanf+0xf4>
 80099f8:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 80099fc:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8009a00:	eea0 7a27 	vfma.f32	s14, s0, s15
 8009a04:	2300      	movs	r3, #0
 8009a06:	ee30 0a27 	vadd.f32	s0, s0, s15
 8009a0a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8009a0e:	1c5a      	adds	r2, r3, #1
 8009a10:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8009a14:	eddf 5a38 	vldr	s11, [pc, #224]	; 8009af8 <atanf+0x170>
 8009a18:	ed9f 6a38 	vldr	s12, [pc, #224]	; 8009afc <atanf+0x174>
 8009a1c:	ed9f 5a38 	vldr	s10, [pc, #224]	; 8009b00 <atanf+0x178>
 8009a20:	ed9f 0a38 	vldr	s0, [pc, #224]	; 8009b04 <atanf+0x17c>
 8009a24:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8009a28:	eea7 6a25 	vfma.f32	s12, s14, s11
 8009a2c:	eddf 5a36 	vldr	s11, [pc, #216]	; 8009b08 <atanf+0x180>
 8009a30:	eee6 5a07 	vfma.f32	s11, s12, s14
 8009a34:	ed9f 6a35 	vldr	s12, [pc, #212]	; 8009b0c <atanf+0x184>
 8009a38:	eea5 6a87 	vfma.f32	s12, s11, s14
 8009a3c:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009b10 <atanf+0x188>
 8009a40:	eee6 5a07 	vfma.f32	s11, s12, s14
 8009a44:	ed9f 6a33 	vldr	s12, [pc, #204]	; 8009b14 <atanf+0x18c>
 8009a48:	eea5 6a87 	vfma.f32	s12, s11, s14
 8009a4c:	eddf 5a32 	vldr	s11, [pc, #200]	; 8009b18 <atanf+0x190>
 8009a50:	eee7 5a05 	vfma.f32	s11, s14, s10
 8009a54:	ed9f 5a31 	vldr	s10, [pc, #196]	; 8009b1c <atanf+0x194>
 8009a58:	eea5 5a87 	vfma.f32	s10, s11, s14
 8009a5c:	eddf 5a30 	vldr	s11, [pc, #192]	; 8009b20 <atanf+0x198>
 8009a60:	eee5 5a07 	vfma.f32	s11, s10, s14
 8009a64:	eea5 0a87 	vfma.f32	s0, s11, s14
 8009a68:	ee20 0a07 	vmul.f32	s0, s0, s14
 8009a6c:	eea6 0a26 	vfma.f32	s0, s12, s13
 8009a70:	ee27 0a80 	vmul.f32	s0, s15, s0
 8009a74:	d121      	bne.n	8009aba <atanf+0x132>
 8009a76:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8009a7a:	e794      	b.n	80099a6 <atanf+0x1e>
 8009a7c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8009a80:	ee30 7a67 	vsub.f32	s14, s0, s15
 8009a84:	ee30 0a27 	vadd.f32	s0, s0, s15
 8009a88:	2301      	movs	r3, #1
 8009a8a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8009a8e:	e7be      	b.n	8009a0e <atanf+0x86>
 8009a90:	4b24      	ldr	r3, [pc, #144]	; (8009b24 <atanf+0x19c>)
 8009a92:	429c      	cmp	r4, r3
 8009a94:	dc0b      	bgt.n	8009aae <atanf+0x126>
 8009a96:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 8009a9a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009a9e:	eea0 7a27 	vfma.f32	s14, s0, s15
 8009aa2:	2302      	movs	r3, #2
 8009aa4:	ee70 6a67 	vsub.f32	s13, s0, s15
 8009aa8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009aac:	e7af      	b.n	8009a0e <atanf+0x86>
 8009aae:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8009ab2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8009ab6:	2303      	movs	r3, #3
 8009ab8:	e7a9      	b.n	8009a0e <atanf+0x86>
 8009aba:	4a1b      	ldr	r2, [pc, #108]	; (8009b28 <atanf+0x1a0>)
 8009abc:	491b      	ldr	r1, [pc, #108]	; (8009b2c <atanf+0x1a4>)
 8009abe:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8009ac2:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8009ac6:	ed93 7a00 	vldr	s14, [r3]
 8009aca:	ee30 0a47 	vsub.f32	s0, s0, s14
 8009ace:	2d00      	cmp	r5, #0
 8009ad0:	ee70 7a67 	vsub.f32	s15, s0, s15
 8009ad4:	ed92 0a00 	vldr	s0, [r2]
 8009ad8:	ee70 7a67 	vsub.f32	s15, s0, s15
 8009adc:	bfb8      	it	lt
 8009ade:	eef1 7a67 	vneglt.f32	s15, s15
 8009ae2:	e760      	b.n	80099a6 <atanf+0x1e>
 8009ae4:	3fc90fdb 	.word	0x3fc90fdb
 8009ae8:	bfc90fdb 	.word	0xbfc90fdb
 8009aec:	3edfffff 	.word	0x3edfffff
 8009af0:	7149f2ca 	.word	0x7149f2ca
 8009af4:	3f97ffff 	.word	0x3f97ffff
 8009af8:	3c8569d7 	.word	0x3c8569d7
 8009afc:	3d4bda59 	.word	0x3d4bda59
 8009b00:	bd15a221 	.word	0xbd15a221
 8009b04:	be4ccccd 	.word	0xbe4ccccd
 8009b08:	3d886b35 	.word	0x3d886b35
 8009b0c:	3dba2e6e 	.word	0x3dba2e6e
 8009b10:	3e124925 	.word	0x3e124925
 8009b14:	3eaaaaab 	.word	0x3eaaaaab
 8009b18:	bd6ef16b 	.word	0xbd6ef16b
 8009b1c:	bd9d8795 	.word	0xbd9d8795
 8009b20:	bde38e38 	.word	0xbde38e38
 8009b24:	401bffff 	.word	0x401bffff
 8009b28:	08009c28 	.word	0x08009c28
 8009b2c:	08009c38 	.word	0x08009c38

08009b30 <fabsf>:
 8009b30:	ee10 3a10 	vmov	r3, s0
 8009b34:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009b38:	ee00 3a10 	vmov	s0, r3
 8009b3c:	4770      	bx	lr
	...

08009b40 <nanf>:
 8009b40:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8009b48 <nanf+0x8>
 8009b44:	4770      	bx	lr
 8009b46:	bf00      	nop
 8009b48:	7fc00000 	.word	0x7fc00000

08009b4c <__errno>:
 8009b4c:	4b01      	ldr	r3, [pc, #4]	; (8009b54 <__errno+0x8>)
 8009b4e:	6818      	ldr	r0, [r3, #0]
 8009b50:	4770      	bx	lr
 8009b52:	bf00      	nop
 8009b54:	20000010 	.word	0x20000010

08009b58 <__libc_init_array>:
 8009b58:	b570      	push	{r4, r5, r6, lr}
 8009b5a:	4d0d      	ldr	r5, [pc, #52]	; (8009b90 <__libc_init_array+0x38>)
 8009b5c:	4c0d      	ldr	r4, [pc, #52]	; (8009b94 <__libc_init_array+0x3c>)
 8009b5e:	1b64      	subs	r4, r4, r5
 8009b60:	10a4      	asrs	r4, r4, #2
 8009b62:	2600      	movs	r6, #0
 8009b64:	42a6      	cmp	r6, r4
 8009b66:	d109      	bne.n	8009b7c <__libc_init_array+0x24>
 8009b68:	4d0b      	ldr	r5, [pc, #44]	; (8009b98 <__libc_init_array+0x40>)
 8009b6a:	4c0c      	ldr	r4, [pc, #48]	; (8009b9c <__libc_init_array+0x44>)
 8009b6c:	f000 f820 	bl	8009bb0 <_init>
 8009b70:	1b64      	subs	r4, r4, r5
 8009b72:	10a4      	asrs	r4, r4, #2
 8009b74:	2600      	movs	r6, #0
 8009b76:	42a6      	cmp	r6, r4
 8009b78:	d105      	bne.n	8009b86 <__libc_init_array+0x2e>
 8009b7a:	bd70      	pop	{r4, r5, r6, pc}
 8009b7c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009b80:	4798      	blx	r3
 8009b82:	3601      	adds	r6, #1
 8009b84:	e7ee      	b.n	8009b64 <__libc_init_array+0xc>
 8009b86:	f855 3b04 	ldr.w	r3, [r5], #4
 8009b8a:	4798      	blx	r3
 8009b8c:	3601      	adds	r6, #1
 8009b8e:	e7f2      	b.n	8009b76 <__libc_init_array+0x1e>
 8009b90:	08009c50 	.word	0x08009c50
 8009b94:	08009c50 	.word	0x08009c50
 8009b98:	08009c50 	.word	0x08009c50
 8009b9c:	08009c54 	.word	0x08009c54

08009ba0 <memset>:
 8009ba0:	4402      	add	r2, r0
 8009ba2:	4603      	mov	r3, r0
 8009ba4:	4293      	cmp	r3, r2
 8009ba6:	d100      	bne.n	8009baa <memset+0xa>
 8009ba8:	4770      	bx	lr
 8009baa:	f803 1b01 	strb.w	r1, [r3], #1
 8009bae:	e7f9      	b.n	8009ba4 <memset+0x4>

08009bb0 <_init>:
 8009bb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009bb2:	bf00      	nop
 8009bb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009bb6:	bc08      	pop	{r3}
 8009bb8:	469e      	mov	lr, r3
 8009bba:	4770      	bx	lr

08009bbc <_fini>:
 8009bbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009bbe:	bf00      	nop
 8009bc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009bc2:	bc08      	pop	{r3}
 8009bc4:	469e      	mov	lr, r3
 8009bc6:	4770      	bx	lr
